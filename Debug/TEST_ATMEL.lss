
TEST_ATMEL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00001c70  00001d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b9  0080022e  0080022e  00001d32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002436  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000119e  00000000  00000000  00004372  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ebd  00000000  00000000  00005510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  000063d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ff  00000000  00000000  00006938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f31  00000000  00000000  00007337  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00008268  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ee c0       	rjmp	.+476    	; 0x1de <__ctors_end>
       2:	00 00       	nop
       4:	ad c1       	rjmp	.+858    	; 0x360 <__vector_1>
       6:	00 00       	nop
       8:	e6 c1       	rjmp	.+972    	; 0x3d6 <__vector_2>
       a:	00 00       	nop
       c:	1f c2       	rjmp	.+1086   	; 0x44c <__vector_3>
       e:	00 00       	nop
      10:	58 c2       	rjmp	.+1200   	; 0x4c2 <__vector_4>
      12:	00 00       	nop
      14:	91 c2       	rjmp	.+1314   	; 0x538 <__vector_5>
      16:	00 00       	nop
      18:	9e c2       	rjmp	.+1340   	; 0x556 <__vector_6>
      1a:	00 00       	nop
      1c:	ab c2       	rjmp	.+1366   	; 0x574 <__vector_7>
      1e:	00 00       	nop
      20:	b8 c2       	rjmp	.+1392   	; 0x592 <__vector_8>
      22:	00 00       	nop
      24:	fc c0       	rjmp	.+504    	; 0x21e <__bad_interrupt>
      26:	00 00       	nop
      28:	fa c0       	rjmp	.+500    	; 0x21e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f8 c0       	rjmp	.+496    	; 0x21e <__bad_interrupt>
      2e:	00 00       	nop
      30:	f6 c0       	rjmp	.+492    	; 0x21e <__bad_interrupt>
      32:	00 00       	nop
      34:	f4 c0       	rjmp	.+488    	; 0x21e <__bad_interrupt>
      36:	00 00       	nop
      38:	f2 c0       	rjmp	.+484    	; 0x21e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f0 c0       	rjmp	.+480    	; 0x21e <__bad_interrupt>
      3e:	00 00       	nop
      40:	ee c0       	rjmp	.+476    	; 0x21e <__bad_interrupt>
      42:	00 00       	nop
      44:	ec c0       	rjmp	.+472    	; 0x21e <__bad_interrupt>
      46:	00 00       	nop
      48:	ea c0       	rjmp	.+468    	; 0x21e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e8 c0       	rjmp	.+464    	; 0x21e <__bad_interrupt>
      4e:	00 00       	nop
      50:	e6 c0       	rjmp	.+460    	; 0x21e <__bad_interrupt>
      52:	00 00       	nop
      54:	e4 c0       	rjmp	.+456    	; 0x21e <__bad_interrupt>
      56:	00 00       	nop
      58:	e2 c0       	rjmp	.+452    	; 0x21e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e0 c0       	rjmp	.+448    	; 0x21e <__bad_interrupt>
      5e:	00 00       	nop
      60:	de c0       	rjmp	.+444    	; 0x21e <__bad_interrupt>
      62:	00 00       	nop
      64:	a5 c2       	rjmp	.+1354   	; 0x5b0 <__vector_25>
      66:	00 00       	nop
      68:	da c0       	rjmp	.+436    	; 0x21e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	d8 c0       	rjmp	.+432    	; 0x21e <__bad_interrupt>
      6e:	00 00       	nop
      70:	d6 c0       	rjmp	.+428    	; 0x21e <__bad_interrupt>
      72:	00 00       	nop
      74:	d4 c0       	rjmp	.+424    	; 0x21e <__bad_interrupt>
      76:	00 00       	nop
      78:	d2 c0       	rjmp	.+420    	; 0x21e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d0 c0       	rjmp	.+416    	; 0x21e <__bad_interrupt>
      7e:	00 00       	nop
      80:	ce c0       	rjmp	.+412    	; 0x21e <__bad_interrupt>
      82:	00 00       	nop
      84:	cc c0       	rjmp	.+408    	; 0x21e <__bad_interrupt>
      86:	00 00       	nop
      88:	ca c0       	rjmp	.+404    	; 0x21e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c9 c0       	rjmp	.+402    	; 0x220 <__vector_35>
      8e:	00 00       	nop
      90:	c6 c0       	rjmp	.+396    	; 0x21e <__bad_interrupt>
      92:	00 00       	nop
      94:	c4 c0       	rjmp	.+392    	; 0x21e <__bad_interrupt>
      96:	00 00       	nop
      98:	c2 c0       	rjmp	.+388    	; 0x21e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c0 c0       	rjmp	.+384    	; 0x21e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	be c0       	rjmp	.+380    	; 0x21e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	bc c0       	rjmp	.+376    	; 0x21e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ba c0       	rjmp	.+372    	; 0x21e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b8 c0       	rjmp	.+368    	; 0x21e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b6 c0       	rjmp	.+364    	; 0x21e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b4 c0       	rjmp	.+360    	; 0x21e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b2 c0       	rjmp	.+356    	; 0x21e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b0 c0       	rjmp	.+352    	; 0x21e <__bad_interrupt>
      be:	00 00       	nop
      c0:	ae c0       	rjmp	.+348    	; 0x21e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	ac c0       	rjmp	.+344    	; 0x21e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	aa c0       	rjmp	.+340    	; 0x21e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a8 c0       	rjmp	.+336    	; 0x21e <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a6 c0       	rjmp	.+332    	; 0x21e <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a4 c0       	rjmp	.+328    	; 0x21e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a2 c0       	rjmp	.+324    	; 0x21e <__bad_interrupt>
      da:	00 00       	nop
      dc:	a0 c0       	rjmp	.+320    	; 0x21e <__bad_interrupt>
      de:	00 00       	nop
      e0:	9e c0       	rjmp	.+316    	; 0x21e <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	00 40       	sbci	r16, 0x00	; 0
      e6:	7a 10       	cpse	r7, r10
      e8:	f3 5a       	subi	r31, 0xA3	; 163
      ea:	00 a0       	ldd	r0, Z+32	; 0x20
      ec:	72 4e       	sbci	r23, 0xE2	; 226
      ee:	18 09       	sbc	r17, r8
      f0:	00 10       	cpse	r0, r0
      f2:	a5 d4       	rcall	.+2378   	; 0xa3e <main+0x422>
      f4:	e8 00       	.word	0x00e8	; ????
      f6:	00 e8       	ldi	r16, 0x80	; 128
      f8:	76 48       	sbci	r23, 0x86	; 134
      fa:	17 00       	.word	0x0017	; ????
      fc:	00 e4       	ldi	r16, 0x40	; 64
      fe:	0b 54       	subi	r16, 0x4B	; 75
     100:	02 00       	.word	0x0002	; ????
     102:	00 ca       	rjmp	.-3072   	; 0xfffff504 <__eeprom_end+0xff7ef504>
     104:	9a 3b       	cpi	r25, 0xBA	; 186
     106:	00 00       	nop
     108:	00 e1       	ldi	r16, 0x10	; 16
     10a:	f5 05       	cpc	r31, r5
     10c:	00 00       	nop
     10e:	80 96       	adiw	r24, 0x20	; 32
     110:	98 00       	.word	0x0098	; ????
     112:	00 00       	nop
     114:	40 42       	sbci	r20, 0x20	; 32
     116:	0f 00       	.word	0x000f	; ????
     118:	00 00       	nop
     11a:	a0 86       	std	Z+8, r10	; 0x08
     11c:	01 00       	.word	0x0001	; ????
     11e:	00 00       	nop
     120:	10 27       	eor	r17, r16
     122:	00 00       	nop
     124:	00 00       	nop
     126:	e8 03       	fmulsu	r22, r16
     128:	00 00       	nop
     12a:	00 00       	nop
     12c:	64 00       	.word	0x0064	; ????
     12e:	00 00       	nop
     130:	00 00       	nop
     132:	0a 00       	.word	0x000a	; ????
     134:	00 00       	nop
     136:	00 00       	nop
     138:	01 00       	.word	0x0001	; ????
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	2c 76       	andi	r18, 0x6C	; 108
     140:	d8 88       	ldd	r13, Y+16	; 0x10
     142:	dc 67       	ori	r29, 0x7C	; 124
     144:	4f 08       	sbc	r4, r15
     146:	23 df       	rcall	.-442    	; 0xffffff8e <__eeprom_end+0xff7eff8e>
     148:	c1 df       	rcall	.-126    	; 0xcc <__SREG__+0x8d>
     14a:	ae 59       	subi	r26, 0x9E	; 158
     14c:	e1 b1       	in	r30, 0x01	; 1
     14e:	b7 96       	adiw	r30, 0x27	; 39
     150:	e5 e3       	ldi	r30, 0x35	; 53
     152:	e4 53       	subi	r30, 0x34	; 52
     154:	c6 3a       	cpi	r28, 0xA6	; 166
     156:	e6 51       	subi	r30, 0x16	; 22
     158:	99 76       	andi	r25, 0x69	; 105
     15a:	96 e8       	ldi	r25, 0x86	; 134
     15c:	e6 c2       	rjmp	.+1484   	; 0x72a <main+0x10e>
     15e:	84 26       	eor	r8, r20
     160:	eb 89       	ldd	r30, Y+19	; 0x13
     162:	8c 9b       	sbis	0x11, 4	; 17
     164:	62 ed       	ldi	r22, 0xD2	; 210
     166:	40 7c       	andi	r20, 0xC0	; 192
     168:	6f fc       	.word	0xfc6f	; ????
     16a:	ef bc       	out	0x2f, r14	; 47
     16c:	9c 9f       	mul	r25, r28
     16e:	40 f2       	brcs	.-112    	; 0x100 <__trampolines_end+0x1c>
     170:	ba a5       	ldd	r27, Y+42	; 0x2a
     172:	6f a5       	ldd	r22, Y+47	; 0x2f
     174:	f4 90       	lpm	r15, Z
     176:	05 5a       	subi	r16, 0xA5	; 165
     178:	2a f7       	brpl	.-54     	; 0x144 <__trampolines_end+0x60>
     17a:	5c 93       	st	X, r21
     17c:	6b 6c       	ori	r22, 0xCB	; 203
     17e:	f9 67       	ori	r31, 0x79	; 121
     180:	6d c1       	rjmp	.+730    	; 0x45c <__vector_3+0x10>
     182:	1b fc       	.word	0xfc1b	; ????
     184:	e0 e4       	ldi	r30, 0x40	; 64
     186:	0d 47       	sbci	r16, 0x7D	; 125
     188:	fe f5       	brtc	.+126    	; 0x208 <__do_clear_bss>
     18a:	20 e6       	ldi	r18, 0x60	; 96
     18c:	b5 00       	.word	0x00b5	; ????
     18e:	d0 ed       	ldi	r29, 0xD0	; 208
     190:	90 2e       	mov	r9, r16
     192:	03 00       	.word	0x0003	; ????
     194:	94 35       	cpi	r25, 0x54	; 84
     196:	77 05       	cpc	r23, r7
     198:	00 80       	ld	r0, Z
     19a:	84 1e       	adc	r8, r20
     19c:	08 00       	.word	0x0008	; ????
     19e:	00 20       	and	r0, r0
     1a0:	4e 0a       	sbc	r4, r30
     1a2:	00 00       	nop
     1a4:	00 c8       	rjmp	.-4096   	; 0xfffff1a6 <__eeprom_end+0xff7ef1a6>
     1a6:	0c 33       	cpi	r16, 0x3C	; 60
     1a8:	33 33       	cpi	r19, 0x33	; 51
     1aa:	33 0f       	add	r19, r19
     1ac:	98 6e       	ori	r25, 0xE8	; 232
     1ae:	12 83       	std	Z+2, r17	; 0x02
     1b0:	11 41       	sbci	r17, 0x11	; 17
     1b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1b4:	21 14       	cp	r2, r1
     1b6:	89 3b       	cpi	r24, 0xB9	; 185
     1b8:	e6 55       	subi	r30, 0x56	; 86
     1ba:	16 cf       	rjmp	.-468    	; 0xffffffe8 <__eeprom_end+0xff7effe8>
     1bc:	fe e6       	ldi	r31, 0x6E	; 110
     1be:	db 18       	sub	r13, r11
     1c0:	d1 84       	ldd	r13, Z+9	; 0x09
     1c2:	4b 38       	cpi	r20, 0x8B	; 139
     1c4:	1b f7       	brvc	.-58     	; 0x18c <__trampolines_end+0xa8>
     1c6:	7c 1d       	adc	r23, r12
     1c8:	90 1d       	adc	r25, r0
     1ca:	a4 bb       	out	0x14, r26	; 20
     1cc:	e4 24       	eor	r14, r4
     1ce:	20 32       	cpi	r18, 0x20	; 32
     1d0:	84 72       	andi	r24, 0x24	; 36
     1d2:	5e 22       	and	r5, r30
     1d4:	81 00       	.word	0x0081	; ????
     1d6:	c9 f1       	breq	.+114    	; 0x24a <__vector_35+0x2a>
     1d8:	24 ec       	ldi	r18, 0xC4	; 196
     1da:	a1 e5       	ldi	r26, 0x51	; 81
     1dc:	3d 27       	eor	r19, r29

000001de <__ctors_end>:
     1de:	11 24       	eor	r1, r1
     1e0:	1f be       	out	0x3f, r1	; 63
     1e2:	cf ef       	ldi	r28, 0xFF	; 255
     1e4:	d1 e2       	ldi	r29, 0x21	; 33
     1e6:	de bf       	out	0x3e, r29	; 62
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	00 e0       	ldi	r16, 0x00	; 0
     1ec:	0c bf       	out	0x3c, r16	; 60

000001ee <__do_copy_data>:
     1ee:	12 e0       	ldi	r17, 0x02	; 2
     1f0:	a0 e0       	ldi	r26, 0x00	; 0
     1f2:	b2 e0       	ldi	r27, 0x02	; 2
     1f4:	e0 e7       	ldi	r30, 0x70	; 112
     1f6:	fc e1       	ldi	r31, 0x1C	; 28
     1f8:	00 e0       	ldi	r16, 0x00	; 0
     1fa:	0b bf       	out	0x3b, r16	; 59
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x14>
     1fe:	07 90       	elpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	ae 32       	cpi	r26, 0x2E	; 46
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0x10>

00000208 <__do_clear_bss>:
     208:	24 e0       	ldi	r18, 0x04	; 4
     20a:	ae e2       	ldi	r26, 0x2E	; 46
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a7 3e       	cpi	r26, 0xE7	; 231
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	01 d2       	rcall	.+1026   	; 0x61c <main>
     21a:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <_exit>

0000021e <__bad_interrupt>:
     21e:	f0 ce       	rjmp	.-544    	; 0x0 <__vectors>

00000220 <__vector_35>:
void set_output(volatile uint8_t *ddr, uint8_t pin) {
	*ddr |= (1 << pin);
}

void set_input(volatile uint8_t *ddr, uint8_t pin) {
	*ddr &= ~(1 << pin);
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
     22a:	2f 93       	push	r18
     22c:	3f 93       	push	r19
     22e:	4f 93       	push	r20
     230:	5f 93       	push	r21
     232:	6f 93       	push	r22
     234:	7f 93       	push	r23
     236:	8f 93       	push	r24
     238:	9f 93       	push	r25
     23a:	af 93       	push	r26
     23c:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <timer3_overflow_count>
     240:	30 91 31 02 	lds	r19, 0x0231	; 0x800231 <timer3_overflow_count+0x1>
     244:	40 91 32 02 	lds	r20, 0x0232	; 0x800232 <timer3_overflow_count+0x2>
     248:	50 91 33 02 	lds	r21, 0x0233	; 0x800233 <timer3_overflow_count+0x3>
     24c:	60 91 34 02 	lds	r22, 0x0234	; 0x800234 <timer3_overflow_count+0x4>
     250:	70 91 35 02 	lds	r23, 0x0235	; 0x800235 <timer3_overflow_count+0x5>
     254:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer3_overflow_count+0x6>
     258:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <timer3_overflow_count+0x7>
     25c:	a1 e0       	ldi	r26, 0x01	; 1
     25e:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <__adddi3_s8>
     262:	20 93 30 02 	sts	0x0230, r18	; 0x800230 <timer3_overflow_count>
     266:	30 93 31 02 	sts	0x0231, r19	; 0x800231 <timer3_overflow_count+0x1>
     26a:	40 93 32 02 	sts	0x0232, r20	; 0x800232 <timer3_overflow_count+0x2>
     26e:	50 93 33 02 	sts	0x0233, r21	; 0x800233 <timer3_overflow_count+0x3>
     272:	60 93 34 02 	sts	0x0234, r22	; 0x800234 <timer3_overflow_count+0x4>
     276:	70 93 35 02 	sts	0x0235, r23	; 0x800235 <timer3_overflow_count+0x5>
     27a:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <timer3_overflow_count+0x6>
     27e:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <timer3_overflow_count+0x7>
     282:	af 91       	pop	r26
     284:	9f 91       	pop	r25
     286:	8f 91       	pop	r24
     288:	7f 91       	pop	r23
     28a:	6f 91       	pop	r22
     28c:	5f 91       	pop	r21
     28e:	4f 91       	pop	r20
     290:	3f 91       	pop	r19
     292:	2f 91       	pop	r18
     294:	0f 90       	pop	r0
     296:	0f be       	out	0x3f, r0	; 63
     298:	0f 90       	pop	r0
     29a:	1f 90       	pop	r1
     29c:	18 95       	reti

0000029e <set_output>:
     29e:	fc 01       	movw	r30, r24
     2a0:	40 81       	ld	r20, Z
     2a2:	21 e0       	ldi	r18, 0x01	; 1
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <set_output+0xe>
     2a8:	22 0f       	add	r18, r18
     2aa:	33 1f       	adc	r19, r19
     2ac:	6a 95       	dec	r22
     2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <set_output+0xa>
     2b0:	24 2b       	or	r18, r20
     2b2:	20 83       	st	Z, r18
     2b4:	08 95       	ret

000002b6 <pin_high>:
}

void pin_high(volatile uint8_t *port, uint8_t pin) {
	*port |= (1 << pin);
     2b6:	fc 01       	movw	r30, r24
     2b8:	40 81       	ld	r20, Z
     2ba:	21 e0       	ldi	r18, 0x01	; 1
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <pin_high+0xe>
     2c0:	22 0f       	add	r18, r18
     2c2:	33 1f       	adc	r19, r19
     2c4:	6a 95       	dec	r22
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <pin_high+0xa>
     2c8:	24 2b       	or	r18, r20
     2ca:	20 83       	st	Z, r18
     2cc:	08 95       	ret

000002ce <pin_low>:
}

void pin_low(volatile uint8_t *port, uint8_t pin) {
     2ce:	fc 01       	movw	r30, r24
	*port &= ~(1 << pin);
     2d0:	90 81       	ld	r25, Z
     2d2:	21 e0       	ldi	r18, 0x01	; 1
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <pin_low+0xe>
     2d8:	22 0f       	add	r18, r18
     2da:	33 1f       	adc	r19, r19
     2dc:	6a 95       	dec	r22
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <pin_low+0xa>
     2e0:	20 95       	com	r18
     2e2:	29 23       	and	r18, r25
     2e4:	20 83       	st	Z, r18
     2e6:	08 95       	ret

000002e8 <setup_micros>:
}

void setup_micros(void){
	cli();
     2e8:	f8 94       	cli

	TCCR3B |= (1 << CS30);
     2ea:	e1 e9       	ldi	r30, 0x91	; 145
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	81 60       	ori	r24, 0x01	; 1
     2f2:	80 83       	st	Z, r24
	TIMSK3 |= (1 << TOIE3);
     2f4:	e1 e7       	ldi	r30, 0x71	; 113
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	81 60       	ori	r24, 0x01	; 1
     2fc:	80 83       	st	Z, r24

	sei();
     2fe:	78 94       	sei
     300:	08 95       	ret

00000302 <micros>:
}

uint32_t micros() {
	uint32_t overflows, timer_value;

	cli(); // Disable interrupts to read consistent values
     302:	f8 94       	cli
	overflows = timer3_overflow_count;
     304:	50 91 30 02 	lds	r21, 0x0230	; 0x800230 <timer3_overflow_count>
     308:	40 91 31 02 	lds	r20, 0x0231	; 0x800231 <timer3_overflow_count+0x1>
     30c:	30 91 32 02 	lds	r19, 0x0232	; 0x800232 <timer3_overflow_count+0x2>
     310:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <timer3_overflow_count+0x3>
     314:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <timer3_overflow_count+0x4>
     318:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <timer3_overflow_count+0x5>
     31c:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <timer3_overflow_count+0x6>
     320:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <timer3_overflow_count+0x7>
     324:	85 2f       	mov	r24, r21
     326:	94 2f       	mov	r25, r20
     328:	a3 2f       	mov	r26, r19
     32a:	b2 2f       	mov	r27, r18
	timer_value = TCNT3;
     32c:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
     330:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     334:	ab 01       	movw	r20, r22
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	70 e0       	ldi	r23, 0x00	; 0
	sei(); // Enable interrupts
     33a:	78 94       	sei

	// Calculate total microseconds
	return ((overflows * 65536UL) + timer_value) / (F_CPU / 1000000UL);
     33c:	dc 01       	movw	r26, r24
     33e:	99 27       	eor	r25, r25
     340:	88 27       	eor	r24, r24
     342:	84 0f       	add	r24, r20
     344:	95 1f       	adc	r25, r21
     346:	a6 1f       	adc	r26, r22
     348:	b7 1f       	adc	r27, r23
     34a:	bc 01       	movw	r22, r24
     34c:	cd 01       	movw	r24, r26
     34e:	68 94       	set
     350:	13 f8       	bld	r1, 3
     352:	96 95       	lsr	r25
     354:	87 95       	ror	r24
     356:	77 95       	ror	r23
     358:	67 95       	ror	r22
     35a:	16 94       	lsr	r1
     35c:	d1 f7       	brne	.-12     	; 0x352 <micros+0x50>
     35e:	08 95       	ret

00000360 <__vector_1>:
Motor basemotor2;
Motor micromotor3;
Motor micromotor4;

//-------- ENCODERS ---------
ISR(INT0_vect){ // A2 MOTOR 2 (PH3 PH4) - DIRECTION & PWM PINS
     360:	1f 92       	push	r1
     362:	0f 92       	push	r0
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	0f 92       	push	r0
     368:	11 24       	eor	r1, r1
     36a:	8f 93       	push	r24
     36c:	9f 93       	push	r25
     36e:	af 93       	push	r26
     370:	bf 93       	push	r27
	if (PINB & (1 << PB4)) {
     372:	1c 9b       	sbis	0x03, 4	; 3
     374:	14 c0       	rjmp	.+40     	; 0x39e <__vector_1+0x3e>
		motor2_currentPos++;  // If B is high while A changes, increment ticks
     376:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <motor2_currentPos>
     37a:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <motor2_currentPos+0x1>
     37e:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <motor2_currentPos+0x2>
     382:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <motor2_currentPos+0x3>
     386:	01 96       	adiw	r24, 0x01	; 1
     388:	a1 1d       	adc	r26, r1
     38a:	b1 1d       	adc	r27, r1
     38c:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <motor2_currentPos>
     390:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <motor2_currentPos+0x1>
     394:	a0 93 5c 02 	sts	0x025C, r26	; 0x80025c <motor2_currentPos+0x2>
     398:	b0 93 5d 02 	sts	0x025D, r27	; 0x80025d <motor2_currentPos+0x3>
     39c:	13 c0       	rjmp	.+38     	; 0x3c4 <__vector_1+0x64>
	} else {
		motor2_currentPos--;  // If B is low while A changes, decrement ticks
     39e:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <motor2_currentPos>
     3a2:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <motor2_currentPos+0x1>
     3a6:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <motor2_currentPos+0x2>
     3aa:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <motor2_currentPos+0x3>
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	a1 09       	sbc	r26, r1
     3b2:	b1 09       	sbc	r27, r1
     3b4:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <motor2_currentPos>
     3b8:	90 93 5b 02 	sts	0x025B, r25	; 0x80025b <motor2_currentPos+0x1>
     3bc:	a0 93 5c 02 	sts	0x025C, r26	; 0x80025c <motor2_currentPos+0x2>
     3c0:	b0 93 5d 02 	sts	0x025D, r27	; 0x80025d <motor2_currentPos+0x3>
	}
}
     3c4:	bf 91       	pop	r27
     3c6:	af 91       	pop	r26
     3c8:	9f 91       	pop	r25
     3ca:	8f 91       	pop	r24
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <__vector_2>:

ISR(INT1_vect){ // A1 MOTOR 1 (PH5 PH6) - DIRECTION & PWM PINS
     3d6:	1f 92       	push	r1
     3d8:	0f 92       	push	r0
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	0f 92       	push	r0
     3de:	11 24       	eor	r1, r1
     3e0:	8f 93       	push	r24
     3e2:	9f 93       	push	r25
     3e4:	af 93       	push	r26
     3e6:	bf 93       	push	r27
	if (PINB & (1 << PB5)) {
     3e8:	1d 9b       	sbis	0x03, 5	; 3
     3ea:	14 c0       	rjmp	.+40     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		motor1_currentPos++;  
     3ec:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <motor1_currentPos>
     3f0:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <motor1_currentPos+0x1>
     3f4:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <motor1_currentPos+0x2>
     3f8:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <motor1_currentPos+0x3>
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	a1 1d       	adc	r26, r1
     400:	b1 1d       	adc	r27, r1
     402:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <motor1_currentPos>
     406:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <motor1_currentPos+0x1>
     40a:	a0 93 60 02 	sts	0x0260, r26	; 0x800260 <motor1_currentPos+0x2>
     40e:	b0 93 61 02 	sts	0x0261, r27	; 0x800261 <motor1_currentPos+0x3>
     412:	13 c0       	rjmp	.+38     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	} else {
		motor1_currentPos--;  
     414:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <motor1_currentPos>
     418:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <motor1_currentPos+0x1>
     41c:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <motor1_currentPos+0x2>
     420:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <motor1_currentPos+0x3>
     424:	01 97       	sbiw	r24, 0x01	; 1
     426:	a1 09       	sbc	r26, r1
     428:	b1 09       	sbc	r27, r1
     42a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <motor1_currentPos>
     42e:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <motor1_currentPos+0x1>
     432:	a0 93 60 02 	sts	0x0260, r26	; 0x800260 <motor1_currentPos+0x2>
     436:	b0 93 61 02 	sts	0x0261, r27	; 0x800261 <motor1_currentPos+0x3>
	}
}
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <__vector_3>:

ISR(INT2_vect){ // A4 MOTOR 4 (PL0 PL1) - DIRECTION & PB6 - PWM
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	8f 93       	push	r24
     458:	9f 93       	push	r25
     45a:	af 93       	push	r26
     45c:	bf 93       	push	r27
	if (PIND & (1 << PD6)) {
     45e:	4e 9b       	sbis	0x09, 6	; 9
     460:	14 c0       	rjmp	.+40     	; 0x48a <__vector_3+0x3e>
		motor4_currentPos++;  
     462:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <motor4_currentPos>
     466:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <motor4_currentPos+0x1>
     46a:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <motor4_currentPos+0x2>
     46e:	b0 91 55 02 	lds	r27, 0x0255	; 0x800255 <motor4_currentPos+0x3>
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	a1 1d       	adc	r26, r1
     476:	b1 1d       	adc	r27, r1
     478:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <motor4_currentPos>
     47c:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <motor4_currentPos+0x1>
     480:	a0 93 54 02 	sts	0x0254, r26	; 0x800254 <motor4_currentPos+0x2>
     484:	b0 93 55 02 	sts	0x0255, r27	; 0x800255 <motor4_currentPos+0x3>
     488:	13 c0       	rjmp	.+38     	; 0x4b0 <__vector_3+0x64>
	} else {
		motor4_currentPos--;  
     48a:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <motor4_currentPos>
     48e:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <motor4_currentPos+0x1>
     492:	a0 91 54 02 	lds	r26, 0x0254	; 0x800254 <motor4_currentPos+0x2>
     496:	b0 91 55 02 	lds	r27, 0x0255	; 0x800255 <motor4_currentPos+0x3>
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	a1 09       	sbc	r26, r1
     49e:	b1 09       	sbc	r27, r1
     4a0:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <motor4_currentPos>
     4a4:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <motor4_currentPos+0x1>
     4a8:	a0 93 54 02 	sts	0x0254, r26	; 0x800254 <motor4_currentPos+0x2>
     4ac:	b0 93 55 02 	sts	0x0255, r27	; 0x800255 <motor4_currentPos+0x3>
	}
}
     4b0:	bf 91       	pop	r27
     4b2:	af 91       	pop	r26
     4b4:	9f 91       	pop	r25
     4b6:	8f 91       	pop	r24
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <__vector_4>:

ISR(INT3_vect){ // A3 MOTOR 3 (PL2 PL3) - DIRECTION & PB7 - PWM
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
     4cc:	8f 93       	push	r24
     4ce:	9f 93       	push	r25
     4d0:	af 93       	push	r26
     4d2:	bf 93       	push	r27
	if (PIND & (1 << PD7)) {
     4d4:	4f 9b       	sbis	0x09, 7	; 9
     4d6:	14 c0       	rjmp	.+40     	; 0x500 <__vector_4+0x3e>
		motor3_currentPos++;  
     4d8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <motor3_currentPos>
     4dc:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <motor3_currentPos+0x1>
     4e0:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <motor3_currentPos+0x2>
     4e4:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <motor3_currentPos+0x3>
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	a1 1d       	adc	r26, r1
     4ec:	b1 1d       	adc	r27, r1
     4ee:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <motor3_currentPos>
     4f2:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <motor3_currentPos+0x1>
     4f6:	a0 93 58 02 	sts	0x0258, r26	; 0x800258 <motor3_currentPos+0x2>
     4fa:	b0 93 59 02 	sts	0x0259, r27	; 0x800259 <motor3_currentPos+0x3>
     4fe:	13 c0       	rjmp	.+38     	; 0x526 <__vector_4+0x64>
	} else {
		motor3_currentPos--;  
     500:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <motor3_currentPos>
     504:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <motor3_currentPos+0x1>
     508:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <motor3_currentPos+0x2>
     50c:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <motor3_currentPos+0x3>
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	a1 09       	sbc	r26, r1
     514:	b1 09       	sbc	r27, r1
     516:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <motor3_currentPos>
     51a:	90 93 57 02 	sts	0x0257, r25	; 0x800257 <motor3_currentPos+0x1>
     51e:	a0 93 58 02 	sts	0x0258, r26	; 0x800258 <motor3_currentPos+0x2>
     522:	b0 93 59 02 	sts	0x0259, r27	; 0x800259 <motor3_currentPos+0x3>
	}
}
     526:	bf 91       	pop	r27
     528:	af 91       	pop	r26
     52a:	9f 91       	pop	r25
     52c:	8f 91       	pop	r24
     52e:	0f 90       	pop	r0
     530:	0f be       	out	0x3f, r0	; 63
     532:	0f 90       	pop	r0
     534:	1f 90       	pop	r1
     536:	18 95       	reti

00000538 <__vector_5>:

//-------- SENSORS ---------
ISR(INT4_vect){ // SENSOR 4
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	8f 93       	push	r24
	limit1 = 1;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <limit1>
}
     54a:	8f 91       	pop	r24
     54c:	0f 90       	pop	r0
     54e:	0f be       	out	0x3f, r0	; 63
     550:	0f 90       	pop	r0
     552:	1f 90       	pop	r1
     554:	18 95       	reti

00000556 <__vector_6>:

ISR(INT5_vect){ // SENSOR 3
     556:	1f 92       	push	r1
     558:	0f 92       	push	r0
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	0f 92       	push	r0
     55e:	11 24       	eor	r1, r1
     560:	8f 93       	push	r24
	limit2 = 1;
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <limit2>
}
     568:	8f 91       	pop	r24
     56a:	0f 90       	pop	r0
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	0f 90       	pop	r0
     570:	1f 90       	pop	r1
     572:	18 95       	reti

00000574 <__vector_7>:
 
ISR(INT6_vect){ // SENSOR 2
     574:	1f 92       	push	r1
     576:	0f 92       	push	r0
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	0f 92       	push	r0
     57c:	11 24       	eor	r1, r1
     57e:	8f 93       	push	r24
	limit2 = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <limit2>
}
     586:	8f 91       	pop	r24
     588:	0f 90       	pop	r0
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	0f 90       	pop	r0
     58e:	1f 90       	pop	r1
     590:	18 95       	reti

00000592 <__vector_8>:

ISR(INT7_vect){ // SENSOR 1
     592:	1f 92       	push	r1
     594:	0f 92       	push	r0
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	0f 92       	push	r0
     59a:	11 24       	eor	r1, r1
     59c:	8f 93       	push	r24
	limit3 = 1;
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <limit3>
}
     5a4:	8f 91       	pop	r24
     5a6:	0f 90       	pop	r0
     5a8:	0f be       	out	0x3f, r0	; 63
     5aa:	0f 90       	pop	r0
     5ac:	1f 90       	pop	r1
     5ae:	18 95       	reti

000005b0 <__vector_25>:

// Interrupt Service Routine (ISR) for USART Receive Complete
ISR(USART0_RX_vect) {
     5b0:	1f 92       	push	r1
     5b2:	0f 92       	push	r0
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	0f 92       	push	r0
     5b8:	11 24       	eor	r1, r1
     5ba:	0b b6       	in	r0, 0x3b	; 59
     5bc:	0f 92       	push	r0
     5be:	8f 93       	push	r24
     5c0:	9f 93       	push	r25
     5c2:	ef 93       	push	r30
     5c4:	ff 93       	push	r31
	char c = UDR0;  // Read received character
     5c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

	// If Enter key is received, mark the string as complete
	if (c == '\n' || c == '\r') {
     5ca:	8a 30       	cpi	r24, 0x0A	; 10
     5cc:	11 f0       	breq	.+4      	; 0x5d2 <__vector_25+0x22>
     5ce:	8d 30       	cpi	r24, 0x0D	; 13
     5d0:	61 f4       	brne	.+24     	; 0x5ea <__vector_25+0x3a>
		read[rx_index] = '\0';  // Null-terminate the string
     5d2:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <rx_index>
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	e2 52       	subi	r30, 0x22	; 34
     5da:	fc 4f       	sbci	r31, 0xFC	; 252
     5dc:	10 82       	st	Z, r1
		data_ready = 1;  // Set flag indicating a complete string is available
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <data_ready>
		rx_index = 0;    // Reset buffer index for the next message
     5e4:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <rx_index>
     5e8:	0e c0       	rjmp	.+28     	; 0x606 <__vector_25+0x56>
	}
	else if (rx_index < 100 - 1) {
     5ea:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <rx_index>
     5ee:	93 36       	cpi	r25, 0x63	; 99
     5f0:	50 f4       	brcc	.+20     	; 0x606 <__vector_25+0x56>
		read[rx_index++] = c;  // Store character in buffer
     5f2:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <rx_index>
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	9e 0f       	add	r25, r30
     5fa:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <rx_index>
     5fe:	f0 e0       	ldi	r31, 0x00	; 0
     600:	e2 52       	subi	r30, 0x22	; 34
     602:	fc 4f       	sbci	r31, 0xFC	; 252
     604:	80 83       	st	Z, r24
	}
}
     606:	ff 91       	pop	r31
     608:	ef 91       	pop	r30
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	0f 90       	pop	r0
     610:	0b be       	out	0x3b, r0	; 59
     612:	0f 90       	pop	r0
     614:	0f be       	out	0x3f, r0	; 63
     616:	0f 90       	pop	r0
     618:	1f 90       	pop	r1
     61a:	18 95       	reti

0000061c <main>:

int main(void)
{
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	c1 55       	subi	r28, 0x51	; 81
     626:	d1 09       	sbc	r29, r1
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
	//SETUP TIMER 3 FOR MICROSECOND COUNTING FROM BOOT & TIMER 3 INTERRUPT
	setup_micros();
     632:	5a de       	rcall	.-844    	; 0x2e8 <setup_micros>

	//SETUP LIMIT SENSORS
	setup_ext_sensors();
     634:	3e d5       	rcall	.+2684   	; 0x10b2 <setup_ext_sensors>

	//INITIALIZE SERIAL COMMUNICATION
	USART0_init();
     636:	08 d6       	rcall	.+3088   	; 0x1248 <USART0_init>
     638:	5d d5       	rcall	.+2746   	; 0x10f4 <ADC_init>

	//INITIALIZE CURRENT SENSORS
	ADC_init();
     63a:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <motor1_currentPos>

	//INITIALIZE MOTORS
	basemotor1 = init_motor(2, &PORTH, PH5, PH6, &DDRH, DDH5, DDH6, motor1_currentPos, &DDRH, DDH5, &OCR2B, &OCR4C, 200);
     63e:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <motor1_currentPos+0x1>
     642:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <motor1_currentPos+0x2>
     646:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <motor1_currentPos+0x3>
     64a:	0f 2e       	mov	r0, r31
     64c:	f8 ec       	ldi	r31, 0xC8	; 200
     64e:	9f 2e       	mov	r9, r31
     650:	f0 2d       	mov	r31, r0
     652:	9f 92       	push	r9
     654:	1f 92       	push	r1
     656:	2c ea       	ldi	r18, 0xAC	; 172
     658:	2f 93       	push	r18
     65a:	1f 92       	push	r1
     65c:	24 eb       	ldi	r18, 0xB4	; 180
     65e:	2f 93       	push	r18
     660:	25 e0       	ldi	r18, 0x05	; 5
     662:	2f 93       	push	r18
     664:	bb 24       	eor	r11, r11
     666:	b3 94       	inc	r11
     668:	bf 92       	push	r11
     66a:	bf 92       	push	r11
     66c:	bf 93       	push	r27
     66e:	af 93       	push	r26
     670:	9f 93       	push	r25
     672:	8f 93       	push	r24
     674:	0f 2e       	mov	r0, r31
     676:	f6 e0       	ldi	r31, 0x06	; 6
     678:	af 2e       	mov	r10, r31
     67a:	f0 2d       	mov	r31, r0
     67c:	0f 2e       	mov	r0, r31
     67e:	f5 e0       	ldi	r31, 0x05	; 5
     680:	cf 2e       	mov	r12, r31
     682:	f0 2d       	mov	r31, r0
     684:	ee 24       	eor	r14, r14
     686:	e3 94       	inc	r14
     688:	fe 2c       	mov	r15, r14
     68a:	06 e0       	ldi	r16, 0x06	; 6
     68c:	42 e0       	ldi	r20, 0x02	; 2
     68e:	51 e0       	ldi	r21, 0x01	; 1
     690:	62 e0       	ldi	r22, 0x02	; 2
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	e2 d1       	rcall	.+964    	; 0xa5c <init_motor>
     698:	81 e5       	ldi	r24, 0x51	; 81
     69a:	fe 01       	movw	r30, r28
     69c:	31 96       	adiw	r30, 0x01	; 1
     69e:	a8 ed       	ldi	r26, 0xD8	; 216
     6a0:	b2 e0       	ldi	r27, 0x02	; 2
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	8a 95       	dec	r24
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main+0x86>
     6aa:	c1 2c       	mov	r12, r1
     6ac:	d1 2c       	mov	r13, r1
	init_pid(&basemotor1, 1.0, 0.006, 0.0);
     6ae:	76 01       	movw	r14, r12
     6b0:	06 ea       	ldi	r16, 0xA6	; 166
     6b2:	1b e9       	ldi	r17, 0x9B	; 155
     6b4:	24 ec       	ldi	r18, 0xC4	; 196
     6b6:	3b e3       	ldi	r19, 0x3B	; 59
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	50 e0       	ldi	r21, 0x00	; 0
     6bc:	60 e8       	ldi	r22, 0x80	; 128
     6be:	7f e3       	ldi	r23, 0x3F	; 63
     6c0:	88 ed       	ldi	r24, 0xD8	; 216
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	30 d2       	rcall	.+1120   	; 0xb26 <init_pid>
     6c6:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <motor2_currentPos>
	basemotor2 = init_motor(2, &PORTH, PH3, PH4, &DDRH, DDH3, DDH4, motor2_currentPos, &DDRH, DDH3, &OCR4B, &OCR4A, 200);
     6ca:	90 91 5b 02 	lds	r25, 0x025B	; 0x80025b <motor2_currentPos+0x1>
     6ce:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <motor2_currentPos+0x2>
     6d2:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <motor2_currentPos+0x3>
     6d6:	9f 92       	push	r9
     6d8:	1f 92       	push	r1
     6da:	28 ea       	ldi	r18, 0xA8	; 168
     6dc:	2f 93       	push	r18
     6de:	1f 92       	push	r1
     6e0:	2a ea       	ldi	r18, 0xAA	; 170
     6e2:	2f 93       	push	r18
     6e4:	23 e0       	ldi	r18, 0x03	; 3
     6e6:	2f 93       	push	r18
     6e8:	bf 92       	push	r11
     6ea:	bf 92       	push	r11
     6ec:	bf 93       	push	r27
     6ee:	af 93       	push	r26
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	68 94       	set
     6f6:	aa 24       	eor	r10, r10
     6f8:	a2 f8       	bld	r10, 2
     6fa:	0f 2e       	mov	r0, r31
     6fc:	f3 e0       	ldi	r31, 0x03	; 3
     6fe:	cf 2e       	mov	r12, r31
     700:	f0 2d       	mov	r31, r0
     702:	ee 24       	eor	r14, r14
     704:	e3 94       	inc	r14
     706:	fe 2c       	mov	r15, r14
     708:	04 e0       	ldi	r16, 0x04	; 4
     70a:	42 e0       	ldi	r20, 0x02	; 2
     70c:	51 e0       	ldi	r21, 0x01	; 1
     70e:	62 e0       	ldi	r22, 0x02	; 2
     710:	ce 01       	movw	r24, r28
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	a3 d1       	rcall	.+838    	; 0xa5c <init_motor>
     716:	81 e5       	ldi	r24, 0x51	; 81
     718:	fe 01       	movw	r30, r28
     71a:	31 96       	adiw	r30, 0x01	; 1
     71c:	a6 e9       	ldi	r26, 0x96	; 150
     71e:	b4 e0       	ldi	r27, 0x04	; 4
     720:	01 90       	ld	r0, Z+
     722:	0d 92       	st	X+, r0
     724:	8a 95       	dec	r24
     726:	e1 f7       	brne	.-8      	; 0x720 <main+0x104>
     728:	c1 2c       	mov	r12, r1
     72a:	d1 2c       	mov	r13, r1
	init_pid(&basemotor2, 1.0, 0.006, 0.0); //0000008
     72c:	76 01       	movw	r14, r12
     72e:	06 ea       	ldi	r16, 0xA6	; 166
     730:	1b e9       	ldi	r17, 0x9B	; 155
     732:	24 ec       	ldi	r18, 0xC4	; 196
     734:	3b e3       	ldi	r19, 0x3B	; 59
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	60 e8       	ldi	r22, 0x80	; 128
     73c:	7f e3       	ldi	r23, 0x3F	; 63
     73e:	86 e9       	ldi	r24, 0x96	; 150
     740:	94 e0       	ldi	r25, 0x04	; 4
     742:	f1 d1       	rcall	.+994    	; 0xb26 <init_pid>
     744:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <motor3_currentPos>

	micromotor3 = init_motor(1, &PORTL, PL2, PL3, &DDRL, DDL2, DDL3, motor3_currentPos, &DDRB, DDB6, &OCR1B, NULL, 255);
     748:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <motor3_currentPos+0x1>
     74c:	a0 91 58 02 	lds	r26, 0x0258	; 0x800258 <motor3_currentPos+0x2>
     750:	b0 91 59 02 	lds	r27, 0x0259	; 0x800259 <motor3_currentPos+0x3>
     754:	2f ef       	ldi	r18, 0xFF	; 255
     756:	2f 93       	push	r18
     758:	1f 92       	push	r1
     75a:	1f 92       	push	r1
     75c:	1f 92       	push	r1
     75e:	2a e8       	ldi	r18, 0x8A	; 138
     760:	2f 93       	push	r18
     762:	26 e0       	ldi	r18, 0x06	; 6
     764:	2f 93       	push	r18
     766:	1f 92       	push	r1
     768:	24 e2       	ldi	r18, 0x24	; 36
     76a:	2f 93       	push	r18
     76c:	bf 93       	push	r27
     76e:	af 93       	push	r26
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	0f 2e       	mov	r0, r31
     776:	f3 e0       	ldi	r31, 0x03	; 3
     778:	af 2e       	mov	r10, r31
     77a:	f0 2d       	mov	r31, r0
     77c:	68 94       	set
     77e:	cc 24       	eor	r12, r12
     780:	c1 f8       	bld	r12, 1
     782:	0f 2e       	mov	r0, r31
     784:	fa e0       	ldi	r31, 0x0A	; 10
     786:	ef 2e       	mov	r14, r31
     788:	ff 24       	eor	r15, r15
     78a:	f3 94       	inc	r15
     78c:	f0 2d       	mov	r31, r0
     78e:	03 e0       	ldi	r16, 0x03	; 3
     790:	22 e0       	ldi	r18, 0x02	; 2
     792:	4b e0       	ldi	r20, 0x0B	; 11
     794:	51 e0       	ldi	r21, 0x01	; 1
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	ce 01       	movw	r24, r28
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	5f d1       	rcall	.+702    	; 0xa5c <init_motor>
     79e:	81 e5       	ldi	r24, 0x51	; 81
     7a0:	fe 01       	movw	r30, r28
     7a2:	31 96       	adiw	r30, 0x01	; 1
     7a4:	a3 e4       	ldi	r26, 0x43	; 67
     7a6:	b4 e0       	ldi	r27, 0x04	; 4
     7a8:	01 90       	ld	r0, Z+
     7aa:	0d 92       	st	X+, r0
     7ac:	8a 95       	dec	r24
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <main+0x18c>
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	f8 94       	cli
	init_pid(&micromotor3, 1.2, 0.05, 0.0000008);
     7b4:	de bf       	out	0x3e, r29	; 62
     7b6:	0f be       	out	0x3f, r0	; 63
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	0f 2e       	mov	r0, r31
     7bc:	f5 e9       	ldi	r31, 0x95	; 149
     7be:	cf 2e       	mov	r12, r31
     7c0:	ff eb       	ldi	r31, 0xBF	; 191
     7c2:	df 2e       	mov	r13, r31
     7c4:	f6 e5       	ldi	r31, 0x56	; 86
     7c6:	ef 2e       	mov	r14, r31
     7c8:	f5 e3       	ldi	r31, 0x35	; 53
     7ca:	ff 2e       	mov	r15, r31
     7cc:	f0 2d       	mov	r31, r0
     7ce:	0d ec       	ldi	r16, 0xCD	; 205
     7d0:	1c ec       	ldi	r17, 0xCC	; 204
     7d2:	2c e4       	ldi	r18, 0x4C	; 76
     7d4:	3d e3       	ldi	r19, 0x3D	; 61
     7d6:	4a e9       	ldi	r20, 0x9A	; 154
     7d8:	59 e9       	ldi	r21, 0x99	; 153
     7da:	69 e9       	ldi	r22, 0x99	; 153
     7dc:	7f e3       	ldi	r23, 0x3F	; 63
     7de:	83 e4       	ldi	r24, 0x43	; 67
     7e0:	94 e0       	ldi	r25, 0x04	; 4
     7e2:	a1 d1       	rcall	.+834    	; 0xb26 <init_pid>
     7e4:	f2 d1       	rcall	.+996    	; 0xbca <init_pwm>
	//micromotor4 = init_motor(1, &PORTL, PL0, PL1, &DDRL, DDL0, DDL1, motor4_currentPos, &DDRB, DDB7, &OCR0A, NULL, 255);
	//init_pid(&micromotor4, 1.2, 0.05, 0.0000008);

	//INITIALIZE MOTORS PWM
	init_pwm();
     7e6:	80 b3       	in	r24, 0x10	; 16
     7e8:	80 68       	ori	r24, 0x80	; 128

	//SETUP RELAY PIN
	DDRF  |= (1 << DDF7);
     7ea:	80 bb       	out	0x10, r24	; 16
     7ec:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <connected>
		// MAY BE BETTER TO USE JUST A FOR() LOOP
		// MORE EFFICIENT AND CAN USE MORE SAMPLES PER CYCLE

		//*************************************************
		
		if(!connected) if(strcmp(read, "conn") == 0){connected = 1; USART0_send_string("ackc\n");}
     7f0:	81 11       	cpse	r24, r1
     7f2:	0d c0       	rjmp	.+26     	; 0x80e <main+0x1f2>
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	72 e0       	ldi	r23, 0x02	; 2
     7f8:	8e ed       	ldi	r24, 0xDE	; 222
     7fa:	93 e0       	ldi	r25, 0x03	; 3
     7fc:	aa d7       	rcall	.+3924   	; 0x1752 <strcmp>
     7fe:	89 2b       	or	r24, r25
     800:	31 f4       	brne	.+12     	; 0x80e <main+0x1f2>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <connected>
     808:	85 e0       	ldi	r24, 0x05	; 5
     80a:	92 e0       	ldi	r25, 0x02	; 2
     80c:	30 d5       	rcall	.+2656   	; 0x126e <USART0_send_string>
     80e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <connected>
		if(connected){
     812:	88 23       	and	r24, r24
     814:	09 f4       	brne	.+2      	; 0x818 <main+0x1fc>
     816:	1b c1       	rjmp	.+566    	; 0xa4e <main+0x432>
     818:	6b e0       	ldi	r22, 0x0B	; 11
			if(strcmp(read, "disc") == 0){connected = 0; USART0_send_string("ackd\n");}
     81a:	72 e0       	ldi	r23, 0x02	; 2
     81c:	8e ed       	ldi	r24, 0xDE	; 222
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	98 d7       	rcall	.+3888   	; 0x1752 <strcmp>
     822:	89 2b       	or	r24, r25
     824:	29 f4       	brne	.+10     	; 0x830 <main+0x214>
     826:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <connected>
     82a:	80 e1       	ldi	r24, 0x10	; 16
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	1f d5       	rcall	.+2622   	; 0x126e <USART0_send_string>

			token = strtok(read, "/");
     830:	66 e1       	ldi	r22, 0x16	; 22
     832:	72 e0       	ldi	r23, 0x02	; 2
     834:	8e ed       	ldi	r24, 0xDE	; 222
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	89 d7       	rcall	.+3858   	; 0x174c <strtok>
     83a:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <token+0x1>
     83e:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <token>
			if (token != NULL) strcpy(command, token);
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	21 f0       	breq	.+8      	; 0x84e <main+0x232>
     846:	bc 01       	movw	r22, r24
     848:	89 e2       	ldi	r24, 0x29	; 41
     84a:	93 e0       	ldi	r25, 0x03	; 3
     84c:	8b d7       	rcall	.+3862   	; 0x1764 <strcpy>

			token = strtok(NULL, "/");
     84e:	66 e1       	ldi	r22, 0x16	; 22
     850:	72 e0       	ldi	r23, 0x02	; 2
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	7a d7       	rcall	.+3828   	; 0x174c <strtok>
     858:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <token+0x1>
     85c:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <token>
     860:	00 97       	sbiw	r24, 0x00	; 0
			if (token != NULL) setpoint1 = atoi(token);
     862:	69 f0       	breq	.+26     	; 0x87e <main+0x262>
     864:	56 d7       	rcall	.+3756   	; 0x1712 <atoi>
     866:	09 2e       	mov	r0, r25
     868:	00 0c       	add	r0, r0
     86a:	aa 0b       	sbc	r26, r26
     86c:	bb 0b       	sbc	r27, r27
     86e:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <setpoint1>
     872:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <setpoint1+0x1>
     876:	a0 93 4e 02 	sts	0x024E, r26	; 0x80024e <setpoint1+0x2>
     87a:	b0 93 4f 02 	sts	0x024F, r27	; 0x80024f <setpoint1+0x3>

			token = strtok(NULL, "/");
     87e:	66 e1       	ldi	r22, 0x16	; 22
     880:	72 e0       	ldi	r23, 0x02	; 2
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	62 d7       	rcall	.+3780   	; 0x174c <strtok>
     888:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <token+0x1>
     88c:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <token>
     890:	00 97       	sbiw	r24, 0x00	; 0
			if (token != NULL) setpoint2 = atoi(token);
     892:	69 f0       	breq	.+26     	; 0x8ae <main+0x292>
     894:	3e d7       	rcall	.+3708   	; 0x1712 <atoi>
     896:	09 2e       	mov	r0, r25
     898:	00 0c       	add	r0, r0
     89a:	aa 0b       	sbc	r26, r26
     89c:	bb 0b       	sbc	r27, r27
     89e:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <setpoint2>
     8a2:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <setpoint2+0x1>
     8a6:	a0 93 4a 02 	sts	0x024A, r26	; 0x80024a <setpoint2+0x2>
     8aa:	b0 93 4b 02 	sts	0x024B, r27	; 0x80024b <setpoint2+0x3>

			token = strtok(NULL, "/");
     8ae:	66 e1       	ldi	r22, 0x16	; 22
     8b0:	72 e0       	ldi	r23, 0x02	; 2
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	4a d7       	rcall	.+3732   	; 0x174c <strtok>
     8b8:	90 93 95 04 	sts	0x0495, r25	; 0x800495 <token+0x1>
     8bc:	80 93 94 04 	sts	0x0494, r24	; 0x800494 <token>
     8c0:	00 97       	sbiw	r24, 0x00	; 0
			if (token != NULL) setpoint3 = atoi(token);
     8c2:	69 f0       	breq	.+26     	; 0x8de <main+0x2c2>
     8c4:	26 d7       	rcall	.+3660   	; 0x1712 <atoi>
     8c6:	09 2e       	mov	r0, r25
     8c8:	00 0c       	add	r0, r0
     8ca:	aa 0b       	sbc	r26, r26
     8cc:	bb 0b       	sbc	r27, r27
     8ce:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <setpoint3>
     8d2:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <setpoint3+0x1>
     8d6:	a0 93 46 02 	sts	0x0246, r26	; 0x800246 <setpoint3+0x2>
     8da:	b0 93 47 02 	sts	0x0247, r27	; 0x800247 <setpoint3+0x3>
			
			if(strcmp(command, "HM") == 0){homing = 1; start_s = 0;}
     8de:	68 e1       	ldi	r22, 0x18	; 24
     8e0:	72 e0       	ldi	r23, 0x02	; 2
     8e2:	89 e2       	ldi	r24, 0x29	; 41
     8e4:	93 e0       	ldi	r25, 0x03	; 3
     8e6:	35 d7       	rcall	.+3690   	; 0x1752 <strcmp>
     8e8:	89 2b       	or	r24, r25
     8ea:	31 f4       	brne	.+12     	; 0x8f8 <main+0x2dc>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <homing>
     8f2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <start_s>
     8f6:	09 c0       	rjmp	.+18     	; 0x90a <main+0x2ee>
			else if(strcmp(command, "HS") == 0) homing = 0;
     8f8:	6b e1       	ldi	r22, 0x1B	; 27
     8fa:	72 e0       	ldi	r23, 0x02	; 2
     8fc:	89 e2       	ldi	r24, 0x29	; 41
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	28 d7       	rcall	.+3664   	; 0x1752 <strcmp>
     902:	89 2b       	or	r24, r25
     904:	11 f4       	brne	.+4      	; 0x90a <main+0x2ee>
     906:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <homing>

			if(strcmp(command, "ST") == 0){start_s = 1; homing = 0;}
     90a:	6e e1       	ldi	r22, 0x1E	; 30
     90c:	72 e0       	ldi	r23, 0x02	; 2
     90e:	89 e2       	ldi	r24, 0x29	; 41
     910:	93 e0       	ldi	r25, 0x03	; 3
     912:	1f d7       	rcall	.+3646   	; 0x1752 <strcmp>
     914:	89 2b       	or	r24, r25
     916:	31 f4       	brne	.+12     	; 0x924 <main+0x308>
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <start_s>
     91e:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <homing>
     922:	09 c0       	rjmp	.+18     	; 0x936 <main+0x31a>
			else if(strcmp(command, "SO") == 0) start_s = 0;
     924:	61 e2       	ldi	r22, 0x21	; 33
     926:	72 e0       	ldi	r23, 0x02	; 2
     928:	89 e2       	ldi	r24, 0x29	; 41
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	12 d7       	rcall	.+3620   	; 0x1752 <strcmp>
     92e:	89 2b       	or	r24, r25
     930:	11 f4       	brne	.+4      	; 0x936 <main+0x31a>
     932:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <start_s>

			if(homing){ //MODIFY!!!!!
     936:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <homing>
     93a:	88 23       	and	r24, r24
     93c:	99 f0       	breq	.+38     	; 0x964 <main+0x348>
				home_motor(&basemotor1);
     93e:	88 ed       	ldi	r24, 0xD8	; 216
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	b0 d3       	rcall	.+1888   	; 0x10a4 <home_motor>
     944:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <homed1>
				if(homed1){
     948:	88 23       	and	r24, r24
     94a:	61 f0       	breq	.+24     	; 0x964 <main+0x348>
     94c:	86 e9       	ldi	r24, 0x96	; 150
					home_motor(&basemotor2);
     94e:	94 e0       	ldi	r25, 0x04	; 4
     950:	a9 d3       	rcall	.+1874   	; 0x10a4 <home_motor>
     952:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <homed2>
					if(homed2){
     956:	88 23       	and	r24, r24
     958:	29 f0       	breq	.+10     	; 0x964 <main+0x348>
     95a:	84 e2       	ldi	r24, 0x24	; 36
     95c:	92 e0       	ldi	r25, 0x02	; 2
						USART0_send_string("ackhomed\n");
     95e:	87 d4       	rcall	.+2318   	; 0x126e <USART0_send_string>
     960:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <homing>
     964:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <start_s>
						homing = 0;
     968:	88 23       	and	r24, r24
					}
				}
			}

			if(start_s){
     96a:	09 f4       	brne	.+2      	; 0x96e <main+0x352>
     96c:	67 c0       	rjmp	.+206    	; 0xa3c <main+0x420>
     96e:	64 9b       	sbis	0x0c, 4	; 12
     970:	16 c0       	rjmp	.+44     	; 0x99e <main+0x382>
				// IMPLEMENT DATA READY CHECKING

				if(PINE & (1 << PE4)) {limit1 = 0; move_abs(&basemotor1, setpoint1, motor1_currentPos);}
     972:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <limit1>
     976:	00 91 5e 02 	lds	r16, 0x025E	; 0x80025e <motor1_currentPos>
     97a:	10 91 5f 02 	lds	r17, 0x025F	; 0x80025f <motor1_currentPos+0x1>
     97e:	20 91 60 02 	lds	r18, 0x0260	; 0x800260 <motor1_currentPos+0x2>
     982:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <motor1_currentPos+0x3>
     986:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <setpoint1>
     98a:	50 91 4d 02 	lds	r21, 0x024D	; 0x80024d <setpoint1+0x1>
     98e:	60 91 4e 02 	lds	r22, 0x024E	; 0x80024e <setpoint1+0x2>
     992:	70 91 4f 02 	lds	r23, 0x024F	; 0x80024f <setpoint1+0x3>
     996:	88 ed       	ldi	r24, 0xD8	; 216
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	24 d3       	rcall	.+1608   	; 0xfe4 <move_abs>
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <main+0x388>
     99e:	88 ed       	ldi	r24, 0xD8	; 216
     9a0:	92 e0       	ldi	r25, 0x02	; 2
				else stop(&basemotor1);
     9a2:	7d d1       	rcall	.+762    	; 0xc9e <stop>
     9a4:	65 9b       	sbis	0x0c, 5	; 12
     9a6:	18 c0       	rjmp	.+48     	; 0x9d8 <main+0x3bc>

				if((PINE & (1 << PE5)) && (PINE & (1 << PE6))) {limit2 = 0; move_abs(&basemotor2, setpoint2, motor2_currentPos);}
     9a8:	66 9b       	sbis	0x0c, 6	; 12
     9aa:	16 c0       	rjmp	.+44     	; 0x9d8 <main+0x3bc>
     9ac:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <limit2>
     9b0:	00 91 5a 02 	lds	r16, 0x025A	; 0x80025a <motor2_currentPos>
     9b4:	10 91 5b 02 	lds	r17, 0x025B	; 0x80025b <motor2_currentPos+0x1>
     9b8:	20 91 5c 02 	lds	r18, 0x025C	; 0x80025c <motor2_currentPos+0x2>
     9bc:	30 91 5d 02 	lds	r19, 0x025D	; 0x80025d <motor2_currentPos+0x3>
     9c0:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <setpoint2>
     9c4:	50 91 49 02 	lds	r21, 0x0249	; 0x800249 <setpoint2+0x1>
     9c8:	60 91 4a 02 	lds	r22, 0x024A	; 0x80024a <setpoint2+0x2>
     9cc:	70 91 4b 02 	lds	r23, 0x024B	; 0x80024b <setpoint2+0x3>
     9d0:	86 e9       	ldi	r24, 0x96	; 150
     9d2:	94 e0       	ldi	r25, 0x04	; 4
     9d4:	07 d3       	rcall	.+1550   	; 0xfe4 <move_abs>
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <main+0x3c2>
				else stop(&basemotor2);
     9d8:	86 e9       	ldi	r24, 0x96	; 150
     9da:	94 e0       	ldi	r25, 0x04	; 4
     9dc:	60 d1       	rcall	.+704    	; 0xc9e <stop>
     9de:	00 91 56 02 	lds	r16, 0x0256	; 0x800256 <motor3_currentPos>

				move_abs(&micromotor3, setpoint3, motor3_currentPos);
     9e2:	10 91 57 02 	lds	r17, 0x0257	; 0x800257 <motor3_currentPos+0x1>
     9e6:	20 91 58 02 	lds	r18, 0x0258	; 0x800258 <motor3_currentPos+0x2>
     9ea:	30 91 59 02 	lds	r19, 0x0259	; 0x800259 <motor3_currentPos+0x3>
     9ee:	40 91 44 02 	lds	r20, 0x0244	; 0x800244 <setpoint3>
     9f2:	50 91 45 02 	lds	r21, 0x0245	; 0x800245 <setpoint3+0x1>
     9f6:	60 91 46 02 	lds	r22, 0x0246	; 0x800246 <setpoint3+0x2>
     9fa:	70 91 47 02 	lds	r23, 0x0247	; 0x800247 <setpoint3+0x3>
     9fe:	83 e4       	ldi	r24, 0x43	; 67
     a00:	94 e0       	ldi	r25, 0x04	; 4
     a02:	f0 d2       	rcall	.+1504   	; 0xfe4 <move_abs>

				current_motor1 = read_current(6,400);
     a04:	60 e9       	ldi	r22, 0x90	; 144
     a06:	86 e0       	ldi	r24, 0x06	; 6
     a08:	aa d3       	rcall	.+1876   	; 0x115e <read_current>
     a0a:	60 93 38 02 	sts	0x0238, r22	; 0x800238 <current_motor1>
     a0e:	70 93 39 02 	sts	0x0239, r23	; 0x800239 <current_motor1+0x1>
     a12:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <current_motor1+0x2>
     a16:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <current_motor1+0x3>
				//sprintf(response,"%ld", motor1_currentPos);
				//strcat(response, "- pos1 \n");
				//USART0_send_string(response);

				dtostrf(current_motor1, 6, 4, response);
     a1a:	04 e7       	ldi	r16, 0x74	; 116
     a1c:	12 e0       	ldi	r17, 0x02	; 2
     a1e:	24 e0       	ldi	r18, 0x04	; 4
     a20:	46 e0       	ldi	r20, 0x06	; 6
     a22:	58 d6       	rcall	.+3248   	; 0x16d4 <dtostrf>
				strcat(response, "\n");
     a24:	f8 01       	movw	r30, r16
     a26:	01 90       	ld	r0, Z+
     a28:	00 20       	and	r0, r0
     a2a:	e9 f7       	brne	.-6      	; 0xa26 <main+0x40a>
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	8a e0       	ldi	r24, 0x0A	; 10
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	80 83       	st	Z, r24
				USART0_send_string(response);
     a36:	c8 01       	movw	r24, r16
     a38:	1a d4       	rcall	.+2100   	; 0x126e <USART0_send_string>
     a3a:	09 c0       	rjmp	.+18     	; 0xa4e <main+0x432>
     a3c:	88 ed       	ldi	r24, 0xD8	; 216
			}else{
				stop(&basemotor1);
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	2e d1       	rcall	.+604    	; 0xc9e <stop>
     a42:	86 e9       	ldi	r24, 0x96	; 150
     a44:	94 e0       	ldi	r25, 0x04	; 4
				stop(&basemotor2);
     a46:	2b d1       	rcall	.+598    	; 0xc9e <stop>
     a48:	83 e4       	ldi	r24, 0x43	; 67
     a4a:	94 e0       	ldi	r25, 0x04	; 4
     a4c:	28 d1       	rcall	.+592    	; 0xc9e <stop>
				stop(&micromotor3);
     a4e:	8f e1       	ldi	r24, 0x1F	; 31
     a50:	9e e4       	ldi	r25, 0x4E	; 78
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	f1 f7       	brne	.-4      	; 0xa52 <main+0x436>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <main+0x43c>
     a58:	00 00       	nop
     a5a:	c8 ce       	rjmp	.-624    	; 0x7ec <main+0x1d0>

00000a5c <init_motor>:
#include "motor.h"

Motor init_motor(uint8_t motortype, volatile uint8_t *portdirpin, uint8_t dirpin1, uint8_t dirpin2,
				volatile uint8_t *ddreg, uint8_t ddrpin1, uint8_t ddrpin2, volatile int32_t encoder, 
				volatile uint8_t *ddrpwm, uint8_t pwmpin, volatile uint16_t *ocr1, 
				volatile uint16_t *ocr2 , uint8_t max_speed){
     a5c:	2f 92       	push	r2
     a5e:	3f 92       	push	r3
     a60:	4f 92       	push	r4
     a62:	5f 92       	push	r5
     a64:	6f 92       	push	r6
     a66:	7f 92       	push	r7
     a68:	8f 92       	push	r8
     a6a:	9f 92       	push	r9
     a6c:	af 92       	push	r10
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
     a82:	4c 01       	movw	r8, r24
     a84:	16 2f       	mov	r17, r22
     a86:	6c 2d       	mov	r22, r12
     a88:	29 8c       	ldd	r2, Y+25	; 0x19
     a8a:	3a 8c       	ldd	r3, Y+26	; 0x1a
     a8c:	db 8c       	ldd	r13, Y+27	; 0x1b
     a8e:	88 a1       	ldd	r24, Y+32	; 0x20
	Motor motor;
	motor.encoder = encoder;
     a90:	4d 88       	ldd	r4, Y+21	; 0x15
     a92:	5e 88       	ldd	r5, Y+22	; 0x16
     a94:	6f 88       	ldd	r6, Y+23	; 0x17
     a96:	78 8c       	ldd	r7, Y+24	; 0x18
     a98:	f4 01       	movw	r30, r8
     a9a:	43 8a       	std	Z+19, r4	; 0x13
     a9c:	54 8a       	std	Z+20, r5	; 0x14
     a9e:	65 8a       	std	Z+21, r6	; 0x15
     aa0:	76 8a       	std	Z+22, r7	; 0x16
	motor.motortype = motortype;
     aa2:	10 83       	st	Z, r17
	motor.portdirpin = portdirpin;
     aa4:	56 83       	std	Z+6, r21	; 0x06
     aa6:	45 83       	std	Z+5, r20	; 0x05
	motor.dirpin1 = dirpin1;
     aa8:	27 83       	std	Z+7, r18	; 0x07
	motor.dirpin2 = dirpin2;
     aaa:	00 87       	std	Z+8, r16	; 0x08
	motor.ddreg = ddreg;
     aac:	f2 82       	std	Z+2, r15	; 0x02
     aae:	e1 82       	std	Z+1, r14	; 0x01
	motor.ddrpin1 = ddrpin1;
     ab0:	c3 82       	std	Z+3, r12	; 0x03
	motor.ddrpin2 = ddrpin2;
     ab2:	a4 82       	std	Z+4, r10	; 0x04
	motor.ddrpwm = ddrpwm;
     ab4:	32 86       	std	Z+10, r3	; 0x0a
     ab6:	21 86       	std	Z+9, r2	; 0x09
	motor.pwmpin = pwmpin;
     ab8:	d3 86       	std	Z+11, r13	; 0x0b
	motor.ocr1 = ocr1;
     aba:	2c 8d       	ldd	r18, Y+28	; 0x1c
     abc:	3d 8d       	ldd	r19, Y+29	; 0x1d
     abe:	35 87       	std	Z+13, r19	; 0x0d
     ac0:	24 87       	std	Z+12, r18	; 0x0c
	motor.ocr2 = ocr2;
     ac2:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ac4:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ac6:	37 87       	std	Z+15, r19	; 0x0f
     ac8:	26 87       	std	Z+14, r18	; 0x0e
	motor.max_speed = max_speed;
     aca:	82 8b       	std	Z+18, r24	; 0x12
	motor.pwm_value = max_speed;
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	91 8b       	std	Z+17, r25	; 0x11
     ad0:	80 8b       	std	Z+16, r24	; 0x10

	//SET DIR PIN OUTPUTS
	set_output(motor.ddreg, motor.ddrpin1);
     ad2:	c7 01       	movw	r24, r14
     ad4:	e4 db       	rcall	.-2104   	; 0x29e <set_output>
	set_output(motor.ddreg, motor.ddrpin2);
     ad6:	6a 2d       	mov	r22, r10
     ad8:	c7 01       	movw	r24, r14
     ada:	e1 db       	rcall	.-2110   	; 0x29e <set_output>

	if(motortype == 1){			
     adc:	11 30       	cpi	r17, 0x01	; 1
     ade:	49 f4       	brne	.+18     	; 0xaf2 <init_motor+0x96>
		motor.ticks_per_rev = 12; //MICROMOTOR
     ae0:	8c e0       	ldi	r24, 0x0C	; 12
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	f4 01       	movw	r30, r8
     ae6:	90 8f       	std	Z+24, r25	; 0x18
     ae8:	87 8b       	std	Z+23, r24	; 0x17
		//SET PWM PIN OUTPUTS
		set_output(motor.ddrpwm, motor.pwmpin);
     aea:	6d 2d       	mov	r22, r13
     aec:	c1 01       	movw	r24, r2
     aee:	d7 db       	rcall	.-2130   	; 0x29e <set_output>
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <init_motor+0xa4>
	}		
	else if(motortype == 2) motor.ticks_per_rev = 700; //BASE MOTOR
     af2:	12 30       	cpi	r17, 0x02	; 2
     af4:	29 f4       	brne	.+10     	; 0xb00 <init_motor+0xa4>
     af6:	8c eb       	ldi	r24, 0xBC	; 188
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	f4 01       	movw	r30, r8
     afc:	90 8f       	std	Z+24, r25	; 0x18
     afe:	87 8b       	std	Z+23, r24	; 0x17

	return motor;
}
     b00:	c4 01       	movw	r24, r8
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	1f 91       	pop	r17
     b08:	0f 91       	pop	r16
     b0a:	ff 90       	pop	r15
     b0c:	ef 90       	pop	r14
     b0e:	df 90       	pop	r13
     b10:	cf 90       	pop	r12
     b12:	af 90       	pop	r10
     b14:	9f 90       	pop	r9
     b16:	8f 90       	pop	r8
     b18:	7f 90       	pop	r7
     b1a:	6f 90       	pop	r6
     b1c:	5f 90       	pop	r5
     b1e:	4f 90       	pop	r4
     b20:	3f 90       	pop	r3
     b22:	2f 90       	pop	r2
     b24:	08 95       	ret

00000b26 <init_pid>:

void init_pid(Motor *motor, float kp, float kd, float ki){
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	ec 01       	movw	r28, r24
	motor->pid.Kp = kp;
     b38:	fc 01       	movw	r30, r24
     b3a:	eb 5b       	subi	r30, 0xBB	; 187
     b3c:	ff 4f       	sbci	r31, 0xFF	; 255
     b3e:	40 83       	st	Z, r20
     b40:	51 83       	std	Z+1, r21	; 0x01
     b42:	62 83       	std	Z+2, r22	; 0x02
     b44:	73 83       	std	Z+3, r23	; 0x03
	motor->pid.Kd = kd;
     b46:	34 96       	adiw	r30, 0x04	; 4
     b48:	00 83       	st	Z, r16
     b4a:	11 83       	std	Z+1, r17	; 0x01
     b4c:	22 83       	std	Z+2, r18	; 0x02
     b4e:	33 83       	std	Z+3, r19	; 0x03
	motor->pid.Ki = ki;
     b50:	34 96       	adiw	r30, 0x04	; 4
     b52:	c0 82       	st	Z, r12
     b54:	d1 82       	std	Z+1, r13	; 0x01
     b56:	e2 82       	std	Z+2, r14	; 0x02
     b58:	f3 82       	std	Z+3, r15	; 0x03
	motor->pid.prev_error = 0;
     b5a:	19 8e       	std	Y+25, r1	; 0x19
     b5c:	1a 8e       	std	Y+26, r1	; 0x1a
     b5e:	1b 8e       	std	Y+27, r1	; 0x1b
     b60:	1c 8e       	std	Y+28, r1	; 0x1c
	motor->pid.setpoint = 0;
     b62:	19 a2       	std	Y+33, r1	; 0x21
     b64:	1a a2       	std	Y+34, r1	; 0x22
     b66:	1b a2       	std	Y+35, r1	; 0x23
     b68:	1c a2       	std	Y+36, r1	; 0x24
	motor->pid.critical_delta = 2 * motor->ticks_per_rev;
     b6a:	6f 89       	ldd	r22, Y+23	; 0x17
     b6c:	78 8d       	ldd	r23, Y+24	; 0x18
     b6e:	66 0f       	add	r22, r22
     b70:	77 1f       	adc	r23, r23
     b72:	8c 01       	movw	r16, r24
     b74:	03 5c       	subi	r16, 0xC3	; 195
     b76:	1f 4f       	sbci	r17, 0xFF	; 255
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	86 d4       	rcall	.+2316   	; 0x148a <__floatunsisf>
     b7e:	f8 01       	movw	r30, r16
     b80:	60 83       	st	Z, r22
     b82:	71 83       	std	Z+1, r23	; 0x01
     b84:	82 83       	std	Z+2, r24	; 0x02
     b86:	93 83       	std	Z+3, r25	; 0x03
	motor->pid.e_prop = 0;
     b88:	1d a2       	std	Y+37, r1	; 0x25
     b8a:	1e a2       	std	Y+38, r1	; 0x26
     b8c:	1f a2       	std	Y+39, r1	; 0x27
     b8e:	18 a6       	std	Y+40, r1	; 0x28
	motor->pid.e_dot = 0;
     b90:	19 a6       	std	Y+41, r1	; 0x29
     b92:	1a a6       	std	Y+42, r1	; 0x2a
     b94:	1b a6       	std	Y+43, r1	; 0x2b
     b96:	1c a6       	std	Y+44, r1	; 0x2c
	motor->pid.e_int = 0;
     b98:	1d a6       	std	Y+45, r1	; 0x2d
     b9a:	1e a6       	std	Y+46, r1	; 0x2e
     b9c:	1f a6       	std	Y+47, r1	; 0x2f
     b9e:	18 aa       	std	Y+48, r1	; 0x30
	motor->pid.us_time = 0;
     ba0:	19 aa       	std	Y+49, r1	; 0x31
     ba2:	1a aa       	std	Y+50, r1	; 0x32
     ba4:	1b aa       	std	Y+51, r1	; 0x33
     ba6:	1c aa       	std	Y+52, r1	; 0x34
	motor->pid.d_time = 0;
     ba8:	1d aa       	std	Y+53, r1	; 0x35
     baa:	1e aa       	std	Y+54, r1	; 0x36
     bac:	1f aa       	std	Y+55, r1	; 0x37
     bae:	18 ae       	std	Y+56, r1	; 0x38
	motor->pid.prev_time = 0;
     bb0:	19 ae       	std	Y+57, r1	; 0x39
     bb2:	1a ae       	std	Y+58, r1	; 0x3a
     bb4:	1b ae       	std	Y+59, r1	; 0x3b
     bb6:	1c ae       	std	Y+60, r1	; 0x3c
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	ff 90       	pop	r15
     bc2:	ef 90       	pop	r14
     bc4:	df 90       	pop	r13
     bc6:	cf 90       	pop	r12
     bc8:	08 95       	ret

00000bca <init_pwm>:

void init_pwm(void){
	//SET THE TIMER COUNTER CONTROL REGISTERS TO FAST PWM MODE WITH CLEAR ON COMPARE MATCH
	//MICRO MOTOR PWM SETUP
	TCCR0A |= (1 << COM0A1) | (1 << WGM01)  | (1 << WGM00);
     bca:	84 b5       	in	r24, 0x24	; 36
     bcc:	83 68       	ori	r24, 0x83	; 131
     bce:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=  (1 << CS00)  | (1 << WGM02);
     bd0:	85 b5       	in	r24, 0x25	; 37
     bd2:	89 60       	ori	r24, 0x09	; 9
     bd4:	85 bd       	out	0x25, r24	; 37
	
	TCCR1A |= (1 << COM1B1) | (1 << WGM10);
     bd6:	e0 e8       	ldi	r30, 0x80	; 128
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	81 62       	ori	r24, 0x21	; 33
     bde:	80 83       	st	Z, r24
	TCCR1B |=  (1 << CS10)  | (1 << WGM12);
     be0:	e1 e8       	ldi	r30, 0x81	; 129
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	89 60       	ori	r24, 0x09	; 9
     be8:	80 83       	st	Z, r24

	//BASE MOTOR PWM SETUP
	TCCR2A |= (1 << COM2B1) | (1 << WGM21)  | (1 << WGM20);
     bea:	e0 eb       	ldi	r30, 0xB0	; 176
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	83 62       	ori	r24, 0x23	; 35
     bf2:	80 83       	st	Z, r24
	TCCR2B |=  (1 << CS20);
     bf4:	e1 eb       	ldi	r30, 0xB1	; 177
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	81 60       	ori	r24, 0x01	; 1
     bfc:	80 83       	st	Z, r24

	TCCR4A |= (1 << COM4A1) | (1 << COM4B1) | (1 << COM4C1) | (1 << WGM40);
     bfe:	e0 ea       	ldi	r30, 0xA0	; 160
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	89 6a       	ori	r24, 0xA9	; 169
     c06:	80 83       	st	Z, r24
	TCCR4B |=  (1 << CS40)  | (1 << WGM42);
     c08:	e1 ea       	ldi	r30, 0xA1	; 161
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	89 60       	ori	r24, 0x09	; 9
     c10:	80 83       	st	Z, r24
     c12:	08 95       	ret

00000c14 <fwd>:
}

void fwd(Motor *motor){
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	fc 01       	movw	r30, r24
	if(motor->motortype == 1){			//MICROMOTOR
     c1a:	80 81       	ld	r24, Z
     c1c:	81 30       	cpi	r24, 0x01	; 1
     c1e:	51 f4       	brne	.+20     	; 0xc34 <fwd+0x20>
     c20:	ef 01       	movw	r28, r30
		pin_high(motor->portdirpin, motor->dirpin1);
     c22:	67 81       	ldd	r22, Z+7	; 0x07
     c24:	85 81       	ldd	r24, Z+5	; 0x05
     c26:	96 81       	ldd	r25, Z+6	; 0x06
     c28:	46 db       	rcall	.-2420   	; 0x2b6 <pin_high>
		pin_low(motor->portdirpin, motor->dirpin2);
     c2a:	68 85       	ldd	r22, Y+8	; 0x08
     c2c:	8d 81       	ldd	r24, Y+5	; 0x05
     c2e:	9e 81       	ldd	r25, Y+6	; 0x06
     c30:	4e db       	rcall	.-2404   	; 0x2ce <pin_low>
     c32:	0e c0       	rjmp	.+28     	; 0xc50 <fwd+0x3c>
	}else if(motor->motortype == 2){	//BASE MOTOR
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	61 f4       	brne	.+24     	; 0xc50 <fwd+0x3c>
		*motor->ocr1 = motor->pwm_value;
     c38:	a4 85       	ldd	r26, Z+12	; 0x0c
     c3a:	b5 85       	ldd	r27, Z+13	; 0x0d
     c3c:	80 89       	ldd	r24, Z+16	; 0x10
     c3e:	91 89       	ldd	r25, Z+17	; 0x11
     c40:	11 96       	adiw	r26, 0x01	; 1
     c42:	9c 93       	st	X, r25
     c44:	8e 93       	st	-X, r24
		*motor->ocr2 = 0;
     c46:	06 84       	ldd	r0, Z+14	; 0x0e
     c48:	f7 85       	ldd	r31, Z+15	; 0x0f
     c4a:	e0 2d       	mov	r30, r0
     c4c:	11 82       	std	Z+1, r1	; 0x01
     c4e:	10 82       	st	Z, r1
	}
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	08 95       	ret

00000c56 <bwd>:

void bwd(Motor *motor){
     c56:	cf 93       	push	r28
     c58:	df 93       	push	r29
     c5a:	fc 01       	movw	r30, r24
	if(motor->motortype == 1){			//MICROMOTOR
     c5c:	80 81       	ld	r24, Z
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	51 f4       	brne	.+20     	; 0xc76 <bwd+0x20>
     c62:	ef 01       	movw	r28, r30
		pin_low(motor->portdirpin, motor->dirpin1);
     c64:	67 81       	ldd	r22, Z+7	; 0x07
     c66:	85 81       	ldd	r24, Z+5	; 0x05
     c68:	96 81       	ldd	r25, Z+6	; 0x06
     c6a:	31 db       	rcall	.-2462   	; 0x2ce <pin_low>
		pin_high(motor->portdirpin, motor->dirpin2);
     c6c:	68 85       	ldd	r22, Y+8	; 0x08
     c6e:	8d 81       	ldd	r24, Y+5	; 0x05
     c70:	9e 81       	ldd	r25, Y+6	; 0x06
     c72:	21 db       	rcall	.-2494   	; 0x2b6 <pin_high>
     c74:	11 c0       	rjmp	.+34     	; 0xc98 <bwd+0x42>
	}else if(motor->motortype == 2){	//BASE MOTOR
     c76:	82 30       	cpi	r24, 0x02	; 2
     c78:	79 f4       	brne	.+30     	; 0xc98 <bwd+0x42>
		*motor->ocr1 = 0;
     c7a:	a4 85       	ldd	r26, Z+12	; 0x0c
     c7c:	b5 85       	ldd	r27, Z+13	; 0x0d
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	1c 92       	st	X, r1
     c82:	1e 92       	st	-X, r1
		*motor->ocr2 = -motor->pwm_value;
     c84:	a6 85       	ldd	r26, Z+14	; 0x0e
     c86:	b7 85       	ldd	r27, Z+15	; 0x0f
     c88:	80 89       	ldd	r24, Z+16	; 0x10
     c8a:	91 89       	ldd	r25, Z+17	; 0x11
     c8c:	91 95       	neg	r25
     c8e:	81 95       	neg	r24
     c90:	91 09       	sbc	r25, r1
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	9c 93       	st	X, r25
     c96:	8e 93       	st	-X, r24
	}
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	08 95       	ret

00000c9e <stop>:

void stop(Motor *motor){
     c9e:	cf 93       	push	r28
     ca0:	df 93       	push	r29
	if(motor->motortype == 1){			//MICROMOTOR
     ca2:	dc 01       	movw	r26, r24
     ca4:	2c 91       	ld	r18, X
     ca6:	21 30       	cpi	r18, 0x01	; 1
     ca8:	51 f4       	brne	.+20     	; 0xcbe <stop+0x20>
     caa:	ec 01       	movw	r28, r24
		pin_low(motor->portdirpin, motor->dirpin1);
     cac:	6f 81       	ldd	r22, Y+7	; 0x07
     cae:	8d 81       	ldd	r24, Y+5	; 0x05
     cb0:	9e 81       	ldd	r25, Y+6	; 0x06
     cb2:	0d db       	rcall	.-2534   	; 0x2ce <pin_low>
		pin_low(motor->portdirpin, motor->dirpin2);
     cb4:	68 85       	ldd	r22, Y+8	; 0x08
     cb6:	8d 81       	ldd	r24, Y+5	; 0x05
     cb8:	9e 81       	ldd	r25, Y+6	; 0x06
     cba:	09 db       	rcall	.-2542   	; 0x2ce <pin_low>
     cbc:	0f c0       	rjmp	.+30     	; 0xcdc <stop+0x3e>
	}else if(motor->motortype == 2){	//BASE MOTOR
     cbe:	22 30       	cpi	r18, 0x02	; 2
     cc0:	69 f4       	brne	.+26     	; 0xcdc <stop+0x3e>
		*motor->ocr1 = 0;
     cc2:	dc 01       	movw	r26, r24
     cc4:	1c 96       	adiw	r26, 0x0c	; 12
     cc6:	ed 91       	ld	r30, X+
     cc8:	fc 91       	ld	r31, X
     cca:	1d 97       	sbiw	r26, 0x0d	; 13
     ccc:	11 82       	std	Z+1, r1	; 0x01
     cce:	10 82       	st	Z, r1
		*motor->ocr2 = 0;
     cd0:	1e 96       	adiw	r26, 0x0e	; 14
     cd2:	ed 91       	ld	r30, X+
     cd4:	fc 91       	ld	r31, X
     cd6:	1f 97       	sbiw	r26, 0x0f	; 15
     cd8:	11 82       	std	Z+1, r1	; 0x01
     cda:	10 82       	st	Z, r1
	}
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <calculatePID>:

void calculatePID(Motor *motor){ 
     ce2:	4f 92       	push	r4
     ce4:	5f 92       	push	r5
     ce6:	6f 92       	push	r6
     ce8:	7f 92       	push	r7
     cea:	8f 92       	push	r8
     cec:	9f 92       	push	r9
     cee:	af 92       	push	r10
     cf0:	bf 92       	push	r11
     cf2:	cf 92       	push	r12
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	2a 97       	sbiw	r28, 0x0a	; 10
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	9a 87       	std	Y+10, r25	; 0x0a
     d10:	89 87       	std	Y+9, r24	; 0x09
	motor->pid.us_time = micros();
     d12:	f7 da       	rcall	.-2578   	; 0x302 <micros>
     d14:	2b 01       	movw	r4, r22
     d16:	3c 01       	movw	r6, r24
     d18:	a9 85       	ldd	r26, Y+9	; 0x09
     d1a:	ba 85       	ldd	r27, Y+10	; 0x0a
     d1c:	d1 96       	adiw	r26, 0x31	; 49
     d1e:	6d 93       	st	X+, r22
     d20:	7d 93       	st	X+, r23
     d22:	8d 93       	st	X+, r24
     d24:	9c 93       	st	X, r25
     d26:	d4 97       	sbiw	r26, 0x34	; 52
	motor->pid.d_time = (motor->pid.us_time - motor->pid.prev_time);
     d28:	fd 01       	movw	r30, r26
     d2a:	81 ad       	ldd	r24, Z+57	; 0x39
     d2c:	92 ad       	ldd	r25, Z+58	; 0x3a
     d2e:	a3 ad       	ldd	r26, Z+59	; 0x3b
     d30:	b4 ad       	ldd	r27, Z+60	; 0x3c
     d32:	53 01       	movw	r10, r6
     d34:	42 01       	movw	r8, r4
     d36:	88 1a       	sub	r8, r24
     d38:	99 0a       	sbc	r9, r25
     d3a:	aa 0a       	sbc	r10, r26
     d3c:	bb 0a       	sbc	r11, r27
     d3e:	85 aa       	std	Z+53, r8	; 0x35
     d40:	96 aa       	std	Z+54, r9	; 0x36
     d42:	a7 aa       	std	Z+55, r10	; 0x37
     d44:	b0 ae       	std	Z+56, r11	; 0x38

	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
     d46:	81 a1       	ldd	r24, Z+33	; 0x21
     d48:	92 a1       	ldd	r25, Z+34	; 0x22
     d4a:	a3 a1       	ldd	r26, Z+35	; 0x23
     d4c:	b4 a1       	ldd	r27, Z+36	; 0x24
     d4e:	c5 8c       	ldd	r12, Z+29	; 0x1d
     d50:	d6 8c       	ldd	r13, Z+30	; 0x1e
     d52:	e7 8c       	ldd	r14, Z+31	; 0x1f
     d54:	f0 a0       	ldd	r15, Z+32	; 0x20
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	6c 19       	sub	r22, r12
     d5c:	7d 09       	sbc	r23, r13
     d5e:	8e 09       	sbc	r24, r14
     d60:	9f 09       	sbc	r25, r15
     d62:	95 d3       	rcall	.+1834   	; 0x148e <__floatsisf>
     d64:	6b 01       	movw	r12, r22
     d66:	7c 01       	movw	r14, r24
     d68:	a9 85       	ldd	r26, Y+9	; 0x09
     d6a:	ba 85       	ldd	r27, Y+10	; 0x0a
     d6c:	95 96       	adiw	r26, 0x25	; 37
     d6e:	6d 93       	st	X+, r22
     d70:	7d 93       	st	X+, r23
     d72:	8d 93       	st	X+, r24
     d74:	9c 93       	st	X, r25
     d76:	98 97       	sbiw	r26, 0x28	; 40
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
     d78:	59 96       	adiw	r26, 0x19	; 25
     d7a:	6d 91       	ld	r22, X+
     d7c:	7d 91       	ld	r23, X+
     d7e:	8d 91       	ld	r24, X+
     d80:	9c 91       	ld	r25, X
     d82:	5c 97       	sbiw	r26, 0x1c	; 28
     d84:	84 d3       	rcall	.+1800   	; 0x148e <__floatsisf>
     d86:	9b 01       	movw	r18, r22
     d88:	ac 01       	movw	r20, r24
     d8a:	c7 01       	movw	r24, r14
     d8c:	b6 01       	movw	r22, r12
     d8e:	7b d2       	rcall	.+1270   	; 0x1286 <__subsf3>
     d90:	6d 83       	std	Y+5, r22	; 0x05
     d92:	7e 83       	std	Y+6, r23	; 0x06
     d94:	8f 83       	std	Y+7, r24	; 0x07
     d96:	98 87       	std	Y+8, r25	; 0x08
     d98:	c5 01       	movw	r24, r10
     d9a:	b4 01       	movw	r22, r8
     d9c:	76 d3       	rcall	.+1772   	; 0x148a <__floatunsisf>
     d9e:	69 83       	std	Y+1, r22	; 0x01
     da0:	7a 83       	std	Y+2, r23	; 0x02
     da2:	8b 83       	std	Y+3, r24	; 0x03
     da4:	9c 83       	std	Y+4, r25	; 0x04
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	6d 81       	ldd	r22, Y+5	; 0x05
     dac:	7e 81       	ldd	r23, Y+6	; 0x06
     dae:	8f 81       	ldd	r24, Y+7	; 0x07
     db0:	98 85       	ldd	r25, Y+8	; 0x08
     db2:	d2 d2       	rcall	.+1444   	; 0x1358 <__divsf3>
     db4:	6d 83       	std	Y+5, r22	; 0x05
     db6:	7e 83       	std	Y+6, r23	; 0x06
     db8:	8f 83       	std	Y+7, r24	; 0x07
     dba:	98 87       	std	Y+8, r25	; 0x08
     dbc:	e9 85       	ldd	r30, Y+9	; 0x09
     dbe:	fa 85       	ldd	r31, Y+10	; 0x0a
     dc0:	61 a7       	std	Z+41, r22	; 0x29
     dc2:	72 a7       	std	Z+42, r23	; 0x2a
     dc4:	83 a7       	std	Z+43, r24	; 0x2b
     dc6:	94 a7       	std	Z+44, r25	; 0x2c
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);
     dc8:	85 a4       	ldd	r8, Z+45	; 0x2d
     dca:	96 a4       	ldd	r9, Z+46	; 0x2e
     dcc:	a7 a4       	ldd	r10, Z+47	; 0x2f
     dce:	b0 a8       	ldd	r11, Z+48	; 0x30
     dd0:	29 81       	ldd	r18, Y+1	; 0x01
     dd2:	3a 81       	ldd	r19, Y+2	; 0x02
     dd4:	4b 81       	ldd	r20, Y+3	; 0x03
     dd6:	5c 81       	ldd	r21, Y+4	; 0x04
     dd8:	c7 01       	movw	r24, r14
     dda:	b6 01       	movw	r22, r12
     ddc:	0c d4       	rcall	.+2072   	; 0x15f6 <__mulsf3>
     dde:	9b 01       	movw	r18, r22
     de0:	ac 01       	movw	r20, r24
     de2:	c5 01       	movw	r24, r10
     de4:	b4 01       	movw	r22, r8
     de6:	50 d2       	rcall	.+1184   	; 0x1288 <__addsf3>
     de8:	4b 01       	movw	r8, r22
     dea:	5c 01       	movw	r10, r24
     dec:	a9 85       	ldd	r26, Y+9	; 0x09
     dee:	ba 85       	ldd	r27, Y+10	; 0x0a
     df0:	9d 96       	adiw	r26, 0x2d	; 45
     df2:	6d 93       	st	X+, r22
     df4:	7d 93       	st	X+, r23
     df6:	8d 93       	st	X+, r24
     df8:	9c 93       	st	X, r25
     dfa:	d0 97       	sbiw	r26, 0x30	; 48

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
     dfc:	fd 01       	movw	r30, r26
     dfe:	eb 5b       	subi	r30, 0xBB	; 187
     e00:	ff 4f       	sbci	r31, 0xFF	; 255
     e02:	20 81       	ld	r18, Z
     e04:	31 81       	ldd	r19, Z+1	; 0x01
     e06:	42 81       	ldd	r20, Z+2	; 0x02
     e08:	53 81       	ldd	r21, Z+3	; 0x03
     e0a:	c7 01       	movw	r24, r14
     e0c:	b6 01       	movw	r22, r12
     e0e:	f3 d3       	rcall	.+2022   	; 0x15f6 <__mulsf3>
     e10:	69 83       	std	Y+1, r22	; 0x01
     e12:	7a 83       	std	Y+2, r23	; 0x02
     e14:	8b 83       	std	Y+3, r24	; 0x03
     e16:	9c 83       	std	Y+4, r25	; 0x04
							 (motor->pid.Kd * motor->pid.e_dot) + 
     e18:	e9 85       	ldd	r30, Y+9	; 0x09
     e1a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e1c:	e7 5b       	subi	r30, 0xB7	; 183
     e1e:	ff 4f       	sbci	r31, 0xFF	; 255
     e20:	20 81       	ld	r18, Z
     e22:	31 81       	ldd	r19, Z+1	; 0x01
     e24:	42 81       	ldd	r20, Z+2	; 0x02
     e26:	53 81       	ldd	r21, Z+3	; 0x03
     e28:	6d 81       	ldd	r22, Y+5	; 0x05
     e2a:	7e 81       	ldd	r23, Y+6	; 0x06
     e2c:	8f 81       	ldd	r24, Y+7	; 0x07
     e2e:	98 85       	ldd	r25, Y+8	; 0x08
     e30:	e2 d3       	rcall	.+1988   	; 0x15f6 <__mulsf3>
     e32:	9b 01       	movw	r18, r22

	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
     e34:	ac 01       	movw	r20, r24
     e36:	69 81       	ldd	r22, Y+1	; 0x01
     e38:	7a 81       	ldd	r23, Y+2	; 0x02
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	9c 81       	ldd	r25, Y+4	; 0x04
     e3e:	24 d2       	rcall	.+1096   	; 0x1288 <__addsf3>
     e40:	69 83       	std	Y+1, r22	; 0x01
     e42:	7a 83       	std	Y+2, r23	; 0x02
     e44:	8b 83       	std	Y+3, r24	; 0x03
							 (motor->pid.Kd * motor->pid.e_dot) + 
							 (motor->pid.Ki * motor->pid.e_int);
     e46:	9c 83       	std	Y+4, r25	; 0x04
     e48:	e9 85       	ldd	r30, Y+9	; 0x09
     e4a:	fa 85       	ldd	r31, Y+10	; 0x0a
     e4c:	e3 5b       	subi	r30, 0xB3	; 179
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	20 81       	ld	r18, Z
     e52:	31 81       	ldd	r19, Z+1	; 0x01
     e54:	42 81       	ldd	r20, Z+2	; 0x02
     e56:	53 81       	ldd	r21, Z+3	; 0x03
     e58:	c5 01       	movw	r24, r10
     e5a:	b4 01       	movw	r22, r8
     e5c:	cc d3       	rcall	.+1944   	; 0x15f6 <__mulsf3>
     e5e:	9b 01       	movw	r18, r22
	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
							 (motor->pid.Kd * motor->pid.e_dot) + 
     e60:	ac 01       	movw	r20, r24
     e62:	69 81       	ldd	r22, Y+1	; 0x01
     e64:	7a 81       	ldd	r23, Y+2	; 0x02
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	0e d2       	rcall	.+1052   	; 0x1288 <__addsf3>
     e6c:	4b 01       	movw	r8, r22

	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
     e6e:	5c 01       	movw	r10, r24
     e70:	e9 85       	ldd	r30, Y+9	; 0x09
     e72:	fa 85       	ldd	r31, Y+10	; 0x0a
     e74:	ef 5b       	subi	r30, 0xBF	; 191
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	60 83       	st	Z, r22
     e7a:	71 83       	std	Z+1, r23	; 0x01
     e7c:	82 83       	std	Z+2, r24	; 0x02
							 (motor->pid.Kd * motor->pid.e_dot) + 
							 (motor->pid.Ki * motor->pid.e_int);
	
	motor->pid.prev_error = motor->pid.e_prop;
     e7e:	93 83       	std	Z+3, r25	; 0x03
     e80:	c7 01       	movw	r24, r14
     e82:	b6 01       	movw	r22, r12
     e84:	d1 d2       	rcall	.+1442   	; 0x1428 <__fixsfsi>
     e86:	e9 85       	ldd	r30, Y+9	; 0x09
     e88:	fa 85       	ldd	r31, Y+10	; 0x0a
     e8a:	61 8f       	std	Z+25, r22	; 0x19
     e8c:	72 8f       	std	Z+26, r23	; 0x1a
     e8e:	83 8f       	std	Z+27, r24	; 0x1b
	motor->pid.prev_time = motor->pid.us_time;
     e90:	94 8f       	std	Z+28, r25	; 0x1c
     e92:	41 ae       	std	Z+57, r4	; 0x39
     e94:	52 ae       	std	Z+58, r5	; 0x3a

	if (motor->pid.ctrl_signal > motor->max_speed) motor->pid.ctrl_signal = motor->max_speed;
     e96:	63 ae       	std	Z+59, r6	; 0x3b
     e98:	74 ae       	std	Z+60, r7	; 0x3c
     e9a:	72 88       	ldd	r7, Z+18	; 0x12
     e9c:	e7 2c       	mov	r14, r7
     e9e:	f1 2c       	mov	r15, r1
     ea0:	b7 01       	movw	r22, r14
     ea2:	0f 2c       	mov	r0, r15
     ea4:	00 0c       	add	r0, r0
     ea6:	88 0b       	sbc	r24, r24
     ea8:	99 0b       	sbc	r25, r25
     eaa:	f1 d2       	rcall	.+1506   	; 0x148e <__floatsisf>
     eac:	9b 01       	movw	r18, r22
     eae:	ac 01       	movw	r20, r24
     eb0:	c5 01       	movw	r24, r10
     eb2:	b4 01       	movw	r22, r8
     eb4:	9c d3       	rcall	.+1848   	; 0x15ee <__gesf2>
     eb6:	18 16       	cp	r1, r24
     eb8:	7c f4       	brge	.+30     	; 0xed8 <calculatePID+0x1f6>
     eba:	c9 84       	ldd	r12, Y+9	; 0x09
     ebc:	da 84       	ldd	r13, Y+10	; 0x0a
     ebe:	b1 e4       	ldi	r27, 0x41	; 65
     ec0:	cb 0e       	add	r12, r27
     ec2:	d1 1c       	adc	r13, r1
     ec4:	67 2d       	mov	r22, r7
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	de d2       	rcall	.+1468   	; 0x148a <__floatunsisf>
     ece:	f6 01       	movw	r30, r12
     ed0:	60 83       	st	Z, r22
     ed2:	71 83       	std	Z+1, r23	; 0x01
     ed4:	82 83       	std	Z+2, r24	; 0x02
	if (motor->pid.ctrl_signal < -motor->max_speed) motor->pid.ctrl_signal = -motor->max_speed;
     ed6:	93 83       	std	Z+3, r25	; 0x03
     ed8:	e9 85       	ldd	r30, Y+9	; 0x09
     eda:	fa 85       	ldd	r31, Y+10	; 0x0a
     edc:	ef 5b       	subi	r30, 0xBF	; 191
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	80 80       	ld	r8, Z
     ee2:	91 80       	ldd	r9, Z+1	; 0x01
     ee4:	a2 80       	ldd	r10, Z+2	; 0x02
     ee6:	b3 80       	ldd	r11, Z+3	; 0x03
     ee8:	66 27       	eor	r22, r22
     eea:	77 27       	eor	r23, r23
     eec:	6e 19       	sub	r22, r14
     eee:	7f 09       	sbc	r23, r15
     ef0:	07 2e       	mov	r0, r23
     ef2:	00 0c       	add	r0, r0
     ef4:	88 0b       	sbc	r24, r24
     ef6:	99 0b       	sbc	r25, r25
     ef8:	ca d2       	rcall	.+1428   	; 0x148e <__floatsisf>
     efa:	6b 01       	movw	r12, r22
     efc:	7c 01       	movw	r14, r24
     efe:	9b 01       	movw	r18, r22
     f00:	ac 01       	movw	r20, r24
     f02:	c5 01       	movw	r24, r10
     f04:	b4 01       	movw	r22, r8
     f06:	24 d2       	rcall	.+1096   	; 0x1350 <__cmpsf2>
     f08:	88 23       	and	r24, r24
     f0a:	54 f4       	brge	.+20     	; 0xf20 <calculatePID+0x23e>
     f0c:	89 85       	ldd	r24, Y+9	; 0x09
     f0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f10:	8f 5b       	subi	r24, 0xBF	; 191
     f12:	9f 4f       	sbci	r25, 0xFF	; 255
     f14:	dc 01       	movw	r26, r24
     f16:	cd 92       	st	X+, r12
     f18:	dd 92       	st	X+, r13
     f1a:	ed 92       	st	X+, r14
     f1c:	fc 92       	st	X, r15
     f1e:	13 97       	sbiw	r26, 0x03	; 3
}
     f20:	2a 96       	adiw	r28, 0x0a	; 10
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	ff 90       	pop	r15
     f32:	ef 90       	pop	r14
     f34:	df 90       	pop	r13
     f36:	cf 90       	pop	r12
     f38:	bf 90       	pop	r11
     f3a:	af 90       	pop	r10
     f3c:	9f 90       	pop	r9
     f3e:	8f 90       	pop	r8
     f40:	7f 90       	pop	r7
     f42:	6f 90       	pop	r6
     f44:	5f 90       	pop	r5
     f46:	4f 90       	pop	r4
     f48:	08 95       	ret

00000f4a <set_speed>:

void set_speed(Motor *motor){
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	8c 01       	movw	r16, r24
	if (motor->pid.ctrl_signal > motor->pwm_value + ACCEL_CONST) {
     f60:	fc 01       	movw	r30, r24
     f62:	ef 5b       	subi	r30, 0xBF	; 191
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	c0 80       	ld	r12, Z
     f68:	d1 80       	ldd	r13, Z+1	; 0x01
     f6a:	e2 80       	ldd	r14, Z+2	; 0x02
     f6c:	f3 80       	ldd	r15, Z+3	; 0x03
     f6e:	fc 01       	movw	r30, r24
     f70:	c0 89       	ldd	r28, Z+16	; 0x10
     f72:	d1 89       	ldd	r29, Z+17	; 0x11
     f74:	5e 01       	movw	r10, r28
     f76:	f5 e0       	ldi	r31, 0x05	; 5
     f78:	af 0e       	add	r10, r31
     f7a:	b1 1c       	adc	r11, r1
     f7c:	b5 01       	movw	r22, r10
     f7e:	0b 2c       	mov	r0, r11
     f80:	00 0c       	add	r0, r0
     f82:	88 0b       	sbc	r24, r24
     f84:	99 0b       	sbc	r25, r25
     f86:	83 d2       	rcall	.+1286   	; 0x148e <__floatsisf>
     f88:	9b 01       	movw	r18, r22
     f8a:	ac 01       	movw	r20, r24
     f8c:	c7 01       	movw	r24, r14
     f8e:	b6 01       	movw	r22, r12
     f90:	2e d3       	rcall	.+1628   	; 0x15ee <__gesf2>
     f92:	18 16       	cp	r1, r24
     f94:	24 f4       	brge	.+8      	; 0xf9e <set_speed+0x54>
		motor->pwm_value += ACCEL_CONST;  // Gradual acceleration
     f96:	f8 01       	movw	r30, r16
     f98:	b1 8a       	std	Z+17, r11	; 0x11
     f9a:	a0 8a       	std	Z+16, r10	; 0x10
     f9c:	18 c0       	rjmp	.+48     	; 0xfce <set_speed+0x84>
	} else if (motor->pid.ctrl_signal < motor->pwm_value - DECEL_CONST) {
     f9e:	25 97       	sbiw	r28, 0x05	; 5
     fa0:	be 01       	movw	r22, r28
     fa2:	0d 2e       	mov	r0, r29
     fa4:	00 0c       	add	r0, r0
     fa6:	88 0b       	sbc	r24, r24
     fa8:	99 0b       	sbc	r25, r25
     faa:	71 d2       	rcall	.+1250   	; 0x148e <__floatsisf>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	cd d1       	rcall	.+922    	; 0x1350 <__cmpsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	24 f4       	brge	.+8      	; 0xfc2 <set_speed+0x78>
		motor->pwm_value -= DECEL_CONST;  // Gradual deceleration
     fba:	f8 01       	movw	r30, r16
     fbc:	d1 8b       	std	Z+17, r29	; 0x11
     fbe:	c0 8b       	std	Z+16, r28	; 0x10
	} else {
		motor->pwm_value = motor->pid.ctrl_signal; // Maintain speed
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <set_speed+0x84>
     fc2:	c7 01       	movw	r24, r14
     fc4:	b6 01       	movw	r22, r12
     fc6:	30 d2       	rcall	.+1120   	; 0x1428 <__fixsfsi>
     fc8:	f8 01       	movw	r30, r16
     fca:	71 8b       	std	Z+17, r23	; 0x11
     fcc:	60 8b       	std	Z+16, r22	; 0x10
	}
}
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	bf 90       	pop	r11
     fe0:	af 90       	pop	r10
     fe2:	08 95       	ret

00000fe4 <move_abs>:

void move_abs(Motor *motor, int32_t setpoint, volatile int32_t currentpos){
     fe4:	8f 92       	push	r8
     fe6:	9f 92       	push	r9
     fe8:	af 92       	push	r10
     fea:	bf 92       	push	r11
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	00 d0       	rcall	.+0      	; 0xffa <move_abs+0x16>
     ffa:	1f 92       	push	r1
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	7c 01       	movw	r14, r24
    1002:	09 83       	std	Y+1, r16	; 0x01
    1004:	1a 83       	std	Y+2, r17	; 0x02
    1006:	2b 83       	std	Y+3, r18	; 0x03
    1008:	3c 83       	std	Y+4, r19	; 0x04
	motor->pid.current_pos = currentpos;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
    100c:	9a 81       	ldd	r25, Y+2	; 0x02
    100e:	ab 81       	ldd	r26, Y+3	; 0x03
    1010:	bc 81       	ldd	r27, Y+4	; 0x04
    1012:	f7 01       	movw	r30, r14
    1014:	85 8f       	std	Z+29, r24	; 0x1d
    1016:	96 8f       	std	Z+30, r25	; 0x1e
    1018:	a7 8f       	std	Z+31, r26	; 0x1f
    101a:	b0 a3       	std	Z+32, r27	; 0x20
	motor->pid.setpoint = setpoint;
    101c:	41 a3       	std	Z+33, r20	; 0x21
    101e:	52 a3       	std	Z+34, r21	; 0x22
    1020:	63 a3       	std	Z+35, r22	; 0x23
    1022:	74 a3       	std	Z+36, r23	; 0x24
	
	calculatePID(motor);
    1024:	c7 01       	movw	r24, r14
    1026:	5d de       	rcall	.-838    	; 0xce2 <calculatePID>
	//if(abs(motor->pid.ctrl_signal) > motor->pid.critical_delta)
	//	motor->pwm_value = motor->max_speed;
	//else
	//	motor->pwm_value = ((abs(motor->pid.ctrl_signal)/motor->pid.critical_delta)*motor->max_speed);

	set_speed(motor);
    1028:	c7 01       	movw	r24, r14
    102a:	8f df       	rcall	.-226    	; 0xf4a <set_speed>

	if(motor->motortype == 1) *motor->ocr1 = motor->pwm_value;
    102c:	f7 01       	movw	r30, r14
    102e:	80 81       	ld	r24, Z
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	51 f4       	brne	.+20     	; 0x1048 <__EEPROM_REGION_LENGTH__+0x48>
    1034:	04 84       	ldd	r0, Z+12	; 0x0c
    1036:	f5 85       	ldd	r31, Z+13	; 0x0d
    1038:	e0 2d       	mov	r30, r0
    103a:	d7 01       	movw	r26, r14
    103c:	50 96       	adiw	r26, 0x10	; 16
    103e:	8d 91       	ld	r24, X+
    1040:	9c 91       	ld	r25, X
    1042:	51 97       	sbiw	r26, 0x11	; 17
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24

	if(motor->pid.ctrl_signal > MIN_POS_DELTA) fwd(motor);
    1048:	f7 01       	movw	r30, r14
    104a:	ef 5b       	subi	r30, 0xBF	; 191
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 80       	ld	r8, Z
    1050:	91 80       	ldd	r9, Z+1	; 0x01
    1052:	a2 80       	ldd	r10, Z+2	; 0x02
    1054:	b3 80       	ldd	r11, Z+3	; 0x03
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	a9 01       	movw	r20, r18
    105c:	c5 01       	movw	r24, r10
    105e:	b4 01       	movw	r22, r8
    1060:	c6 d2       	rcall	.+1420   	; 0x15ee <__gesf2>
    1062:	18 16       	cp	r1, r24
    1064:	1c f4       	brge	.+6      	; 0x106c <__EEPROM_REGION_LENGTH__+0x6c>
    1066:	c7 01       	movw	r24, r14
    1068:	d5 dd       	rcall	.-1110   	; 0xc14 <fwd>
    106a:	0d c0       	rjmp	.+26     	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
	else if(motor->pid.ctrl_signal < -MIN_POS_DELTA) bwd(motor);
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	a9 01       	movw	r20, r18
    1072:	c5 01       	movw	r24, r10
    1074:	b4 01       	movw	r22, r8
    1076:	6c d1       	rcall	.+728    	; 0x1350 <__cmpsf2>
    1078:	88 23       	and	r24, r24
    107a:	1c f4       	brge	.+6      	; 0x1082 <__EEPROM_REGION_LENGTH__+0x82>
    107c:	c7 01       	movw	r24, r14
    107e:	eb dd       	rcall	.-1066   	; 0xc56 <bwd>
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
	else stop(motor);
    1082:	c7 01       	movw	r24, r14
    1084:	0c de       	rcall	.-1000   	; 0xc9e <stop>
    1086:	0f 90       	pop	r0
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	bf 90       	pop	r11
    109c:	af 90       	pop	r10
    109e:	9f 90       	pop	r9
    10a0:	8f 90       	pop	r8
    10a2:	08 95       	ret

000010a4 <home_motor>:
    10a4:	20 e5       	ldi	r18, 0x50	; 80

void home_motor(Motor *motor){
	motor->pwm_value = 80;
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	fc 01       	movw	r30, r24
    10aa:	31 8b       	std	Z+17, r19	; 0x11
    10ac:	20 8b       	std	Z+16, r18	; 0x10
	fwd(motor);
    10ae:	b2 cd       	rjmp	.-1180   	; 0xc14 <fwd>
    10b0:	08 95       	ret

000010b2 <setup_ext_sensors>:
float		avg_voltage		= 0;
float		amp				= 0;
uint16_t	adcvalue		= 0;

void setup_ext_sensors(void){
	cli();
    10b2:	f8 94       	cli

	//CONFIGURE ENCODER A PINS AND SENSOR IN PINS AS INPUTS
	DDRD &= ~((1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD6) | (1 << DDD7));
    10b4:	8a b1       	in	r24, 0x0a	; 10
    10b6:	80 73       	andi	r24, 0x30	; 48
    10b8:	8a b9       	out	0x0a, r24	; 10
	DDRE &= ~((1 << DDE4) | (1 << DDE5) | (1 << DDE6) | (1 << DDE7));
    10ba:	8d b1       	in	r24, 0x0d	; 13
    10bc:	8f 70       	andi	r24, 0x0F	; 15
    10be:	8d b9       	out	0x0d, r24	; 13
	DDRB &= ~((1 << DDB4) | (1 << DDB5));
    10c0:	84 b1       	in	r24, 0x04	; 4
    10c2:	8f 7c       	andi	r24, 0xCF	; 207
    10c4:	84 b9       	out	0x04, r24	; 4

	//DISABLE PULL-UP RESISTORS
	PORTD &= ~((1 << PD0) | (1 << PD1) | (1 << PD2) | (1 << PD3) | (1 << PD6) | (1 << PD7));
    10c6:	8b b1       	in	r24, 0x0b	; 11
    10c8:	80 73       	andi	r24, 0x30	; 48
    10ca:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~((1 << PB4) | (1 << PB5));
    10cc:	85 b1       	in	r24, 0x05	; 5
    10ce:	8f 7c       	andi	r24, 0xCF	; 207
    10d0:	85 b9       	out	0x05, r24	; 5

	//ENABLE PULL-UPS FOR EXTERNAL SENSORS
	PORTE |=  ((1 << PE4) | (1 << PE5) | (1 << PE6) | (1 << PE7));
    10d2:	8e b1       	in	r24, 0x0e	; 14
    10d4:	80 6f       	ori	r24, 0xF0	; 240
    10d6:	8e b9       	out	0x0e, r24	; 14

	//SETUP EXTERNAL INTERRUPTS
	EICRA |= (1 << ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11) | (1 << ISC20) | (1 << ISC21) | (1 << ISC30) | (1 << ISC31); // rising edge detect
    10d8:	e9 e6       	ldi	r30, 0x69	; 105
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	9f ef       	ldi	r25, 0xFF	; 255
    10e0:	90 83       	st	Z, r25
	EICRB |= (1 << ISC40) | (1 << ISC50) | (1 << ISC60) | (1 << ISC70);																// any logical change
    10e2:	ea e6       	ldi	r30, 0x6A	; 106
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	85 65       	ori	r24, 0x55	; 85
    10ea:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0)  | (1 << INT1)  | (1 << INT2)  | (1 << INT3)  | (1 << INT4)  | (1 << INT5)  | (1 << INT6)  | (1 << INT7);  // Enable interrupts
    10ec:	8d b3       	in	r24, 0x1d	; 29
    10ee:	9d bb       	out	0x1d, r25	; 29

	sei();
    10f0:	78 94       	sei
    10f2:	08 95       	ret

000010f4 <ADC_init>:
}

void ADC_init(void){														//PF6 ADC6 / PF7 ADC7
	ADCSRA	|= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// Enable the ADC
    10f4:	ea e7       	ldi	r30, 0x7A	; 122
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	87 68       	ori	r24, 0x87	; 135
    10fc:	80 83       	st	Z, r24
	ADMUX	|= (1 << REFS0);												// Use AVCC for reference
    10fe:	ec e7       	ldi	r30, 0x7C	; 124
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 64       	ori	r24, 0x40	; 64
    1106:	80 83       	st	Z, r24
	ADMUX	&= ~(1 << REFS1);
    1108:	80 81       	ld	r24, Z
    110a:	8f 77       	andi	r24, 0x7F	; 127
    110c:	80 83       	st	Z, r24
	ADCSRB &= ~(1 << MUX5);
    110e:	eb e7       	ldi	r30, 0x7B	; 123
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	87 7f       	andi	r24, 0xF7	; 247
    1116:	80 83       	st	Z, r24
    1118:	08 95       	ret

0000111a <ADC_read>:
}

uint16_t ADC_read(uint8_t channel){
	//MUX1 MUX2			- ACD6
	//MUX0 MUX1 MUX2	- ACD7
	if(channel == 6)														// Select sampling channel for reading
    111a:	86 30       	cpi	r24, 0x06	; 6
    111c:	39 f4       	brne	.+14     	; 0x112c <ADC_read+0x12>
		ADMUX = (ADMUX & 0xF0) | 0x06;  // ADC6
    111e:	ec e7       	ldi	r30, 0x7C	; 124
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	80 7f       	andi	r24, 0xF0	; 240
    1126:	86 60       	ori	r24, 0x06	; 6
    1128:	80 83       	st	Z, r24
    112a:	08 c0       	rjmp	.+16     	; 0x113c <ADC_read+0x22>
	else if (channel == 7)
    112c:	87 30       	cpi	r24, 0x07	; 7
    112e:	a1 f4       	brne	.+40     	; 0x1158 <ADC_read+0x3e>
		ADMUX = (ADMUX & 0xF0) | 0x07;  // ADC7
    1130:	ec e7       	ldi	r30, 0x7C	; 124
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	80 7f       	andi	r24, 0xF0	; 240
    1138:	87 60       	ori	r24, 0x07	; 7
    113a:	80 83       	st	Z, r24
	else return 0;
			
	ADCSRA |= (1 << ADSC);													// Start ADC conversion
    113c:	ea e7       	ldi	r30, 0x7A	; 122
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 64       	ori	r24, 0x40	; 64
    1144:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
    1146:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
    114a:	86 fd       	sbrc	r24, 6
    114c:	fc cf       	rjmp	.-8      	; 0x1146 <ADC_read+0x2c>
	return ADC;																// Return converted result
    114e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
    1152:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    1156:	08 95       	ret
	//MUX0 MUX1 MUX2	- ACD7
	if(channel == 6)														// Select sampling channel for reading
		ADMUX = (ADMUX & 0xF0) | 0x06;  // ADC6
	else if (channel == 7)
		ADMUX = (ADMUX & 0xF0) | 0x07;  // ADC7
	else return 0;
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
			
	ADCSRA |= (1 << ADSC);													// Start ADC conversion
	while (ADCSRA & (1 << ADSC));
	return ADC;																// Return converted result
}
    115c:	08 95       	ret

0000115e <read_current>:

float read_current(uint8_t channel, uint8_t sample_size){
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	08 2f       	mov	r16, r24
    1168:	16 2f       	mov	r17, r22
	for (int i = 0; i < sample_size; i++) {
    116a:	c0 e0       	ldi	r28, 0x00	; 0
    116c:	d0 e0       	ldi	r29, 0x00	; 0
    116e:	30 c0       	rjmp	.+96     	; 0x11d0 <read_current+0x72>
		adcvalue = ADC_read(channel);
    1170:	80 2f       	mov	r24, r16
    1172:	d3 df       	rcall	.-90     	; 0x111a <ADC_read>
    1174:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <adcvalue+0x1>
    1178:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <adcvalue>
		sample_voltage = (adcvalue * 5000.0) / 1024.0;
    117c:	bc 01       	movw	r22, r24
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	83 d1       	rcall	.+774    	; 0x148a <__floatunsisf>
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e4       	ldi	r19, 0x40	; 64
    1188:	4c e9       	ldi	r20, 0x9C	; 156
    118a:	55 e4       	ldi	r21, 0x45	; 69
    118c:	34 d2       	rcall	.+1128   	; 0x15f6 <__mulsf3>
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	40 e8       	ldi	r20, 0x80	; 128
    1194:	5a e3       	ldi	r21, 0x3A	; 58
    1196:	2f d2       	rcall	.+1118   	; 0x15f6 <__mulsf3>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	60 93 70 02 	sts	0x0270, r22	; 0x800270 <sample_voltage>
    11a0:	70 93 71 02 	sts	0x0271, r23	; 0x800271 <sample_voltage+0x1>
    11a4:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <sample_voltage+0x2>
    11a8:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <sample_voltage+0x3>
		total_voltage += sample_voltage;
    11ac:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <total_voltage>
    11b0:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <total_voltage+0x1>
    11b4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <total_voltage+0x2>
    11b8:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <total_voltage+0x3>
    11bc:	65 d0       	rcall	.+202    	; 0x1288 <__addsf3>
    11be:	60 93 6c 02 	sts	0x026C, r22	; 0x80026c <total_voltage>
    11c2:	70 93 6d 02 	sts	0x026D, r23	; 0x80026d <total_voltage+0x1>
    11c6:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <total_voltage+0x2>
    11ca:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <total_voltage+0x3>
	while (ADCSRA & (1 << ADSC));
	return ADC;																// Return converted result
}

float read_current(uint8_t channel, uint8_t sample_size){
	for (int i = 0; i < sample_size; i++) {
    11ce:	21 96       	adiw	r28, 0x01	; 1
    11d0:	61 2f       	mov	r22, r17
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	c6 17       	cp	r28, r22
    11d6:	d7 07       	cpc	r29, r23
	}
												// ADD HISTERESHYS!!!!!!!!!!!!!!!!
	//samples++;
	//if(samples == 5){
	//samples = 0;
	avg_voltage = total_voltage/sample_size;
    11d8:	5c f2       	brlt	.-106    	; 0x1170 <read_current+0x12>
    11da:	07 2e       	mov	r0, r23
    11dc:	00 0c       	add	r0, r0
    11de:	88 0b       	sbc	r24, r24
    11e0:	99 0b       	sbc	r25, r25
    11e2:	55 d1       	rcall	.+682    	; 0x148e <__floatsisf>
    11e4:	9b 01       	movw	r18, r22
    11e6:	ac 01       	movw	r20, r24
    11e8:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <total_voltage>
    11ec:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <total_voltage+0x1>
    11f0:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <total_voltage+0x2>
    11f4:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <total_voltage+0x3>
    11f8:	af d0       	rcall	.+350    	; 0x1358 <__divsf3>
    11fa:	60 93 68 02 	sts	0x0268, r22	; 0x800268 <avg_voltage>
    11fe:	70 93 69 02 	sts	0x0269, r23	; 0x800269 <avg_voltage+0x1>
    1202:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <avg_voltage+0x2>
    1206:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <avg_voltage+0x3>
	amp = (avg_voltage - 2510) / 181;
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 ee       	ldi	r19, 0xE0	; 224
    120e:	4c e1       	ldi	r20, 0x1C	; 28
    1210:	55 e4       	ldi	r21, 0x45	; 69
    1212:	39 d0       	rcall	.+114    	; 0x1286 <__subsf3>
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	45 e3       	ldi	r20, 0x35	; 53
    121a:	53 e4       	ldi	r21, 0x43	; 67
    121c:	9d d0       	rcall	.+314    	; 0x1358 <__divsf3>
    121e:	60 93 64 02 	sts	0x0264, r22	; 0x800264 <amp>
    1222:	70 93 65 02 	sts	0x0265, r23	; 0x800265 <amp+0x1>
    1226:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <amp+0x2>
    122a:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <amp+0x3>
	total_voltage = 0;
    122e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <total_voltage>
    1232:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <total_voltage+0x1>
    1236:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <total_voltage+0x2>
    123a:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <total_voltage+0x3>
	return amp;
    123e:	df 91       	pop	r29
    1240:	cf 91       	pop	r28
    1242:	1f 91       	pop	r17
    1244:	0f 91       	pop	r16
    1246:	08 95       	ret

00001248 <USART0_init>:

#include "uart.h"

void USART0_init(void){
	//USART BAUD RATE SETUP
	UBRR0H = (unsigned char) (BRC >> 8);
    1248:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char) BRC;
    124c:	87 e6       	ldi	r24, 0x67	; 103
    124e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	//RX TX ENABLE
	//UCSR0A = (1 << U2X0);
	UCSR0B = (1 << RXEN0)  | (1 << TXEN0) | (1 << RXCIE0);
    1252:	88 e9       	ldi	r24, 0x98	; 152
    1254:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    1258:	86 e0       	ldi	r24, 0x06	; 6
    125a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
    125e:	08 95       	ret

00001260 <USART0_send>:
}

void USART0_send(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
    1260:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1264:	95 ff       	sbrs	r25, 5
    1266:	fc cf       	rjmp	.-8      	; 0x1260 <USART0_send>
	UDR0 = data;
    1268:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    126c:	08 95       	ret

0000126e <USART0_send_string>:
}

void USART0_send_string(char *ptr){
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
	while (*ptr) {
    1274:	02 c0       	rjmp	.+4      	; 0x127a <USART0_send_string+0xc>
		USART0_send(*ptr++);
    1276:	21 96       	adiw	r28, 0x01	; 1
    1278:	f3 df       	rcall	.-26     	; 0x1260 <USART0_send>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void USART0_send_string(char *ptr){
	while (*ptr) {
    127a:	88 81       	ld	r24, Y
    127c:	81 11       	cpse	r24, r1
    127e:	fb cf       	rjmp	.-10     	; 0x1276 <USART0_send_string+0x8>
		USART0_send(*ptr++);
	}
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <__subsf3>:
    1286:	50 58       	subi	r21, 0x80	; 128

00001288 <__addsf3>:
    1288:	bb 27       	eor	r27, r27
    128a:	aa 27       	eor	r26, r26
    128c:	0e d0       	rcall	.+28     	; 0x12aa <__addsf3x>
    128e:	75 c1       	rjmp	.+746    	; 0x157a <__fp_round>
    1290:	66 d1       	rcall	.+716    	; 0x155e <__fp_pscA>
    1292:	30 f0       	brcs	.+12     	; 0x12a0 <__addsf3+0x18>
    1294:	6b d1       	rcall	.+726    	; 0x156c <__fp_pscB>
    1296:	20 f0       	brcs	.+8      	; 0x12a0 <__addsf3+0x18>
    1298:	31 f4       	brne	.+12     	; 0x12a6 <__addsf3+0x1e>
    129a:	9f 3f       	cpi	r25, 0xFF	; 255
    129c:	11 f4       	brne	.+4      	; 0x12a2 <__addsf3+0x1a>
    129e:	1e f4       	brtc	.+6      	; 0x12a6 <__addsf3+0x1e>
    12a0:	5b c1       	rjmp	.+694    	; 0x1558 <__fp_nan>
    12a2:	0e f4       	brtc	.+2      	; 0x12a6 <__addsf3+0x1e>
    12a4:	e0 95       	com	r30
    12a6:	e7 fb       	bst	r30, 7
    12a8:	51 c1       	rjmp	.+674    	; 0x154c <__fp_inf>

000012aa <__addsf3x>:
    12aa:	e9 2f       	mov	r30, r25
    12ac:	77 d1       	rcall	.+750    	; 0x159c <__fp_split3>
    12ae:	80 f3       	brcs	.-32     	; 0x1290 <__addsf3+0x8>
    12b0:	ba 17       	cp	r27, r26
    12b2:	62 07       	cpc	r22, r18
    12b4:	73 07       	cpc	r23, r19
    12b6:	84 07       	cpc	r24, r20
    12b8:	95 07       	cpc	r25, r21
    12ba:	18 f0       	brcs	.+6      	; 0x12c2 <__addsf3x+0x18>
    12bc:	71 f4       	brne	.+28     	; 0x12da <__addsf3x+0x30>
    12be:	9e f5       	brtc	.+102    	; 0x1326 <__addsf3x+0x7c>
    12c0:	8f c1       	rjmp	.+798    	; 0x15e0 <__fp_zero>
    12c2:	0e f4       	brtc	.+2      	; 0x12c6 <__addsf3x+0x1c>
    12c4:	e0 95       	com	r30
    12c6:	0b 2e       	mov	r0, r27
    12c8:	ba 2f       	mov	r27, r26
    12ca:	a0 2d       	mov	r26, r0
    12cc:	0b 01       	movw	r0, r22
    12ce:	b9 01       	movw	r22, r18
    12d0:	90 01       	movw	r18, r0
    12d2:	0c 01       	movw	r0, r24
    12d4:	ca 01       	movw	r24, r20
    12d6:	a0 01       	movw	r20, r0
    12d8:	11 24       	eor	r1, r1
    12da:	ff 27       	eor	r31, r31
    12dc:	59 1b       	sub	r21, r25
    12de:	99 f0       	breq	.+38     	; 0x1306 <__addsf3x+0x5c>
    12e0:	59 3f       	cpi	r21, 0xF9	; 249
    12e2:	50 f4       	brcc	.+20     	; 0x12f8 <__addsf3x+0x4e>
    12e4:	50 3e       	cpi	r21, 0xE0	; 224
    12e6:	68 f1       	brcs	.+90     	; 0x1342 <__addsf3x+0x98>
    12e8:	1a 16       	cp	r1, r26
    12ea:	f0 40       	sbci	r31, 0x00	; 0
    12ec:	a2 2f       	mov	r26, r18
    12ee:	23 2f       	mov	r18, r19
    12f0:	34 2f       	mov	r19, r20
    12f2:	44 27       	eor	r20, r20
    12f4:	58 5f       	subi	r21, 0xF8	; 248
    12f6:	f3 cf       	rjmp	.-26     	; 0x12de <__addsf3x+0x34>
    12f8:	46 95       	lsr	r20
    12fa:	37 95       	ror	r19
    12fc:	27 95       	ror	r18
    12fe:	a7 95       	ror	r26
    1300:	f0 40       	sbci	r31, 0x00	; 0
    1302:	53 95       	inc	r21
    1304:	c9 f7       	brne	.-14     	; 0x12f8 <__addsf3x+0x4e>
    1306:	7e f4       	brtc	.+30     	; 0x1326 <__addsf3x+0x7c>
    1308:	1f 16       	cp	r1, r31
    130a:	ba 0b       	sbc	r27, r26
    130c:	62 0b       	sbc	r22, r18
    130e:	73 0b       	sbc	r23, r19
    1310:	84 0b       	sbc	r24, r20
    1312:	ba f0       	brmi	.+46     	; 0x1342 <__addsf3x+0x98>
    1314:	91 50       	subi	r25, 0x01	; 1
    1316:	a1 f0       	breq	.+40     	; 0x1340 <__addsf3x+0x96>
    1318:	ff 0f       	add	r31, r31
    131a:	bb 1f       	adc	r27, r27
    131c:	66 1f       	adc	r22, r22
    131e:	77 1f       	adc	r23, r23
    1320:	88 1f       	adc	r24, r24
    1322:	c2 f7       	brpl	.-16     	; 0x1314 <__addsf3x+0x6a>
    1324:	0e c0       	rjmp	.+28     	; 0x1342 <__addsf3x+0x98>
    1326:	ba 0f       	add	r27, r26
    1328:	62 1f       	adc	r22, r18
    132a:	73 1f       	adc	r23, r19
    132c:	84 1f       	adc	r24, r20
    132e:	48 f4       	brcc	.+18     	; 0x1342 <__addsf3x+0x98>
    1330:	87 95       	ror	r24
    1332:	77 95       	ror	r23
    1334:	67 95       	ror	r22
    1336:	b7 95       	ror	r27
    1338:	f7 95       	ror	r31
    133a:	9e 3f       	cpi	r25, 0xFE	; 254
    133c:	08 f0       	brcs	.+2      	; 0x1340 <__addsf3x+0x96>
    133e:	b3 cf       	rjmp	.-154    	; 0x12a6 <__addsf3+0x1e>
    1340:	93 95       	inc	r25
    1342:	88 0f       	add	r24, r24
    1344:	08 f0       	brcs	.+2      	; 0x1348 <__addsf3x+0x9e>
    1346:	99 27       	eor	r25, r25
    1348:	ee 0f       	add	r30, r30
    134a:	97 95       	ror	r25
    134c:	87 95       	ror	r24
    134e:	08 95       	ret

00001350 <__cmpsf2>:
    1350:	d9 d0       	rcall	.+434    	; 0x1504 <__fp_cmp>
    1352:	08 f4       	brcc	.+2      	; 0x1356 <__cmpsf2+0x6>
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	08 95       	ret

00001358 <__divsf3>:
    1358:	0c d0       	rcall	.+24     	; 0x1372 <__divsf3x>
    135a:	0f c1       	rjmp	.+542    	; 0x157a <__fp_round>
    135c:	07 d1       	rcall	.+526    	; 0x156c <__fp_pscB>
    135e:	40 f0       	brcs	.+16     	; 0x1370 <__divsf3+0x18>
    1360:	fe d0       	rcall	.+508    	; 0x155e <__fp_pscA>
    1362:	30 f0       	brcs	.+12     	; 0x1370 <__divsf3+0x18>
    1364:	21 f4       	brne	.+8      	; 0x136e <__divsf3+0x16>
    1366:	5f 3f       	cpi	r21, 0xFF	; 255
    1368:	19 f0       	breq	.+6      	; 0x1370 <__divsf3+0x18>
    136a:	f0 c0       	rjmp	.+480    	; 0x154c <__fp_inf>
    136c:	51 11       	cpse	r21, r1
    136e:	39 c1       	rjmp	.+626    	; 0x15e2 <__fp_szero>
    1370:	f3 c0       	rjmp	.+486    	; 0x1558 <__fp_nan>

00001372 <__divsf3x>:
    1372:	14 d1       	rcall	.+552    	; 0x159c <__fp_split3>
    1374:	98 f3       	brcs	.-26     	; 0x135c <__divsf3+0x4>

00001376 <__divsf3_pse>:
    1376:	99 23       	and	r25, r25
    1378:	c9 f3       	breq	.-14     	; 0x136c <__divsf3+0x14>
    137a:	55 23       	and	r21, r21
    137c:	b1 f3       	breq	.-20     	; 0x136a <__divsf3+0x12>
    137e:	95 1b       	sub	r25, r21
    1380:	55 0b       	sbc	r21, r21
    1382:	bb 27       	eor	r27, r27
    1384:	aa 27       	eor	r26, r26
    1386:	62 17       	cp	r22, r18
    1388:	73 07       	cpc	r23, r19
    138a:	84 07       	cpc	r24, r20
    138c:	38 f0       	brcs	.+14     	; 0x139c <__divsf3_pse+0x26>
    138e:	9f 5f       	subi	r25, 0xFF	; 255
    1390:	5f 4f       	sbci	r21, 0xFF	; 255
    1392:	22 0f       	add	r18, r18
    1394:	33 1f       	adc	r19, r19
    1396:	44 1f       	adc	r20, r20
    1398:	aa 1f       	adc	r26, r26
    139a:	a9 f3       	breq	.-22     	; 0x1386 <__divsf3_pse+0x10>
    139c:	33 d0       	rcall	.+102    	; 0x1404 <__divsf3_pse+0x8e>
    139e:	0e 2e       	mov	r0, r30
    13a0:	3a f0       	brmi	.+14     	; 0x13b0 <__divsf3_pse+0x3a>
    13a2:	e0 e8       	ldi	r30, 0x80	; 128
    13a4:	30 d0       	rcall	.+96     	; 0x1406 <__divsf3_pse+0x90>
    13a6:	91 50       	subi	r25, 0x01	; 1
    13a8:	50 40       	sbci	r21, 0x00	; 0
    13aa:	e6 95       	lsr	r30
    13ac:	00 1c       	adc	r0, r0
    13ae:	ca f7       	brpl	.-14     	; 0x13a2 <__divsf3_pse+0x2c>
    13b0:	29 d0       	rcall	.+82     	; 0x1404 <__divsf3_pse+0x8e>
    13b2:	fe 2f       	mov	r31, r30
    13b4:	27 d0       	rcall	.+78     	; 0x1404 <__divsf3_pse+0x8e>
    13b6:	66 0f       	add	r22, r22
    13b8:	77 1f       	adc	r23, r23
    13ba:	88 1f       	adc	r24, r24
    13bc:	bb 1f       	adc	r27, r27
    13be:	26 17       	cp	r18, r22
    13c0:	37 07       	cpc	r19, r23
    13c2:	48 07       	cpc	r20, r24
    13c4:	ab 07       	cpc	r26, r27
    13c6:	b0 e8       	ldi	r27, 0x80	; 128
    13c8:	09 f0       	breq	.+2      	; 0x13cc <__divsf3_pse+0x56>
    13ca:	bb 0b       	sbc	r27, r27
    13cc:	80 2d       	mov	r24, r0
    13ce:	bf 01       	movw	r22, r30
    13d0:	ff 27       	eor	r31, r31
    13d2:	93 58       	subi	r25, 0x83	; 131
    13d4:	5f 4f       	sbci	r21, 0xFF	; 255
    13d6:	2a f0       	brmi	.+10     	; 0x13e2 <__divsf3_pse+0x6c>
    13d8:	9e 3f       	cpi	r25, 0xFE	; 254
    13da:	51 05       	cpc	r21, r1
    13dc:	68 f0       	brcs	.+26     	; 0x13f8 <__divsf3_pse+0x82>
    13de:	b6 c0       	rjmp	.+364    	; 0x154c <__fp_inf>
    13e0:	00 c1       	rjmp	.+512    	; 0x15e2 <__fp_szero>
    13e2:	5f 3f       	cpi	r21, 0xFF	; 255
    13e4:	ec f3       	brlt	.-6      	; 0x13e0 <__divsf3_pse+0x6a>
    13e6:	98 3e       	cpi	r25, 0xE8	; 232
    13e8:	dc f3       	brlt	.-10     	; 0x13e0 <__divsf3_pse+0x6a>
    13ea:	86 95       	lsr	r24
    13ec:	77 95       	ror	r23
    13ee:	67 95       	ror	r22
    13f0:	b7 95       	ror	r27
    13f2:	f7 95       	ror	r31
    13f4:	9f 5f       	subi	r25, 0xFF	; 255
    13f6:	c9 f7       	brne	.-14     	; 0x13ea <__divsf3_pse+0x74>
    13f8:	88 0f       	add	r24, r24
    13fa:	91 1d       	adc	r25, r1
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	97 f9       	bld	r25, 7
    1402:	08 95       	ret
    1404:	e1 e0       	ldi	r30, 0x01	; 1
    1406:	66 0f       	add	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	bb 1f       	adc	r27, r27
    140e:	62 17       	cp	r22, r18
    1410:	73 07       	cpc	r23, r19
    1412:	84 07       	cpc	r24, r20
    1414:	ba 07       	cpc	r27, r26
    1416:	20 f0       	brcs	.+8      	; 0x1420 <__divsf3_pse+0xaa>
    1418:	62 1b       	sub	r22, r18
    141a:	73 0b       	sbc	r23, r19
    141c:	84 0b       	sbc	r24, r20
    141e:	ba 0b       	sbc	r27, r26
    1420:	ee 1f       	adc	r30, r30
    1422:	88 f7       	brcc	.-30     	; 0x1406 <__divsf3_pse+0x90>
    1424:	e0 95       	com	r30
    1426:	08 95       	ret

00001428 <__fixsfsi>:
    1428:	04 d0       	rcall	.+8      	; 0x1432 <__fixunssfsi>
    142a:	68 94       	set
    142c:	b1 11       	cpse	r27, r1
    142e:	d9 c0       	rjmp	.+434    	; 0x15e2 <__fp_szero>
    1430:	08 95       	ret

00001432 <__fixunssfsi>:
    1432:	bc d0       	rcall	.+376    	; 0x15ac <__fp_splitA>
    1434:	88 f0       	brcs	.+34     	; 0x1458 <__fixunssfsi+0x26>
    1436:	9f 57       	subi	r25, 0x7F	; 127
    1438:	90 f0       	brcs	.+36     	; 0x145e <__fixunssfsi+0x2c>
    143a:	b9 2f       	mov	r27, r25
    143c:	99 27       	eor	r25, r25
    143e:	b7 51       	subi	r27, 0x17	; 23
    1440:	a0 f0       	brcs	.+40     	; 0x146a <__fixunssfsi+0x38>
    1442:	d1 f0       	breq	.+52     	; 0x1478 <__fixunssfsi+0x46>
    1444:	66 0f       	add	r22, r22
    1446:	77 1f       	adc	r23, r23
    1448:	88 1f       	adc	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	1a f0       	brmi	.+6      	; 0x1454 <__fixunssfsi+0x22>
    144e:	ba 95       	dec	r27
    1450:	c9 f7       	brne	.-14     	; 0x1444 <__fixunssfsi+0x12>
    1452:	12 c0       	rjmp	.+36     	; 0x1478 <__fixunssfsi+0x46>
    1454:	b1 30       	cpi	r27, 0x01	; 1
    1456:	81 f0       	breq	.+32     	; 0x1478 <__fixunssfsi+0x46>
    1458:	c3 d0       	rcall	.+390    	; 0x15e0 <__fp_zero>
    145a:	b1 e0       	ldi	r27, 0x01	; 1
    145c:	08 95       	ret
    145e:	c0 c0       	rjmp	.+384    	; 0x15e0 <__fp_zero>
    1460:	67 2f       	mov	r22, r23
    1462:	78 2f       	mov	r23, r24
    1464:	88 27       	eor	r24, r24
    1466:	b8 5f       	subi	r27, 0xF8	; 248
    1468:	39 f0       	breq	.+14     	; 0x1478 <__fixunssfsi+0x46>
    146a:	b9 3f       	cpi	r27, 0xF9	; 249
    146c:	cc f3       	brlt	.-14     	; 0x1460 <__fixunssfsi+0x2e>
    146e:	86 95       	lsr	r24
    1470:	77 95       	ror	r23
    1472:	67 95       	ror	r22
    1474:	b3 95       	inc	r27
    1476:	d9 f7       	brne	.-10     	; 0x146e <__fixunssfsi+0x3c>
    1478:	3e f4       	brtc	.+14     	; 0x1488 <__fixunssfsi+0x56>
    147a:	90 95       	com	r25
    147c:	80 95       	com	r24
    147e:	70 95       	com	r23
    1480:	61 95       	neg	r22
    1482:	7f 4f       	sbci	r23, 0xFF	; 255
    1484:	8f 4f       	sbci	r24, 0xFF	; 255
    1486:	9f 4f       	sbci	r25, 0xFF	; 255
    1488:	08 95       	ret

0000148a <__floatunsisf>:
    148a:	e8 94       	clt
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <__floatsisf+0x12>

0000148e <__floatsisf>:
    148e:	97 fb       	bst	r25, 7
    1490:	3e f4       	brtc	.+14     	; 0x14a0 <__floatsisf+0x12>
    1492:	90 95       	com	r25
    1494:	80 95       	com	r24
    1496:	70 95       	com	r23
    1498:	61 95       	neg	r22
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	8f 4f       	sbci	r24, 0xFF	; 255
    149e:	9f 4f       	sbci	r25, 0xFF	; 255
    14a0:	99 23       	and	r25, r25
    14a2:	a9 f0       	breq	.+42     	; 0x14ce <__floatsisf+0x40>
    14a4:	f9 2f       	mov	r31, r25
    14a6:	96 e9       	ldi	r25, 0x96	; 150
    14a8:	bb 27       	eor	r27, r27
    14aa:	93 95       	inc	r25
    14ac:	f6 95       	lsr	r31
    14ae:	87 95       	ror	r24
    14b0:	77 95       	ror	r23
    14b2:	67 95       	ror	r22
    14b4:	b7 95       	ror	r27
    14b6:	f1 11       	cpse	r31, r1
    14b8:	f8 cf       	rjmp	.-16     	; 0x14aa <__floatsisf+0x1c>
    14ba:	fa f4       	brpl	.+62     	; 0x14fa <__floatsisf+0x6c>
    14bc:	bb 0f       	add	r27, r27
    14be:	11 f4       	brne	.+4      	; 0x14c4 <__floatsisf+0x36>
    14c0:	60 ff       	sbrs	r22, 0
    14c2:	1b c0       	rjmp	.+54     	; 0x14fa <__floatsisf+0x6c>
    14c4:	6f 5f       	subi	r22, 0xFF	; 255
    14c6:	7f 4f       	sbci	r23, 0xFF	; 255
    14c8:	8f 4f       	sbci	r24, 0xFF	; 255
    14ca:	9f 4f       	sbci	r25, 0xFF	; 255
    14cc:	16 c0       	rjmp	.+44     	; 0x14fa <__floatsisf+0x6c>
    14ce:	88 23       	and	r24, r24
    14d0:	11 f0       	breq	.+4      	; 0x14d6 <__floatsisf+0x48>
    14d2:	96 e9       	ldi	r25, 0x96	; 150
    14d4:	11 c0       	rjmp	.+34     	; 0x14f8 <__floatsisf+0x6a>
    14d6:	77 23       	and	r23, r23
    14d8:	21 f0       	breq	.+8      	; 0x14e2 <__floatsisf+0x54>
    14da:	9e e8       	ldi	r25, 0x8E	; 142
    14dc:	87 2f       	mov	r24, r23
    14de:	76 2f       	mov	r23, r22
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <__floatsisf+0x5e>
    14e2:	66 23       	and	r22, r22
    14e4:	71 f0       	breq	.+28     	; 0x1502 <__floatsisf+0x74>
    14e6:	96 e8       	ldi	r25, 0x86	; 134
    14e8:	86 2f       	mov	r24, r22
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	2a f0       	brmi	.+10     	; 0x14fa <__floatsisf+0x6c>
    14f0:	9a 95       	dec	r25
    14f2:	66 0f       	add	r22, r22
    14f4:	77 1f       	adc	r23, r23
    14f6:	88 1f       	adc	r24, r24
    14f8:	da f7       	brpl	.-10     	; 0x14f0 <__floatsisf+0x62>
    14fa:	88 0f       	add	r24, r24
    14fc:	96 95       	lsr	r25
    14fe:	87 95       	ror	r24
    1500:	97 f9       	bld	r25, 7
    1502:	08 95       	ret

00001504 <__fp_cmp>:
    1504:	99 0f       	add	r25, r25
    1506:	00 08       	sbc	r0, r0
    1508:	55 0f       	add	r21, r21
    150a:	aa 0b       	sbc	r26, r26
    150c:	e0 e8       	ldi	r30, 0x80	; 128
    150e:	fe ef       	ldi	r31, 0xFE	; 254
    1510:	16 16       	cp	r1, r22
    1512:	17 06       	cpc	r1, r23
    1514:	e8 07       	cpc	r30, r24
    1516:	f9 07       	cpc	r31, r25
    1518:	c0 f0       	brcs	.+48     	; 0x154a <__fp_cmp+0x46>
    151a:	12 16       	cp	r1, r18
    151c:	13 06       	cpc	r1, r19
    151e:	e4 07       	cpc	r30, r20
    1520:	f5 07       	cpc	r31, r21
    1522:	98 f0       	brcs	.+38     	; 0x154a <__fp_cmp+0x46>
    1524:	62 1b       	sub	r22, r18
    1526:	73 0b       	sbc	r23, r19
    1528:	84 0b       	sbc	r24, r20
    152a:	95 0b       	sbc	r25, r21
    152c:	39 f4       	brne	.+14     	; 0x153c <__fp_cmp+0x38>
    152e:	0a 26       	eor	r0, r26
    1530:	61 f0       	breq	.+24     	; 0x154a <__fp_cmp+0x46>
    1532:	23 2b       	or	r18, r19
    1534:	24 2b       	or	r18, r20
    1536:	25 2b       	or	r18, r21
    1538:	21 f4       	brne	.+8      	; 0x1542 <__fp_cmp+0x3e>
    153a:	08 95       	ret
    153c:	0a 26       	eor	r0, r26
    153e:	09 f4       	brne	.+2      	; 0x1542 <__fp_cmp+0x3e>
    1540:	a1 40       	sbci	r26, 0x01	; 1
    1542:	a6 95       	lsr	r26
    1544:	8f ef       	ldi	r24, 0xFF	; 255
    1546:	81 1d       	adc	r24, r1
    1548:	81 1d       	adc	r24, r1
    154a:	08 95       	ret

0000154c <__fp_inf>:
    154c:	97 f9       	bld	r25, 7
    154e:	9f 67       	ori	r25, 0x7F	; 127
    1550:	80 e8       	ldi	r24, 0x80	; 128
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	08 95       	ret

00001558 <__fp_nan>:
    1558:	9f ef       	ldi	r25, 0xFF	; 255
    155a:	80 ec       	ldi	r24, 0xC0	; 192
    155c:	08 95       	ret

0000155e <__fp_pscA>:
    155e:	00 24       	eor	r0, r0
    1560:	0a 94       	dec	r0
    1562:	16 16       	cp	r1, r22
    1564:	17 06       	cpc	r1, r23
    1566:	18 06       	cpc	r1, r24
    1568:	09 06       	cpc	r0, r25
    156a:	08 95       	ret

0000156c <__fp_pscB>:
    156c:	00 24       	eor	r0, r0
    156e:	0a 94       	dec	r0
    1570:	12 16       	cp	r1, r18
    1572:	13 06       	cpc	r1, r19
    1574:	14 06       	cpc	r1, r20
    1576:	05 06       	cpc	r0, r21
    1578:	08 95       	ret

0000157a <__fp_round>:
    157a:	09 2e       	mov	r0, r25
    157c:	03 94       	inc	r0
    157e:	00 0c       	add	r0, r0
    1580:	11 f4       	brne	.+4      	; 0x1586 <__fp_round+0xc>
    1582:	88 23       	and	r24, r24
    1584:	52 f0       	brmi	.+20     	; 0x159a <__fp_round+0x20>
    1586:	bb 0f       	add	r27, r27
    1588:	40 f4       	brcc	.+16     	; 0x159a <__fp_round+0x20>
    158a:	bf 2b       	or	r27, r31
    158c:	11 f4       	brne	.+4      	; 0x1592 <__fp_round+0x18>
    158e:	60 ff       	sbrs	r22, 0
    1590:	04 c0       	rjmp	.+8      	; 0x159a <__fp_round+0x20>
    1592:	6f 5f       	subi	r22, 0xFF	; 255
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	8f 4f       	sbci	r24, 0xFF	; 255
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	08 95       	ret

0000159c <__fp_split3>:
    159c:	57 fd       	sbrc	r21, 7
    159e:	90 58       	subi	r25, 0x80	; 128
    15a0:	44 0f       	add	r20, r20
    15a2:	55 1f       	adc	r21, r21
    15a4:	59 f0       	breq	.+22     	; 0x15bc <__fp_splitA+0x10>
    15a6:	5f 3f       	cpi	r21, 0xFF	; 255
    15a8:	71 f0       	breq	.+28     	; 0x15c6 <__fp_splitA+0x1a>
    15aa:	47 95       	ror	r20

000015ac <__fp_splitA>:
    15ac:	88 0f       	add	r24, r24
    15ae:	97 fb       	bst	r25, 7
    15b0:	99 1f       	adc	r25, r25
    15b2:	61 f0       	breq	.+24     	; 0x15cc <__fp_splitA+0x20>
    15b4:	9f 3f       	cpi	r25, 0xFF	; 255
    15b6:	79 f0       	breq	.+30     	; 0x15d6 <__fp_splitA+0x2a>
    15b8:	87 95       	ror	r24
    15ba:	08 95       	ret
    15bc:	12 16       	cp	r1, r18
    15be:	13 06       	cpc	r1, r19
    15c0:	14 06       	cpc	r1, r20
    15c2:	55 1f       	adc	r21, r21
    15c4:	f2 cf       	rjmp	.-28     	; 0x15aa <__fp_split3+0xe>
    15c6:	46 95       	lsr	r20
    15c8:	f1 df       	rcall	.-30     	; 0x15ac <__fp_splitA>
    15ca:	08 c0       	rjmp	.+16     	; 0x15dc <__fp_splitA+0x30>
    15cc:	16 16       	cp	r1, r22
    15ce:	17 06       	cpc	r1, r23
    15d0:	18 06       	cpc	r1, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	f1 cf       	rjmp	.-30     	; 0x15b8 <__fp_splitA+0xc>
    15d6:	86 95       	lsr	r24
    15d8:	71 05       	cpc	r23, r1
    15da:	61 05       	cpc	r22, r1
    15dc:	08 94       	sec
    15de:	08 95       	ret

000015e0 <__fp_zero>:
    15e0:	e8 94       	clt

000015e2 <__fp_szero>:
    15e2:	bb 27       	eor	r27, r27
    15e4:	66 27       	eor	r22, r22
    15e6:	77 27       	eor	r23, r23
    15e8:	cb 01       	movw	r24, r22
    15ea:	97 f9       	bld	r25, 7
    15ec:	08 95       	ret

000015ee <__gesf2>:
    15ee:	8a df       	rcall	.-236    	; 0x1504 <__fp_cmp>
    15f0:	08 f4       	brcc	.+2      	; 0x15f4 <__gesf2+0x6>
    15f2:	8f ef       	ldi	r24, 0xFF	; 255
    15f4:	08 95       	ret

000015f6 <__mulsf3>:
    15f6:	0b d0       	rcall	.+22     	; 0x160e <__mulsf3x>
    15f8:	c0 cf       	rjmp	.-128    	; 0x157a <__fp_round>
    15fa:	b1 df       	rcall	.-158    	; 0x155e <__fp_pscA>
    15fc:	28 f0       	brcs	.+10     	; 0x1608 <__mulsf3+0x12>
    15fe:	b6 df       	rcall	.-148    	; 0x156c <__fp_pscB>
    1600:	18 f0       	brcs	.+6      	; 0x1608 <__mulsf3+0x12>
    1602:	95 23       	and	r25, r21
    1604:	09 f0       	breq	.+2      	; 0x1608 <__mulsf3+0x12>
    1606:	a2 cf       	rjmp	.-188    	; 0x154c <__fp_inf>
    1608:	a7 cf       	rjmp	.-178    	; 0x1558 <__fp_nan>
    160a:	11 24       	eor	r1, r1
    160c:	ea cf       	rjmp	.-44     	; 0x15e2 <__fp_szero>

0000160e <__mulsf3x>:
    160e:	c6 df       	rcall	.-116    	; 0x159c <__fp_split3>
    1610:	a0 f3       	brcs	.-24     	; 0x15fa <__mulsf3+0x4>

00001612 <__mulsf3_pse>:
    1612:	95 9f       	mul	r25, r21
    1614:	d1 f3       	breq	.-12     	; 0x160a <__mulsf3+0x14>
    1616:	95 0f       	add	r25, r21
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	55 1f       	adc	r21, r21
    161c:	62 9f       	mul	r22, r18
    161e:	f0 01       	movw	r30, r0
    1620:	72 9f       	mul	r23, r18
    1622:	bb 27       	eor	r27, r27
    1624:	f0 0d       	add	r31, r0
    1626:	b1 1d       	adc	r27, r1
    1628:	63 9f       	mul	r22, r19
    162a:	aa 27       	eor	r26, r26
    162c:	f0 0d       	add	r31, r0
    162e:	b1 1d       	adc	r27, r1
    1630:	aa 1f       	adc	r26, r26
    1632:	64 9f       	mul	r22, r20
    1634:	66 27       	eor	r22, r22
    1636:	b0 0d       	add	r27, r0
    1638:	a1 1d       	adc	r26, r1
    163a:	66 1f       	adc	r22, r22
    163c:	82 9f       	mul	r24, r18
    163e:	22 27       	eor	r18, r18
    1640:	b0 0d       	add	r27, r0
    1642:	a1 1d       	adc	r26, r1
    1644:	62 1f       	adc	r22, r18
    1646:	73 9f       	mul	r23, r19
    1648:	b0 0d       	add	r27, r0
    164a:	a1 1d       	adc	r26, r1
    164c:	62 1f       	adc	r22, r18
    164e:	83 9f       	mul	r24, r19
    1650:	a0 0d       	add	r26, r0
    1652:	61 1d       	adc	r22, r1
    1654:	22 1f       	adc	r18, r18
    1656:	74 9f       	mul	r23, r20
    1658:	33 27       	eor	r19, r19
    165a:	a0 0d       	add	r26, r0
    165c:	61 1d       	adc	r22, r1
    165e:	23 1f       	adc	r18, r19
    1660:	84 9f       	mul	r24, r20
    1662:	60 0d       	add	r22, r0
    1664:	21 1d       	adc	r18, r1
    1666:	82 2f       	mov	r24, r18
    1668:	76 2f       	mov	r23, r22
    166a:	6a 2f       	mov	r22, r26
    166c:	11 24       	eor	r1, r1
    166e:	9f 57       	subi	r25, 0x7F	; 127
    1670:	50 40       	sbci	r21, 0x00	; 0
    1672:	8a f0       	brmi	.+34     	; 0x1696 <__mulsf3_pse+0x84>
    1674:	e1 f0       	breq	.+56     	; 0x16ae <__mulsf3_pse+0x9c>
    1676:	88 23       	and	r24, r24
    1678:	4a f0       	brmi	.+18     	; 0x168c <__mulsf3_pse+0x7a>
    167a:	ee 0f       	add	r30, r30
    167c:	ff 1f       	adc	r31, r31
    167e:	bb 1f       	adc	r27, r27
    1680:	66 1f       	adc	r22, r22
    1682:	77 1f       	adc	r23, r23
    1684:	88 1f       	adc	r24, r24
    1686:	91 50       	subi	r25, 0x01	; 1
    1688:	50 40       	sbci	r21, 0x00	; 0
    168a:	a9 f7       	brne	.-22     	; 0x1676 <__mulsf3_pse+0x64>
    168c:	9e 3f       	cpi	r25, 0xFE	; 254
    168e:	51 05       	cpc	r21, r1
    1690:	70 f0       	brcs	.+28     	; 0x16ae <__mulsf3_pse+0x9c>
    1692:	5c cf       	rjmp	.-328    	; 0x154c <__fp_inf>
    1694:	a6 cf       	rjmp	.-180    	; 0x15e2 <__fp_szero>
    1696:	5f 3f       	cpi	r21, 0xFF	; 255
    1698:	ec f3       	brlt	.-6      	; 0x1694 <__mulsf3_pse+0x82>
    169a:	98 3e       	cpi	r25, 0xE8	; 232
    169c:	dc f3       	brlt	.-10     	; 0x1694 <__mulsf3_pse+0x82>
    169e:	86 95       	lsr	r24
    16a0:	77 95       	ror	r23
    16a2:	67 95       	ror	r22
    16a4:	b7 95       	ror	r27
    16a6:	f7 95       	ror	r31
    16a8:	e7 95       	ror	r30
    16aa:	9f 5f       	subi	r25, 0xFF	; 255
    16ac:	c1 f7       	brne	.-16     	; 0x169e <__mulsf3_pse+0x8c>
    16ae:	fe 2b       	or	r31, r30
    16b0:	88 0f       	add	r24, r24
    16b2:	91 1d       	adc	r25, r1
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	97 f9       	bld	r25, 7
    16ba:	08 95       	ret

000016bc <__adddi3_s8>:
    16bc:	00 24       	eor	r0, r0
    16be:	a7 fd       	sbrc	r26, 7
    16c0:	00 94       	com	r0
    16c2:	2a 0f       	add	r18, r26
    16c4:	30 1d       	adc	r19, r0
    16c6:	40 1d       	adc	r20, r0
    16c8:	50 1d       	adc	r21, r0
    16ca:	60 1d       	adc	r22, r0
    16cc:	70 1d       	adc	r23, r0
    16ce:	80 1d       	adc	r24, r0
    16d0:	90 1d       	adc	r25, r0
    16d2:	08 95       	ret

000016d4 <dtostrf>:
    16d4:	ef 92       	push	r14
    16d6:	0f 93       	push	r16
    16d8:	1f 93       	push	r17
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	e8 01       	movw	r28, r16
    16e0:	47 fd       	sbrc	r20, 7
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <dtostrf+0x14>
    16e4:	34 e0       	ldi	r19, 0x04	; 4
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <dtostrf+0x16>
    16e8:	34 e1       	ldi	r19, 0x14	; 20
    16ea:	04 2e       	mov	r0, r20
    16ec:	00 0c       	add	r0, r0
    16ee:	55 0b       	sbc	r21, r21
    16f0:	57 ff       	sbrs	r21, 7
    16f2:	03 c0       	rjmp	.+6      	; 0x16fa <dtostrf+0x26>
    16f4:	51 95       	neg	r21
    16f6:	41 95       	neg	r20
    16f8:	51 09       	sbc	r21, r1
    16fa:	e3 2e       	mov	r14, r19
    16fc:	02 2f       	mov	r16, r18
    16fe:	24 2f       	mov	r18, r20
    1700:	ae 01       	movw	r20, r28
    1702:	66 d0       	rcall	.+204    	; 0x17d0 <dtoa_prf>
    1704:	ce 01       	movw	r24, r28
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ef 90       	pop	r14
    1710:	08 95       	ret

00001712 <atoi>:
    1712:	fc 01       	movw	r30, r24
    1714:	88 27       	eor	r24, r24
    1716:	99 27       	eor	r25, r25
    1718:	e8 94       	clt
    171a:	21 91       	ld	r18, Z+
    171c:	20 32       	cpi	r18, 0x20	; 32
    171e:	e9 f3       	breq	.-6      	; 0x171a <atoi+0x8>
    1720:	29 30       	cpi	r18, 0x09	; 9
    1722:	10 f0       	brcs	.+4      	; 0x1728 <atoi+0x16>
    1724:	2e 30       	cpi	r18, 0x0E	; 14
    1726:	c8 f3       	brcs	.-14     	; 0x171a <atoi+0x8>
    1728:	2b 32       	cpi	r18, 0x2B	; 43
    172a:	39 f0       	breq	.+14     	; 0x173a <atoi+0x28>
    172c:	2d 32       	cpi	r18, 0x2D	; 45
    172e:	31 f4       	brne	.+12     	; 0x173c <atoi+0x2a>
    1730:	68 94       	set
    1732:	03 c0       	rjmp	.+6      	; 0x173a <atoi+0x28>
    1734:	45 d0       	rcall	.+138    	; 0x17c0 <__mulhi_const_10>
    1736:	82 0f       	add	r24, r18
    1738:	91 1d       	adc	r25, r1
    173a:	21 91       	ld	r18, Z+
    173c:	20 53       	subi	r18, 0x30	; 48
    173e:	2a 30       	cpi	r18, 0x0A	; 10
    1740:	c8 f3       	brcs	.-14     	; 0x1734 <atoi+0x22>
    1742:	1e f4       	brtc	.+6      	; 0x174a <atoi+0x38>
    1744:	90 95       	com	r25
    1746:	81 95       	neg	r24
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	08 95       	ret

0000174c <strtok>:
    174c:	4e e2       	ldi	r20, 0x2E	; 46
    174e:	52 e0       	ldi	r21, 0x02	; 2
    1750:	10 c0       	rjmp	.+32     	; 0x1772 <strtok_r>

00001752 <strcmp>:
    1752:	fb 01       	movw	r30, r22
    1754:	dc 01       	movw	r26, r24
    1756:	8d 91       	ld	r24, X+
    1758:	01 90       	ld	r0, Z+
    175a:	80 19       	sub	r24, r0
    175c:	01 10       	cpse	r0, r1
    175e:	d9 f3       	breq	.-10     	; 0x1756 <strcmp+0x4>
    1760:	99 0b       	sbc	r25, r25
    1762:	08 95       	ret

00001764 <strcpy>:
    1764:	fb 01       	movw	r30, r22
    1766:	dc 01       	movw	r26, r24
    1768:	01 90       	ld	r0, Z+
    176a:	0d 92       	st	X+, r0
    176c:	00 20       	and	r0, r0
    176e:	e1 f7       	brne	.-8      	; 0x1768 <strcpy+0x4>
    1770:	08 95       	ret

00001772 <strtok_r>:
    1772:	fa 01       	movw	r30, r20
    1774:	a1 91       	ld	r26, Z+
    1776:	b0 81       	ld	r27, Z
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	19 f4       	brne	.+6      	; 0x1782 <strtok_r+0x10>
    177c:	10 97       	sbiw	r26, 0x00	; 0
    177e:	e1 f0       	breq	.+56     	; 0x17b8 <strtok_r+0x46>
    1780:	cd 01       	movw	r24, r26
    1782:	dc 01       	movw	r26, r24
    1784:	cd 01       	movw	r24, r26
    1786:	0d 90       	ld	r0, X+
    1788:	00 20       	and	r0, r0
    178a:	11 f4       	brne	.+4      	; 0x1790 <strtok_r+0x1e>
    178c:	c0 01       	movw	r24, r0
    178e:	13 c0       	rjmp	.+38     	; 0x17b6 <strtok_r+0x44>
    1790:	fb 01       	movw	r30, r22
    1792:	21 91       	ld	r18, Z+
    1794:	22 23       	and	r18, r18
    1796:	19 f0       	breq	.+6      	; 0x179e <strtok_r+0x2c>
    1798:	20 15       	cp	r18, r0
    179a:	d9 f7       	brne	.-10     	; 0x1792 <strtok_r+0x20>
    179c:	f3 cf       	rjmp	.-26     	; 0x1784 <strtok_r+0x12>
    179e:	fb 01       	movw	r30, r22
    17a0:	21 91       	ld	r18, Z+
    17a2:	20 15       	cp	r18, r0
    17a4:	19 f4       	brne	.+6      	; 0x17ac <strtok_r+0x3a>
    17a6:	1e 92       	st	-X, r1
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	06 c0       	rjmp	.+12     	; 0x17b8 <strtok_r+0x46>
    17ac:	22 23       	and	r18, r18
    17ae:	c1 f7       	brne	.-16     	; 0x17a0 <strtok_r+0x2e>
    17b0:	0d 90       	ld	r0, X+
    17b2:	00 20       	and	r0, r0
    17b4:	a1 f7       	brne	.-24     	; 0x179e <strtok_r+0x2c>
    17b6:	d0 01       	movw	r26, r0
    17b8:	fa 01       	movw	r30, r20
    17ba:	a1 93       	st	Z+, r26
    17bc:	b0 83       	st	Z, r27
    17be:	08 95       	ret

000017c0 <__mulhi_const_10>:
    17c0:	7a e0       	ldi	r23, 0x0A	; 10
    17c2:	97 9f       	mul	r25, r23
    17c4:	90 2d       	mov	r25, r0
    17c6:	87 9f       	mul	r24, r23
    17c8:	80 2d       	mov	r24, r0
    17ca:	91 0d       	add	r25, r1
    17cc:	11 24       	eor	r1, r1
    17ce:	08 95       	ret

000017d0 <dtoa_prf>:
    17d0:	8f 92       	push	r8
    17d2:	9f 92       	push	r9
    17d4:	af 92       	push	r10
    17d6:	bf 92       	push	r11
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	29 97       	sbiw	r28, 0x09	; 9
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	6a 01       	movw	r12, r20
    17fa:	12 2f       	mov	r17, r18
    17fc:	b0 2e       	mov	r11, r16
    17fe:	2b e3       	ldi	r18, 0x3B	; 59
    1800:	20 17       	cp	r18, r16
    1802:	20 f0       	brcs	.+8      	; 0x180c <dtoa_prf+0x3c>
    1804:	ff 24       	eor	r15, r15
    1806:	f3 94       	inc	r15
    1808:	f0 0e       	add	r15, r16
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <dtoa_prf+0x40>
    180c:	2c e3       	ldi	r18, 0x3C	; 60
    180e:	f2 2e       	mov	r15, r18
    1810:	0f 2d       	mov	r16, r15
    1812:	27 e0       	ldi	r18, 0x07	; 7
    1814:	ae 01       	movw	r20, r28
    1816:	4f 5f       	subi	r20, 0xFF	; 255
    1818:	5f 4f       	sbci	r21, 0xFF	; 255
    181a:	50 d1       	rcall	.+672    	; 0x1abc <__ftoa_engine>
    181c:	bc 01       	movw	r22, r24
    181e:	49 81       	ldd	r20, Y+1	; 0x01
    1820:	84 2f       	mov	r24, r20
    1822:	89 70       	andi	r24, 0x09	; 9
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	31 f0       	breq	.+12     	; 0x1834 <dtoa_prf+0x64>
    1828:	e1 fc       	sbrc	r14, 1
    182a:	06 c0       	rjmp	.+12     	; 0x1838 <dtoa_prf+0x68>
    182c:	e0 fe       	sbrs	r14, 0
    182e:	06 c0       	rjmp	.+12     	; 0x183c <dtoa_prf+0x6c>
    1830:	90 e2       	ldi	r25, 0x20	; 32
    1832:	05 c0       	rjmp	.+10     	; 0x183e <dtoa_prf+0x6e>
    1834:	9d e2       	ldi	r25, 0x2D	; 45
    1836:	03 c0       	rjmp	.+6      	; 0x183e <dtoa_prf+0x6e>
    1838:	9b e2       	ldi	r25, 0x2B	; 43
    183a:	01 c0       	rjmp	.+2      	; 0x183e <dtoa_prf+0x6e>
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	5e 2d       	mov	r21, r14
    1840:	50 71       	andi	r21, 0x10	; 16
    1842:	43 ff       	sbrs	r20, 3
    1844:	3c c0       	rjmp	.+120    	; 0x18be <dtoa_prf+0xee>
    1846:	91 11       	cpse	r25, r1
    1848:	02 c0       	rjmp	.+4      	; 0x184e <dtoa_prf+0x7e>
    184a:	83 e0       	ldi	r24, 0x03	; 3
    184c:	01 c0       	rjmp	.+2      	; 0x1850 <dtoa_prf+0x80>
    184e:	84 e0       	ldi	r24, 0x04	; 4
    1850:	81 17       	cp	r24, r17
    1852:	18 f4       	brcc	.+6      	; 0x185a <dtoa_prf+0x8a>
    1854:	21 2f       	mov	r18, r17
    1856:	28 1b       	sub	r18, r24
    1858:	01 c0       	rjmp	.+2      	; 0x185c <dtoa_prf+0x8c>
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	51 11       	cpse	r21, r1
    185e:	0b c0       	rjmp	.+22     	; 0x1876 <dtoa_prf+0xa6>
    1860:	f6 01       	movw	r30, r12
    1862:	82 2f       	mov	r24, r18
    1864:	30 e2       	ldi	r19, 0x20	; 32
    1866:	88 23       	and	r24, r24
    1868:	19 f0       	breq	.+6      	; 0x1870 <dtoa_prf+0xa0>
    186a:	31 93       	st	Z+, r19
    186c:	81 50       	subi	r24, 0x01	; 1
    186e:	fb cf       	rjmp	.-10     	; 0x1866 <dtoa_prf+0x96>
    1870:	c2 0e       	add	r12, r18
    1872:	d1 1c       	adc	r13, r1
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	99 23       	and	r25, r25
    1878:	29 f0       	breq	.+10     	; 0x1884 <dtoa_prf+0xb4>
    187a:	d6 01       	movw	r26, r12
    187c:	9c 93       	st	X, r25
    187e:	f6 01       	movw	r30, r12
    1880:	31 96       	adiw	r30, 0x01	; 1
    1882:	6f 01       	movw	r12, r30
    1884:	c6 01       	movw	r24, r12
    1886:	03 96       	adiw	r24, 0x03	; 3
    1888:	e2 fe       	sbrs	r14, 2
    188a:	0a c0       	rjmp	.+20     	; 0x18a0 <dtoa_prf+0xd0>
    188c:	3e e4       	ldi	r19, 0x4E	; 78
    188e:	d6 01       	movw	r26, r12
    1890:	3c 93       	st	X, r19
    1892:	41 e4       	ldi	r20, 0x41	; 65
    1894:	11 96       	adiw	r26, 0x01	; 1
    1896:	4c 93       	st	X, r20
    1898:	11 97       	sbiw	r26, 0x01	; 1
    189a:	12 96       	adiw	r26, 0x02	; 2
    189c:	3c 93       	st	X, r19
    189e:	06 c0       	rjmp	.+12     	; 0x18ac <dtoa_prf+0xdc>
    18a0:	3e e6       	ldi	r19, 0x6E	; 110
    18a2:	f6 01       	movw	r30, r12
    18a4:	30 83       	st	Z, r19
    18a6:	41 e6       	ldi	r20, 0x61	; 97
    18a8:	41 83       	std	Z+1, r20	; 0x01
    18aa:	32 83       	std	Z+2, r19	; 0x02
    18ac:	fc 01       	movw	r30, r24
    18ae:	32 2f       	mov	r19, r18
    18b0:	40 e2       	ldi	r20, 0x20	; 32
    18b2:	33 23       	and	r19, r19
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <dtoa_prf+0xe8>
    18b6:	42 c0       	rjmp	.+132    	; 0x193c <dtoa_prf+0x16c>
    18b8:	41 93       	st	Z+, r20
    18ba:	31 50       	subi	r19, 0x01	; 1
    18bc:	fa cf       	rjmp	.-12     	; 0x18b2 <dtoa_prf+0xe2>
    18be:	42 ff       	sbrs	r20, 2
    18c0:	44 c0       	rjmp	.+136    	; 0x194a <dtoa_prf+0x17a>
    18c2:	91 11       	cpse	r25, r1
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <dtoa_prf+0xfa>
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <dtoa_prf+0xfc>
    18ca:	84 e0       	ldi	r24, 0x04	; 4
    18cc:	81 17       	cp	r24, r17
    18ce:	18 f4       	brcc	.+6      	; 0x18d6 <dtoa_prf+0x106>
    18d0:	21 2f       	mov	r18, r17
    18d2:	28 1b       	sub	r18, r24
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <dtoa_prf+0x108>
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	51 11       	cpse	r21, r1
    18da:	0b c0       	rjmp	.+22     	; 0x18f2 <dtoa_prf+0x122>
    18dc:	f6 01       	movw	r30, r12
    18de:	82 2f       	mov	r24, r18
    18e0:	30 e2       	ldi	r19, 0x20	; 32
    18e2:	88 23       	and	r24, r24
    18e4:	19 f0       	breq	.+6      	; 0x18ec <dtoa_prf+0x11c>
    18e6:	31 93       	st	Z+, r19
    18e8:	81 50       	subi	r24, 0x01	; 1
    18ea:	fb cf       	rjmp	.-10     	; 0x18e2 <dtoa_prf+0x112>
    18ec:	c2 0e       	add	r12, r18
    18ee:	d1 1c       	adc	r13, r1
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	99 23       	and	r25, r25
    18f4:	29 f0       	breq	.+10     	; 0x1900 <dtoa_prf+0x130>
    18f6:	d6 01       	movw	r26, r12
    18f8:	9c 93       	st	X, r25
    18fa:	f6 01       	movw	r30, r12
    18fc:	31 96       	adiw	r30, 0x01	; 1
    18fe:	6f 01       	movw	r12, r30
    1900:	c6 01       	movw	r24, r12
    1902:	03 96       	adiw	r24, 0x03	; 3
    1904:	e2 fe       	sbrs	r14, 2
    1906:	0b c0       	rjmp	.+22     	; 0x191e <dtoa_prf+0x14e>
    1908:	39 e4       	ldi	r19, 0x49	; 73
    190a:	d6 01       	movw	r26, r12
    190c:	3c 93       	st	X, r19
    190e:	3e e4       	ldi	r19, 0x4E	; 78
    1910:	11 96       	adiw	r26, 0x01	; 1
    1912:	3c 93       	st	X, r19
    1914:	11 97       	sbiw	r26, 0x01	; 1
    1916:	36 e4       	ldi	r19, 0x46	; 70
    1918:	12 96       	adiw	r26, 0x02	; 2
    191a:	3c 93       	st	X, r19
    191c:	07 c0       	rjmp	.+14     	; 0x192c <dtoa_prf+0x15c>
    191e:	39 e6       	ldi	r19, 0x69	; 105
    1920:	f6 01       	movw	r30, r12
    1922:	30 83       	st	Z, r19
    1924:	3e e6       	ldi	r19, 0x6E	; 110
    1926:	31 83       	std	Z+1, r19	; 0x01
    1928:	36 e6       	ldi	r19, 0x66	; 102
    192a:	32 83       	std	Z+2, r19	; 0x02
    192c:	fc 01       	movw	r30, r24
    192e:	32 2f       	mov	r19, r18
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	33 23       	and	r19, r19
    1934:	19 f0       	breq	.+6      	; 0x193c <dtoa_prf+0x16c>
    1936:	41 93       	st	Z+, r20
    1938:	31 50       	subi	r19, 0x01	; 1
    193a:	fb cf       	rjmp	.-10     	; 0x1932 <dtoa_prf+0x162>
    193c:	fc 01       	movw	r30, r24
    193e:	e2 0f       	add	r30, r18
    1940:	f1 1d       	adc	r31, r1
    1942:	10 82       	st	Z, r1
    1944:	8e ef       	ldi	r24, 0xFE	; 254
    1946:	9f ef       	ldi	r25, 0xFF	; 255
    1948:	a6 c0       	rjmp	.+332    	; 0x1a96 <dtoa_prf+0x2c6>
    194a:	21 e0       	ldi	r18, 0x01	; 1
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	91 11       	cpse	r25, r1
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <dtoa_prf+0x186>
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	16 16       	cp	r1, r22
    1958:	17 06       	cpc	r1, r23
    195a:	1c f4       	brge	.+6      	; 0x1962 <dtoa_prf+0x192>
    195c:	fb 01       	movw	r30, r22
    195e:	31 96       	adiw	r30, 0x01	; 1
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <dtoa_prf+0x196>
    1962:	e1 e0       	ldi	r30, 0x01	; 1
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	2e 0f       	add	r18, r30
    1968:	3f 1f       	adc	r19, r31
    196a:	bb 20       	and	r11, r11
    196c:	21 f0       	breq	.+8      	; 0x1976 <dtoa_prf+0x1a6>
    196e:	eb 2d       	mov	r30, r11
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	31 96       	adiw	r30, 0x01	; 1
    1974:	02 c0       	rjmp	.+4      	; 0x197a <dtoa_prf+0x1aa>
    1976:	e0 e0       	ldi	r30, 0x00	; 0
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	2e 0f       	add	r18, r30
    197c:	3f 1f       	adc	r19, r31
    197e:	e1 2f       	mov	r30, r17
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	2e 17       	cp	r18, r30
    1984:	3f 07       	cpc	r19, r31
    1986:	1c f4       	brge	.+6      	; 0x198e <dtoa_prf+0x1be>
    1988:	12 1b       	sub	r17, r18
    198a:	21 2f       	mov	r18, r17
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <dtoa_prf+0x1c0>
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	8e 2d       	mov	r24, r14
    1992:	88 71       	andi	r24, 0x18	; 24
    1994:	59 f4       	brne	.+22     	; 0x19ac <dtoa_prf+0x1dc>
    1996:	f6 01       	movw	r30, r12
    1998:	82 2f       	mov	r24, r18
    199a:	30 e2       	ldi	r19, 0x20	; 32
    199c:	88 23       	and	r24, r24
    199e:	19 f0       	breq	.+6      	; 0x19a6 <dtoa_prf+0x1d6>
    19a0:	31 93       	st	Z+, r19
    19a2:	81 50       	subi	r24, 0x01	; 1
    19a4:	fb cf       	rjmp	.-10     	; 0x199c <dtoa_prf+0x1cc>
    19a6:	c2 0e       	add	r12, r18
    19a8:	d1 1c       	adc	r13, r1
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	99 23       	and	r25, r25
    19ae:	29 f0       	breq	.+10     	; 0x19ba <dtoa_prf+0x1ea>
    19b0:	d6 01       	movw	r26, r12
    19b2:	9c 93       	st	X, r25
    19b4:	f6 01       	movw	r30, r12
    19b6:	31 96       	adiw	r30, 0x01	; 1
    19b8:	6f 01       	movw	r12, r30
    19ba:	51 11       	cpse	r21, r1
    19bc:	0b c0       	rjmp	.+22     	; 0x19d4 <dtoa_prf+0x204>
    19be:	f6 01       	movw	r30, r12
    19c0:	82 2f       	mov	r24, r18
    19c2:	90 e3       	ldi	r25, 0x30	; 48
    19c4:	88 23       	and	r24, r24
    19c6:	19 f0       	breq	.+6      	; 0x19ce <dtoa_prf+0x1fe>
    19c8:	91 93       	st	Z+, r25
    19ca:	81 50       	subi	r24, 0x01	; 1
    19cc:	fb cf       	rjmp	.-10     	; 0x19c4 <dtoa_prf+0x1f4>
    19ce:	c2 0e       	add	r12, r18
    19d0:	d1 1c       	adc	r13, r1
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	0f 2d       	mov	r16, r15
    19d6:	06 0f       	add	r16, r22
    19d8:	9a 81       	ldd	r25, Y+2	; 0x02
    19da:	34 2f       	mov	r19, r20
    19dc:	30 71       	andi	r19, 0x10	; 16
    19de:	44 ff       	sbrs	r20, 4
    19e0:	03 c0       	rjmp	.+6      	; 0x19e8 <dtoa_prf+0x218>
    19e2:	91 33       	cpi	r25, 0x31	; 49
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <dtoa_prf+0x218>
    19e6:	01 50       	subi	r16, 0x01	; 1
    19e8:	10 16       	cp	r1, r16
    19ea:	24 f4       	brge	.+8      	; 0x19f4 <dtoa_prf+0x224>
    19ec:	09 30       	cpi	r16, 0x09	; 9
    19ee:	18 f0       	brcs	.+6      	; 0x19f6 <dtoa_prf+0x226>
    19f0:	08 e0       	ldi	r16, 0x08	; 8
    19f2:	01 c0       	rjmp	.+2      	; 0x19f6 <dtoa_prf+0x226>
    19f4:	01 e0       	ldi	r16, 0x01	; 1
    19f6:	ab 01       	movw	r20, r22
    19f8:	77 ff       	sbrs	r23, 7
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <dtoa_prf+0x230>
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	fb 01       	movw	r30, r22
    1a02:	e4 1b       	sub	r30, r20
    1a04:	f5 0b       	sbc	r31, r21
    1a06:	a1 e0       	ldi	r26, 0x01	; 1
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	ac 0f       	add	r26, r28
    1a0c:	bd 1f       	adc	r27, r29
    1a0e:	ea 0f       	add	r30, r26
    1a10:	fb 1f       	adc	r31, r27
    1a12:	8e e2       	ldi	r24, 0x2E	; 46
    1a14:	a8 2e       	mov	r10, r24
    1a16:	4b 01       	movw	r8, r22
    1a18:	80 1a       	sub	r8, r16
    1a1a:	91 08       	sbc	r9, r1
    1a1c:	0b 2d       	mov	r16, r11
    1a1e:	10 e0       	ldi	r17, 0x00	; 0
    1a20:	11 95       	neg	r17
    1a22:	01 95       	neg	r16
    1a24:	11 09       	sbc	r17, r1
    1a26:	4f 3f       	cpi	r20, 0xFF	; 255
    1a28:	bf ef       	ldi	r27, 0xFF	; 255
    1a2a:	5b 07       	cpc	r21, r27
    1a2c:	21 f4       	brne	.+8      	; 0x1a36 <dtoa_prf+0x266>
    1a2e:	d6 01       	movw	r26, r12
    1a30:	ac 92       	st	X, r10
    1a32:	11 96       	adiw	r26, 0x01	; 1
    1a34:	6d 01       	movw	r12, r26
    1a36:	64 17       	cp	r22, r20
    1a38:	75 07       	cpc	r23, r21
    1a3a:	2c f0       	brlt	.+10     	; 0x1a46 <dtoa_prf+0x276>
    1a3c:	84 16       	cp	r8, r20
    1a3e:	95 06       	cpc	r9, r21
    1a40:	14 f4       	brge	.+4      	; 0x1a46 <dtoa_prf+0x276>
    1a42:	81 81       	ldd	r24, Z+1	; 0x01
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <dtoa_prf+0x278>
    1a46:	80 e3       	ldi	r24, 0x30	; 48
    1a48:	41 50       	subi	r20, 0x01	; 1
    1a4a:	51 09       	sbc	r21, r1
    1a4c:	31 96       	adiw	r30, 0x01	; 1
    1a4e:	d6 01       	movw	r26, r12
    1a50:	11 96       	adiw	r26, 0x01	; 1
    1a52:	7d 01       	movw	r14, r26
    1a54:	40 17       	cp	r20, r16
    1a56:	51 07       	cpc	r21, r17
    1a58:	24 f0       	brlt	.+8      	; 0x1a62 <dtoa_prf+0x292>
    1a5a:	d6 01       	movw	r26, r12
    1a5c:	8c 93       	st	X, r24
    1a5e:	67 01       	movw	r12, r14
    1a60:	e2 cf       	rjmp	.-60     	; 0x1a26 <dtoa_prf+0x256>
    1a62:	64 17       	cp	r22, r20
    1a64:	75 07       	cpc	r23, r21
    1a66:	39 f4       	brne	.+14     	; 0x1a76 <dtoa_prf+0x2a6>
    1a68:	96 33       	cpi	r25, 0x36	; 54
    1a6a:	20 f4       	brcc	.+8      	; 0x1a74 <dtoa_prf+0x2a4>
    1a6c:	95 33       	cpi	r25, 0x35	; 53
    1a6e:	19 f4       	brne	.+6      	; 0x1a76 <dtoa_prf+0x2a6>
    1a70:	31 11       	cpse	r19, r1
    1a72:	01 c0       	rjmp	.+2      	; 0x1a76 <dtoa_prf+0x2a6>
    1a74:	81 e3       	ldi	r24, 0x31	; 49
    1a76:	f6 01       	movw	r30, r12
    1a78:	80 83       	st	Z, r24
    1a7a:	f7 01       	movw	r30, r14
    1a7c:	82 2f       	mov	r24, r18
    1a7e:	90 e2       	ldi	r25, 0x20	; 32
    1a80:	88 23       	and	r24, r24
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <dtoa_prf+0x2ba>
    1a84:	91 93       	st	Z+, r25
    1a86:	81 50       	subi	r24, 0x01	; 1
    1a88:	fb cf       	rjmp	.-10     	; 0x1a80 <dtoa_prf+0x2b0>
    1a8a:	f7 01       	movw	r30, r14
    1a8c:	e2 0f       	add	r30, r18
    1a8e:	f1 1d       	adc	r31, r1
    1a90:	10 82       	st	Z, r1
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	29 96       	adiw	r28, 0x09	; 9
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	df 90       	pop	r13
    1ab0:	cf 90       	pop	r12
    1ab2:	bf 90       	pop	r11
    1ab4:	af 90       	pop	r10
    1ab6:	9f 90       	pop	r9
    1ab8:	8f 90       	pop	r8
    1aba:	08 95       	ret

00001abc <__ftoa_engine>:
    1abc:	28 30       	cpi	r18, 0x08	; 8
    1abe:	08 f0       	brcs	.+2      	; 0x1ac2 <__ftoa_engine+0x6>
    1ac0:	27 e0       	ldi	r18, 0x07	; 7
    1ac2:	33 27       	eor	r19, r19
    1ac4:	da 01       	movw	r26, r20
    1ac6:	99 0f       	add	r25, r25
    1ac8:	31 1d       	adc	r19, r1
    1aca:	87 fd       	sbrc	r24, 7
    1acc:	91 60       	ori	r25, 0x01	; 1
    1ace:	00 96       	adiw	r24, 0x00	; 0
    1ad0:	61 05       	cpc	r22, r1
    1ad2:	71 05       	cpc	r23, r1
    1ad4:	39 f4       	brne	.+14     	; 0x1ae4 <__ftoa_engine+0x28>
    1ad6:	32 60       	ori	r19, 0x02	; 2
    1ad8:	2e 5f       	subi	r18, 0xFE	; 254
    1ada:	3d 93       	st	X+, r19
    1adc:	30 e3       	ldi	r19, 0x30	; 48
    1ade:	2a 95       	dec	r18
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <__ftoa_engine+0x1e>
    1ae2:	08 95       	ret
    1ae4:	9f 3f       	cpi	r25, 0xFF	; 255
    1ae6:	30 f0       	brcs	.+12     	; 0x1af4 <__ftoa_engine+0x38>
    1ae8:	80 38       	cpi	r24, 0x80	; 128
    1aea:	71 05       	cpc	r23, r1
    1aec:	61 05       	cpc	r22, r1
    1aee:	09 f0       	breq	.+2      	; 0x1af2 <__ftoa_engine+0x36>
    1af0:	3c 5f       	subi	r19, 0xFC	; 252
    1af2:	3c 5f       	subi	r19, 0xFC	; 252
    1af4:	3d 93       	st	X+, r19
    1af6:	91 30       	cpi	r25, 0x01	; 1
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <__ftoa_engine+0x40>
    1afa:	80 68       	ori	r24, 0x80	; 128
    1afc:	91 1d       	adc	r25, r1
    1afe:	df 93       	push	r29
    1b00:	cf 93       	push	r28
    1b02:	1f 93       	push	r17
    1b04:	0f 93       	push	r16
    1b06:	ff 92       	push	r15
    1b08:	ef 92       	push	r14
    1b0a:	19 2f       	mov	r17, r25
    1b0c:	98 7f       	andi	r25, 0xF8	; 248
    1b0e:	96 95       	lsr	r25
    1b10:	e9 2f       	mov	r30, r25
    1b12:	96 95       	lsr	r25
    1b14:	96 95       	lsr	r25
    1b16:	e9 0f       	add	r30, r25
    1b18:	ff 27       	eor	r31, r31
    1b1a:	e2 5c       	subi	r30, 0xC2	; 194
    1b1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b1e:	99 27       	eor	r25, r25
    1b20:	33 27       	eor	r19, r19
    1b22:	ee 24       	eor	r14, r14
    1b24:	ff 24       	eor	r15, r15
    1b26:	a7 01       	movw	r20, r14
    1b28:	e7 01       	movw	r28, r14
    1b2a:	05 90       	lpm	r0, Z+
    1b2c:	08 94       	sec
    1b2e:	07 94       	ror	r0
    1b30:	28 f4       	brcc	.+10     	; 0x1b3c <__ftoa_engine+0x80>
    1b32:	36 0f       	add	r19, r22
    1b34:	e7 1e       	adc	r14, r23
    1b36:	f8 1e       	adc	r15, r24
    1b38:	49 1f       	adc	r20, r25
    1b3a:	51 1d       	adc	r21, r1
    1b3c:	66 0f       	add	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	06 94       	lsr	r0
    1b46:	a1 f7       	brne	.-24     	; 0x1b30 <__ftoa_engine+0x74>
    1b48:	05 90       	lpm	r0, Z+
    1b4a:	07 94       	ror	r0
    1b4c:	28 f4       	brcc	.+10     	; 0x1b58 <__ftoa_engine+0x9c>
    1b4e:	e7 0e       	add	r14, r23
    1b50:	f8 1e       	adc	r15, r24
    1b52:	49 1f       	adc	r20, r25
    1b54:	56 1f       	adc	r21, r22
    1b56:	c1 1d       	adc	r28, r1
    1b58:	77 0f       	add	r23, r23
    1b5a:	88 1f       	adc	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	66 1f       	adc	r22, r22
    1b60:	06 94       	lsr	r0
    1b62:	a1 f7       	brne	.-24     	; 0x1b4c <__ftoa_engine+0x90>
    1b64:	05 90       	lpm	r0, Z+
    1b66:	07 94       	ror	r0
    1b68:	28 f4       	brcc	.+10     	; 0x1b74 <__ftoa_engine+0xb8>
    1b6a:	f8 0e       	add	r15, r24
    1b6c:	49 1f       	adc	r20, r25
    1b6e:	56 1f       	adc	r21, r22
    1b70:	c7 1f       	adc	r28, r23
    1b72:	d1 1d       	adc	r29, r1
    1b74:	88 0f       	add	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	66 1f       	adc	r22, r22
    1b7a:	77 1f       	adc	r23, r23
    1b7c:	06 94       	lsr	r0
    1b7e:	a1 f7       	brne	.-24     	; 0x1b68 <__ftoa_engine+0xac>
    1b80:	05 90       	lpm	r0, Z+
    1b82:	07 94       	ror	r0
    1b84:	20 f4       	brcc	.+8      	; 0x1b8e <__ftoa_engine+0xd2>
    1b86:	49 0f       	add	r20, r25
    1b88:	56 1f       	adc	r21, r22
    1b8a:	c7 1f       	adc	r28, r23
    1b8c:	d8 1f       	adc	r29, r24
    1b8e:	99 0f       	add	r25, r25
    1b90:	66 1f       	adc	r22, r22
    1b92:	77 1f       	adc	r23, r23
    1b94:	88 1f       	adc	r24, r24
    1b96:	06 94       	lsr	r0
    1b98:	a9 f7       	brne	.-22     	; 0x1b84 <__ftoa_engine+0xc8>
    1b9a:	84 91       	lpm	r24, Z
    1b9c:	10 95       	com	r17
    1b9e:	17 70       	andi	r17, 0x07	; 7
    1ba0:	41 f0       	breq	.+16     	; 0x1bb2 <__ftoa_engine+0xf6>
    1ba2:	d6 95       	lsr	r29
    1ba4:	c7 95       	ror	r28
    1ba6:	57 95       	ror	r21
    1ba8:	47 95       	ror	r20
    1baa:	f7 94       	ror	r15
    1bac:	e7 94       	ror	r14
    1bae:	1a 95       	dec	r17
    1bb0:	c1 f7       	brne	.-16     	; 0x1ba2 <__ftoa_engine+0xe6>
    1bb2:	e4 ee       	ldi	r30, 0xE4	; 228
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	68 94       	set
    1bb8:	15 90       	lpm	r1, Z+
    1bba:	15 91       	lpm	r17, Z+
    1bbc:	35 91       	lpm	r19, Z+
    1bbe:	65 91       	lpm	r22, Z+
    1bc0:	95 91       	lpm	r25, Z+
    1bc2:	05 90       	lpm	r0, Z+
    1bc4:	7f e2       	ldi	r23, 0x2F	; 47
    1bc6:	73 95       	inc	r23
    1bc8:	e1 18       	sub	r14, r1
    1bca:	f1 0a       	sbc	r15, r17
    1bcc:	43 0b       	sbc	r20, r19
    1bce:	56 0b       	sbc	r21, r22
    1bd0:	c9 0b       	sbc	r28, r25
    1bd2:	d0 09       	sbc	r29, r0
    1bd4:	c0 f7       	brcc	.-16     	; 0x1bc6 <__ftoa_engine+0x10a>
    1bd6:	e1 0c       	add	r14, r1
    1bd8:	f1 1e       	adc	r15, r17
    1bda:	43 1f       	adc	r20, r19
    1bdc:	56 1f       	adc	r21, r22
    1bde:	c9 1f       	adc	r28, r25
    1be0:	d0 1d       	adc	r29, r0
    1be2:	7e f4       	brtc	.+30     	; 0x1c02 <__ftoa_engine+0x146>
    1be4:	70 33       	cpi	r23, 0x30	; 48
    1be6:	11 f4       	brne	.+4      	; 0x1bec <__ftoa_engine+0x130>
    1be8:	8a 95       	dec	r24
    1bea:	e6 cf       	rjmp	.-52     	; 0x1bb8 <__ftoa_engine+0xfc>
    1bec:	e8 94       	clt
    1bee:	01 50       	subi	r16, 0x01	; 1
    1bf0:	30 f0       	brcs	.+12     	; 0x1bfe <__ftoa_engine+0x142>
    1bf2:	08 0f       	add	r16, r24
    1bf4:	0a f4       	brpl	.+2      	; 0x1bf8 <__ftoa_engine+0x13c>
    1bf6:	00 27       	eor	r16, r16
    1bf8:	02 17       	cp	r16, r18
    1bfa:	08 f4       	brcc	.+2      	; 0x1bfe <__ftoa_engine+0x142>
    1bfc:	20 2f       	mov	r18, r16
    1bfe:	23 95       	inc	r18
    1c00:	02 2f       	mov	r16, r18
    1c02:	7a 33       	cpi	r23, 0x3A	; 58
    1c04:	28 f0       	brcs	.+10     	; 0x1c10 <__ftoa_engine+0x154>
    1c06:	79 e3       	ldi	r23, 0x39	; 57
    1c08:	7d 93       	st	X+, r23
    1c0a:	2a 95       	dec	r18
    1c0c:	e9 f7       	brne	.-6      	; 0x1c08 <__ftoa_engine+0x14c>
    1c0e:	10 c0       	rjmp	.+32     	; 0x1c30 <__ftoa_engine+0x174>
    1c10:	7d 93       	st	X+, r23
    1c12:	2a 95       	dec	r18
    1c14:	89 f6       	brne	.-94     	; 0x1bb8 <__ftoa_engine+0xfc>
    1c16:	06 94       	lsr	r0
    1c18:	97 95       	ror	r25
    1c1a:	67 95       	ror	r22
    1c1c:	37 95       	ror	r19
    1c1e:	17 95       	ror	r17
    1c20:	17 94       	ror	r1
    1c22:	e1 18       	sub	r14, r1
    1c24:	f1 0a       	sbc	r15, r17
    1c26:	43 0b       	sbc	r20, r19
    1c28:	56 0b       	sbc	r21, r22
    1c2a:	c9 0b       	sbc	r28, r25
    1c2c:	d0 09       	sbc	r29, r0
    1c2e:	98 f0       	brcs	.+38     	; 0x1c56 <__ftoa_engine+0x19a>
    1c30:	23 95       	inc	r18
    1c32:	7e 91       	ld	r23, -X
    1c34:	73 95       	inc	r23
    1c36:	7a 33       	cpi	r23, 0x3A	; 58
    1c38:	08 f0       	brcs	.+2      	; 0x1c3c <__ftoa_engine+0x180>
    1c3a:	70 e3       	ldi	r23, 0x30	; 48
    1c3c:	7c 93       	st	X, r23
    1c3e:	20 13       	cpse	r18, r16
    1c40:	b8 f7       	brcc	.-18     	; 0x1c30 <__ftoa_engine+0x174>
    1c42:	7e 91       	ld	r23, -X
    1c44:	70 61       	ori	r23, 0x10	; 16
    1c46:	7d 93       	st	X+, r23
    1c48:	30 f0       	brcs	.+12     	; 0x1c56 <__ftoa_engine+0x19a>
    1c4a:	83 95       	inc	r24
    1c4c:	71 e3       	ldi	r23, 0x31	; 49
    1c4e:	7d 93       	st	X+, r23
    1c50:	70 e3       	ldi	r23, 0x30	; 48
    1c52:	2a 95       	dec	r18
    1c54:	e1 f7       	brne	.-8      	; 0x1c4e <__ftoa_engine+0x192>
    1c56:	11 24       	eor	r1, r1
    1c58:	ef 90       	pop	r14
    1c5a:	ff 90       	pop	r15
    1c5c:	0f 91       	pop	r16
    1c5e:	1f 91       	pop	r17
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	99 27       	eor	r25, r25
    1c66:	87 fd       	sbrc	r24, 7
    1c68:	90 95       	com	r25
    1c6a:	08 95       	ret

00001c6c <_exit>:
    1c6c:	f8 94       	cli

00001c6e <__stop_program>:
    1c6e:	ff cf       	rjmp	.-2      	; 0x1c6e <__stop_program>

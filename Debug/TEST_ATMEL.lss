
TEST_ATMEL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800200  00001de4  00001e78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001de4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000332  0080024a  0080024a  00001ec2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ec2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026a8  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000119e  00000000  00000000  000047a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001013  00000000  00000000  00005946  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000584  00000000  00000000  0000695c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a70  00000000  00000000  00006ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f90  00000000  00000000  00007950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000088e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	30 c1       	rjmp	.+608    	; 0x266 <__vector_1>
       6:	00 00       	nop
       8:	69 c1       	rjmp	.+722    	; 0x2dc <__vector_2>
       a:	00 00       	nop
       c:	a2 c1       	rjmp	.+836    	; 0x352 <__vector_3>
       e:	00 00       	nop
      10:	db c1       	rjmp	.+950    	; 0x3c8 <__vector_4>
      12:	00 00       	nop
      14:	14 c2       	rjmp	.+1064   	; 0x43e <__vector_5>
      16:	00 00       	nop
      18:	2a c2       	rjmp	.+1108   	; 0x46e <__vector_6>
      1a:	00 00       	nop
      1c:	3c c2       	rjmp	.+1144   	; 0x496 <__vector_7>
      1e:	00 00       	nop
      20:	4e c2       	rjmp	.+1180   	; 0x4be <__vector_8>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	3b c2       	rjmp	.+1142   	; 0x4dc <__vector_25>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c0       	rjmp	.+152    	; 0x126 <__vector_35>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 ee       	ldi	r30, 0xE4	; 228
      fc:	fd e1       	ldi	r31, 0x1D	; 29
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 34       	cpi	r26, 0x4A	; 74
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	25 e0       	ldi	r18, 0x05	; 5
     110:	aa e4       	ldi	r26, 0x4A	; 74
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ac 37       	cpi	r26, 0x7C	; 124
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	14 d2       	rcall	.+1064   	; 0x548 <main>
     120:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <__vector_35>:
void set_output(volatile uint8_t *ddr, uint8_t pin) {
	*ddr |= (1 << pin);
}

void set_input(volatile uint8_t *ddr, uint8_t pin) {
	*ddr &= ~(1 << pin);
     126:	1f 92       	push	r1
     128:	0f 92       	push	r0
     12a:	0f b6       	in	r0, 0x3f	; 63
     12c:	0f 92       	push	r0
     12e:	11 24       	eor	r1, r1
     130:	2f 93       	push	r18
     132:	3f 93       	push	r19
     134:	4f 93       	push	r20
     136:	5f 93       	push	r21
     138:	6f 93       	push	r22
     13a:	7f 93       	push	r23
     13c:	8f 93       	push	r24
     13e:	9f 93       	push	r25
     140:	af 93       	push	r26
     142:	20 91 4c 02 	lds	r18, 0x024C	; 0x80024c <timer3_overflow_count>
     146:	30 91 4d 02 	lds	r19, 0x024D	; 0x80024d <timer3_overflow_count+0x1>
     14a:	40 91 4e 02 	lds	r20, 0x024E	; 0x80024e <timer3_overflow_count+0x2>
     14e:	50 91 4f 02 	lds	r21, 0x024F	; 0x80024f <timer3_overflow_count+0x3>
     152:	60 91 50 02 	lds	r22, 0x0250	; 0x800250 <timer3_overflow_count+0x4>
     156:	70 91 51 02 	lds	r23, 0x0251	; 0x800251 <timer3_overflow_count+0x5>
     15a:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <timer3_overflow_count+0x6>
     15e:	90 91 53 02 	lds	r25, 0x0253	; 0x800253 <timer3_overflow_count+0x7>
     162:	a1 e0       	ldi	r26, 0x01	; 1
     164:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__adddi3_s8>
     168:	20 93 4c 02 	sts	0x024C, r18	; 0x80024c <timer3_overflow_count>
     16c:	30 93 4d 02 	sts	0x024D, r19	; 0x80024d <timer3_overflow_count+0x1>
     170:	40 93 4e 02 	sts	0x024E, r20	; 0x80024e <timer3_overflow_count+0x2>
     174:	50 93 4f 02 	sts	0x024F, r21	; 0x80024f <timer3_overflow_count+0x3>
     178:	60 93 50 02 	sts	0x0250, r22	; 0x800250 <timer3_overflow_count+0x4>
     17c:	70 93 51 02 	sts	0x0251, r23	; 0x800251 <timer3_overflow_count+0x5>
     180:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <timer3_overflow_count+0x6>
     184:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <timer3_overflow_count+0x7>
     188:	af 91       	pop	r26
     18a:	9f 91       	pop	r25
     18c:	8f 91       	pop	r24
     18e:	7f 91       	pop	r23
     190:	6f 91       	pop	r22
     192:	5f 91       	pop	r21
     194:	4f 91       	pop	r20
     196:	3f 91       	pop	r19
     198:	2f 91       	pop	r18
     19a:	0f 90       	pop	r0
     19c:	0f be       	out	0x3f, r0	; 63
     19e:	0f 90       	pop	r0
     1a0:	1f 90       	pop	r1
     1a2:	18 95       	reti

000001a4 <set_output>:
     1a4:	fc 01       	movw	r30, r24
     1a6:	40 81       	ld	r20, Z
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <set_output+0xe>
     1ae:	22 0f       	add	r18, r18
     1b0:	33 1f       	adc	r19, r19
     1b2:	6a 95       	dec	r22
     1b4:	e2 f7       	brpl	.-8      	; 0x1ae <set_output+0xa>
     1b6:	24 2b       	or	r18, r20
     1b8:	20 83       	st	Z, r18
     1ba:	08 95       	ret

000001bc <pin_high>:
}

void pin_high(volatile uint8_t *port, uint8_t pin) {
	*port |= (1 << pin);
     1bc:	fc 01       	movw	r30, r24
     1be:	40 81       	ld	r20, Z
     1c0:	21 e0       	ldi	r18, 0x01	; 1
     1c2:	30 e0       	ldi	r19, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <pin_high+0xe>
     1c6:	22 0f       	add	r18, r18
     1c8:	33 1f       	adc	r19, r19
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <pin_high+0xa>
     1ce:	24 2b       	or	r18, r20
     1d0:	20 83       	st	Z, r18
     1d2:	08 95       	ret

000001d4 <pin_low>:
}

void pin_low(volatile uint8_t *port, uint8_t pin) {
     1d4:	fc 01       	movw	r30, r24
	*port &= ~(1 << pin);
     1d6:	90 81       	ld	r25, Z
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <pin_low+0xe>
     1de:	22 0f       	add	r18, r18
     1e0:	33 1f       	adc	r19, r19
     1e2:	6a 95       	dec	r22
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <pin_low+0xa>
     1e6:	20 95       	com	r18
     1e8:	29 23       	and	r18, r25
     1ea:	20 83       	st	Z, r18
     1ec:	08 95       	ret

000001ee <setup_micros>:
}

void setup_micros(void){
	cli();
     1ee:	f8 94       	cli

	TCCR3B |= (1 << CS30);
     1f0:	e1 e9       	ldi	r30, 0x91	; 145
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	81 60       	ori	r24, 0x01	; 1
     1f8:	80 83       	st	Z, r24
	TIMSK3 |= (1 << TOIE3);
     1fa:	e1 e7       	ldi	r30, 0x71	; 113
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	81 60       	ori	r24, 0x01	; 1
     202:	80 83       	st	Z, r24

	sei();
     204:	78 94       	sei
     206:	08 95       	ret

00000208 <micros>:
}

uint32_t micros() {
	uint32_t overflows, timer_value;

	cli(); // Disable interrupts to read consistent values
     208:	f8 94       	cli
	overflows = timer3_overflow_count;
     20a:	50 91 4c 02 	lds	r21, 0x024C	; 0x80024c <timer3_overflow_count>
     20e:	40 91 4d 02 	lds	r20, 0x024D	; 0x80024d <timer3_overflow_count+0x1>
     212:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <timer3_overflow_count+0x2>
     216:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <timer3_overflow_count+0x3>
     21a:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <timer3_overflow_count+0x4>
     21e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <timer3_overflow_count+0x5>
     222:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <timer3_overflow_count+0x6>
     226:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <timer3_overflow_count+0x7>
     22a:	85 2f       	mov	r24, r21
     22c:	94 2f       	mov	r25, r20
     22e:	a3 2f       	mov	r26, r19
     230:	b2 2f       	mov	r27, r18
	timer_value = TCNT3;
     232:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
     236:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     23a:	ab 01       	movw	r20, r22
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
	sei(); // Enable interrupts
     240:	78 94       	sei

	// Calculate total microseconds
	return ((overflows * 65536UL) + timer_value) / (F_CPU / 1000000UL);
     242:	dc 01       	movw	r26, r24
     244:	99 27       	eor	r25, r25
     246:	88 27       	eor	r24, r24
     248:	84 0f       	add	r24, r20
     24a:	95 1f       	adc	r25, r21
     24c:	a6 1f       	adc	r26, r22
     24e:	b7 1f       	adc	r27, r23
     250:	bc 01       	movw	r22, r24
     252:	cd 01       	movw	r24, r26
     254:	68 94       	set
     256:	13 f8       	bld	r1, 3
     258:	96 95       	lsr	r25
     25a:	87 95       	ror	r24
     25c:	77 95       	ror	r23
     25e:	67 95       	ror	r22
     260:	16 94       	lsr	r1
     262:	d1 f7       	brne	.-12     	; 0x258 <micros+0x50>
     264:	08 95       	ret

00000266 <__vector_1>:
Motor basemotor2;
Motor micromotor3;
Motor micromotor4;

//-------- ENCODERS ---------
ISR(INT0_vect){ // A4 MOTOR 4 (PL0 PL1) - DIRECTION & PB6 - PWM
     266:	1f 92       	push	r1
     268:	0f 92       	push	r0
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	0f 92       	push	r0
     26e:	11 24       	eor	r1, r1
     270:	8f 93       	push	r24
     272:	9f 93       	push	r25
     274:	af 93       	push	r26
     276:	bf 93       	push	r27
	if (PIND & (1 << PD6)) {
     278:	4e 9b       	sbis	0x09, 6	; 9
     27a:	14 c0       	rjmp	.+40     	; 0x2a4 <__vector_1+0x3e>
		motor4_currentPos++;  // If B is high while A changes, increment ticks
     27c:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <motor4_currentPos>
     280:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <motor4_currentPos+0x1>
     284:	a0 91 73 02 	lds	r26, 0x0273	; 0x800273 <motor4_currentPos+0x2>
     288:	b0 91 74 02 	lds	r27, 0x0274	; 0x800274 <motor4_currentPos+0x3>
     28c:	01 96       	adiw	r24, 0x01	; 1
     28e:	a1 1d       	adc	r26, r1
     290:	b1 1d       	adc	r27, r1
     292:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <motor4_currentPos>
     296:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <motor4_currentPos+0x1>
     29a:	a0 93 73 02 	sts	0x0273, r26	; 0x800273 <motor4_currentPos+0x2>
     29e:	b0 93 74 02 	sts	0x0274, r27	; 0x800274 <motor4_currentPos+0x3>
     2a2:	13 c0       	rjmp	.+38     	; 0x2ca <__vector_1+0x64>
	} else {
		motor4_currentPos--;  // If B is low while A changes, decrement ticks
     2a4:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <motor4_currentPos>
     2a8:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <motor4_currentPos+0x1>
     2ac:	a0 91 73 02 	lds	r26, 0x0273	; 0x800273 <motor4_currentPos+0x2>
     2b0:	b0 91 74 02 	lds	r27, 0x0274	; 0x800274 <motor4_currentPos+0x3>
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	a1 09       	sbc	r26, r1
     2b8:	b1 09       	sbc	r27, r1
     2ba:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <motor4_currentPos>
     2be:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <motor4_currentPos+0x1>
     2c2:	a0 93 73 02 	sts	0x0273, r26	; 0x800273 <motor4_currentPos+0x2>
     2c6:	b0 93 74 02 	sts	0x0274, r27	; 0x800274 <motor4_currentPos+0x3>
	}
}
     2ca:	bf 91       	pop	r27
     2cc:	af 91       	pop	r26
     2ce:	9f 91       	pop	r25
     2d0:	8f 91       	pop	r24
     2d2:	0f 90       	pop	r0
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	0f 90       	pop	r0
     2d8:	1f 90       	pop	r1
     2da:	18 95       	reti

000002dc <__vector_2>:

ISR(INT1_vect){ // A3 MOTOR 3 (PL2 PL3) - DIRECTION & PB7 - PWM
     2dc:	1f 92       	push	r1
     2de:	0f 92       	push	r0
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	0f 92       	push	r0
     2e4:	11 24       	eor	r1, r1
     2e6:	8f 93       	push	r24
     2e8:	9f 93       	push	r25
     2ea:	af 93       	push	r26
     2ec:	bf 93       	push	r27
	if (PIND & (1 << PD7)) {
     2ee:	4f 9b       	sbis	0x09, 7	; 9
     2f0:	14 c0       	rjmp	.+40     	; 0x31a <__vector_2+0x3e>
		motor3_currentPos++;  
     2f2:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <motor3_currentPos>
     2f6:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <motor3_currentPos+0x1>
     2fa:	a0 91 77 02 	lds	r26, 0x0277	; 0x800277 <motor3_currentPos+0x2>
     2fe:	b0 91 78 02 	lds	r27, 0x0278	; 0x800278 <motor3_currentPos+0x3>
     302:	01 96       	adiw	r24, 0x01	; 1
     304:	a1 1d       	adc	r26, r1
     306:	b1 1d       	adc	r27, r1
     308:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <motor3_currentPos>
     30c:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <motor3_currentPos+0x1>
     310:	a0 93 77 02 	sts	0x0277, r26	; 0x800277 <motor3_currentPos+0x2>
     314:	b0 93 78 02 	sts	0x0278, r27	; 0x800278 <motor3_currentPos+0x3>
     318:	13 c0       	rjmp	.+38     	; 0x340 <__vector_2+0x64>
	} else {
		motor3_currentPos--;  
     31a:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <motor3_currentPos>
     31e:	90 91 76 02 	lds	r25, 0x0276	; 0x800276 <motor3_currentPos+0x1>
     322:	a0 91 77 02 	lds	r26, 0x0277	; 0x800277 <motor3_currentPos+0x2>
     326:	b0 91 78 02 	lds	r27, 0x0278	; 0x800278 <motor3_currentPos+0x3>
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	a1 09       	sbc	r26, r1
     32e:	b1 09       	sbc	r27, r1
     330:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <motor3_currentPos>
     334:	90 93 76 02 	sts	0x0276, r25	; 0x800276 <motor3_currentPos+0x1>
     338:	a0 93 77 02 	sts	0x0277, r26	; 0x800277 <motor3_currentPos+0x2>
     33c:	b0 93 78 02 	sts	0x0278, r27	; 0x800278 <motor3_currentPos+0x3>
	}
}
     340:	bf 91       	pop	r27
     342:	af 91       	pop	r26
     344:	9f 91       	pop	r25
     346:	8f 91       	pop	r24
     348:	0f 90       	pop	r0
     34a:	0f be       	out	0x3f, r0	; 63
     34c:	0f 90       	pop	r0
     34e:	1f 90       	pop	r1
     350:	18 95       	reti

00000352 <__vector_3>:

ISR(INT2_vect){ // A2 MOTOR 2 (PH3 PH4) - DIRECTION & PWM PINS
     352:	1f 92       	push	r1
     354:	0f 92       	push	r0
     356:	0f b6       	in	r0, 0x3f	; 63
     358:	0f 92       	push	r0
     35a:	11 24       	eor	r1, r1
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
	if (PINB & (1 << PB5)) {
     364:	1d 9b       	sbis	0x03, 5	; 3
     366:	14 c0       	rjmp	.+40     	; 0x390 <__vector_3+0x3e>
		motor2_currentPos++;  
     368:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <motor2_currentPos>
     36c:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <motor2_currentPos+0x1>
     370:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <motor2_currentPos+0x2>
     374:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <motor2_currentPos+0x3>
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	a1 1d       	adc	r26, r1
     37c:	b1 1d       	adc	r27, r1
     37e:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <motor2_currentPos>
     382:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <motor2_currentPos+0x1>
     386:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <motor2_currentPos+0x2>
     38a:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <motor2_currentPos+0x3>
     38e:	13 c0       	rjmp	.+38     	; 0x3b6 <__vector_3+0x64>
	} else {
		motor2_currentPos--;  
     390:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <motor2_currentPos>
     394:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <motor2_currentPos+0x1>
     398:	a0 91 7b 02 	lds	r26, 0x027B	; 0x80027b <motor2_currentPos+0x2>
     39c:	b0 91 7c 02 	lds	r27, 0x027C	; 0x80027c <motor2_currentPos+0x3>
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	a1 09       	sbc	r26, r1
     3a4:	b1 09       	sbc	r27, r1
     3a6:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <motor2_currentPos>
     3aa:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <motor2_currentPos+0x1>
     3ae:	a0 93 7b 02 	sts	0x027B, r26	; 0x80027b <motor2_currentPos+0x2>
     3b2:	b0 93 7c 02 	sts	0x027C, r27	; 0x80027c <motor2_currentPos+0x3>
	}
}
     3b6:	bf 91       	pop	r27
     3b8:	af 91       	pop	r26
     3ba:	9f 91       	pop	r25
     3bc:	8f 91       	pop	r24
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <__vector_4>:

ISR(INT3_vect){ // A1 MOTOR 1 (PH5 PH6) - DIRECTION & PWM PINS
     3c8:	1f 92       	push	r1
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	0f 92       	push	r0
     3d0:	11 24       	eor	r1, r1
     3d2:	8f 93       	push	r24
     3d4:	9f 93       	push	r25
     3d6:	af 93       	push	r26
     3d8:	bf 93       	push	r27
	if (PINB & (1 << PB4)) {
     3da:	1c 9b       	sbis	0x03, 4	; 3
     3dc:	14 c0       	rjmp	.+40     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		motor1_currentPos++;  
     3de:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <motor1_currentPos>
     3e2:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <motor1_currentPos+0x1>
     3e6:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <motor1_currentPos+0x2>
     3ea:	b0 91 80 02 	lds	r27, 0x0280	; 0x800280 <motor1_currentPos+0x3>
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	a1 1d       	adc	r26, r1
     3f2:	b1 1d       	adc	r27, r1
     3f4:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <motor1_currentPos>
     3f8:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <motor1_currentPos+0x1>
     3fc:	a0 93 7f 02 	sts	0x027F, r26	; 0x80027f <motor1_currentPos+0x2>
     400:	b0 93 80 02 	sts	0x0280, r27	; 0x800280 <motor1_currentPos+0x3>
     404:	13 c0       	rjmp	.+38     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	} else {
		motor1_currentPos--;  
     406:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <motor1_currentPos>
     40a:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <motor1_currentPos+0x1>
     40e:	a0 91 7f 02 	lds	r26, 0x027F	; 0x80027f <motor1_currentPos+0x2>
     412:	b0 91 80 02 	lds	r27, 0x0280	; 0x800280 <motor1_currentPos+0x3>
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	a1 09       	sbc	r26, r1
     41a:	b1 09       	sbc	r27, r1
     41c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <motor1_currentPos>
     420:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <motor1_currentPos+0x1>
     424:	a0 93 7f 02 	sts	0x027F, r26	; 0x80027f <motor1_currentPos+0x2>
     428:	b0 93 80 02 	sts	0x0280, r27	; 0x800280 <motor1_currentPos+0x3>
	}
}
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	0f 90       	pop	r0
     436:	0f be       	out	0x3f, r0	; 63
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <__vector_5>:

//-------- SENSORS ---------
ISR(INT4_vect){ // SENSOR 4
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	8f 93       	push	r24
	limit1 = 1;
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <limit1>
	if(homing){
     450:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <homing>
     454:	88 23       	and	r24, r24
     456:	29 f0       	breq	.+10     	; 0x462 <__vector_5+0x24>
		homing1 = 0;
     458:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
		homing2 = 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <homing2>
	}
}
     462:	8f 91       	pop	r24
     464:	0f 90       	pop	r0
     466:	0f be       	out	0x3f, r0	; 63
     468:	0f 90       	pop	r0
     46a:	1f 90       	pop	r1
     46c:	18 95       	reti

0000046e <__vector_6>:

ISR(INT5_vect){ // SENSOR 3
     46e:	1f 92       	push	r1
     470:	0f 92       	push	r0
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	0f 92       	push	r0
     476:	11 24       	eor	r1, r1
     478:	8f 93       	push	r24
	limit2 = 1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <limit2>
	if(homing){
     480:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <homing>
     484:	81 11       	cpse	r24, r1
		homing2 = 0;
     486:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <homing2>
	}
}
     48a:	8f 91       	pop	r24
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <__vector_7>:
 
ISR(INT6_vect){ // SENSOR 2
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	8f 93       	push	r24
	limit2 = 1;
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <limit2>
	if(homing){
     4a8:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <homing>
     4ac:	81 11       	cpse	r24, r1
		homing2 = 0;
     4ae:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <homing2>
	}
}
     4b2:	8f 91       	pop	r24
     4b4:	0f 90       	pop	r0
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	0f 90       	pop	r0
     4ba:	1f 90       	pop	r1
     4bc:	18 95       	reti

000004be <__vector_8>:

ISR(INT7_vect){ // SENSOR 1
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	0f 92       	push	r0
     4c6:	11 24       	eor	r1, r1
     4c8:	8f 93       	push	r24
	limit3 = 1;
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <limit3>
}
     4d0:	8f 91       	pop	r24
     4d2:	0f 90       	pop	r0
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	0f 90       	pop	r0
     4d8:	1f 90       	pop	r1
     4da:	18 95       	reti

000004dc <__vector_25>:

// Interrupt Service Routine (ISR) for USART Receive Complete
ISR(USART0_RX_vect) {
     4dc:	1f 92       	push	r1
     4de:	0f 92       	push	r0
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	0f 92       	push	r0
     4e4:	11 24       	eor	r1, r1
     4e6:	0b b6       	in	r0, 0x3b	; 59
     4e8:	0f 92       	push	r0
     4ea:	8f 93       	push	r24
     4ec:	9f 93       	push	r25
     4ee:	ef 93       	push	r30
     4f0:	ff 93       	push	r31
	char c = UDR0;  // Read received character
     4f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

	// If Enter key is received, mark the string as complete
	if (c == '\n' || c == '\r') {
     4f6:	8a 30       	cpi	r24, 0x0A	; 10
     4f8:	11 f0       	breq	.+4      	; 0x4fe <__vector_25+0x22>
     4fa:	8d 30       	cpi	r24, 0x0D	; 13
     4fc:	61 f4       	brne	.+24     	; 0x516 <__vector_25+0x3a>
		read[rx_index] = '\0';  // Null-terminate the string
     4fe:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <rx_index>
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	e1 5d       	subi	r30, 0xD1	; 209
     506:	fb 4f       	sbci	r31, 0xFB	; 251
     508:	10 82       	st	Z, r1
		data_ready = 1;  // Set flag indicating a complete string is available
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <data_ready>
		rx_index = 0;    // Reset buffer index for the next message
     510:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <rx_index>
     514:	0e c0       	rjmp	.+28     	; 0x532 <__vector_25+0x56>
	}
	else if (rx_index < 100 - 1) {
     516:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <rx_index>
     51a:	93 36       	cpi	r25, 0x63	; 99
     51c:	50 f4       	brcc	.+20     	; 0x532 <__vector_25+0x56>
		read[rx_index++] = c;  // Store character in buffer
     51e:	e0 91 70 02 	lds	r30, 0x0270	; 0x800270 <rx_index>
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	9e 0f       	add	r25, r30
     526:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <rx_index>
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	e1 5d       	subi	r30, 0xD1	; 209
     52e:	fb 4f       	sbci	r31, 0xFB	; 251
     530:	80 83       	st	Z, r24
	}
}
     532:	ff 91       	pop	r31
     534:	ef 91       	pop	r30
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	0f 90       	pop	r0
     53c:	0b be       	out	0x3b, r0	; 59
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <main>:

int main(void)
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
     550:	c3 57       	subi	r28, 0x73	; 115
     552:	d1 09       	sbc	r29, r1
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
	//SETUP TIMER 3 FOR MICROSECOND COUNTING FROM BOOT & TIMER 3 INTERRUPT
	setup_micros();
     55e:	47 de       	rcall	.-882    	; 0x1ee <setup_micros>

	//SETUP LIMIT SENSORS
	setup_ext_sensors();
     560:	44 d6       	rcall	.+3208   	; 0x11ea <setup_ext_sensors>

	//INITIALIZE SERIAL COMMUNICATION
	USART0_init();
     562:	77 d6       	rcall	.+3310   	; 0x1252 <USART0_init>
     564:	63 d6       	rcall	.+3270   	; 0x122c <ADC_init>

	//INITIALIZE CURRENT SENSORS
	ADC_init();
     566:	0f 2e       	mov	r0, r31
     568:	f4 eb       	ldi	r31, 0xB4	; 180

	//INITIALIZE MOTORS
	basemotor1 = init_motor(2, &PORTH, PH5, PH6, &DDRH, DDH5, DDH6, &DDRH, DDH5, &OCR2B, &OCR4C, 180);
     56a:	bf 2e       	mov	r11, r31
     56c:	f0 2d       	mov	r31, r0
     56e:	bf 92       	push	r11
     570:	1f 92       	push	r1
     572:	8c ea       	ldi	r24, 0xAC	; 172
     574:	8f 93       	push	r24
     576:	1f 92       	push	r1
     578:	bf 92       	push	r11
     57a:	85 e0       	ldi	r24, 0x05	; 5
     57c:	8f 93       	push	r24
     57e:	88 24       	eor	r8, r8
     580:	83 94       	inc	r8
     582:	98 2c       	mov	r9, r8
     584:	0f 2e       	mov	r0, r31
     586:	f6 e0       	ldi	r31, 0x06	; 6
     588:	af 2e       	mov	r10, r31
     58a:	f0 2d       	mov	r31, r0
     58c:	0f 2e       	mov	r0, r31
     58e:	f5 e0       	ldi	r31, 0x05	; 5
     590:	cf 2e       	mov	r12, r31
     592:	f0 2d       	mov	r31, r0
     594:	ee 24       	eor	r14, r14
     596:	e3 94       	inc	r14
     598:	fe 2c       	mov	r15, r14
     59a:	06 e0       	ldi	r16, 0x06	; 6
     59c:	25 e0       	ldi	r18, 0x05	; 5
     59e:	42 e0       	ldi	r20, 0x02	; 2
     5a0:	51 e0       	ldi	r21, 0x01	; 1
     5a2:	62 e0       	ldi	r22, 0x02	; 2
     5a4:	ce 01       	movw	r24, r28
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	3d d2       	rcall	.+1146   	; 0xa24 <init_motor>
     5aa:	83 e7       	ldi	r24, 0x73	; 115
     5ac:	fe 01       	movw	r30, r28
     5ae:	31 96       	adiw	r30, 0x01	; 1
     5b0:	a5 ee       	ldi	r26, 0xE5	; 229
     5b2:	b2 e0       	ldi	r27, 0x02	; 2
     5b4:	01 90       	ld	r0, Z+
     5b6:	0d 92       	st	X+, r0
     5b8:	8a 95       	dec	r24
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <main+0x6c>
     5bc:	c1 2c       	mov	r12, r1
     5be:	d1 2c       	mov	r13, r1
	init_pid(&basemotor1, 1.0, 0.0, 0.0); //0.006, 0.00000008
     5c0:	76 01       	movw	r14, r12
     5c2:	97 01       	movw	r18, r14
     5c4:	86 01       	movw	r16, r12
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	60 e8       	ldi	r22, 0x80	; 128
     5cc:	7f e3       	ldi	r23, 0x3F	; 63
     5ce:	85 ee       	ldi	r24, 0xE5	; 229
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	7d d2       	rcall	.+1274   	; 0xace <init_pid>
     5d4:	bf 92       	push	r11
     5d6:	1f 92       	push	r1
	basemotor2 = init_motor(2, &PORTH, PH3, PH4, &DDRH, DDH3, DDH4, &DDRH, DDH3, &OCR4B, &OCR4A, 180);
     5d8:	88 ea       	ldi	r24, 0xA8	; 168
     5da:	8f 93       	push	r24
     5dc:	1f 92       	push	r1
     5de:	8a ea       	ldi	r24, 0xAA	; 170
     5e0:	8f 93       	push	r24
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	8f 93       	push	r24
     5e6:	68 94       	set
     5e8:	aa 24       	eor	r10, r10
     5ea:	a2 f8       	bld	r10, 2
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f3 e0       	ldi	r31, 0x03	; 3
     5f0:	cf 2e       	mov	r12, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	ee 24       	eor	r14, r14
     5f6:	e3 94       	inc	r14
     5f8:	fe 2c       	mov	r15, r14
     5fa:	04 e0       	ldi	r16, 0x04	; 4
     5fc:	23 e0       	ldi	r18, 0x03	; 3
     5fe:	42 e0       	ldi	r20, 0x02	; 2
     600:	51 e0       	ldi	r21, 0x01	; 1
     602:	62 e0       	ldi	r22, 0x02	; 2
     604:	ce 01       	movw	r24, r28
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	0d d2       	rcall	.+1050   	; 0xa24 <init_motor>
     60a:	83 e7       	ldi	r24, 0x73	; 115
     60c:	fe 01       	movw	r30, r28
     60e:	31 96       	adiw	r30, 0x01	; 1
     610:	a9 e0       	ldi	r26, 0x09	; 9
     612:	b5 e0       	ldi	r27, 0x05	; 5
     614:	01 90       	ld	r0, Z+
     616:	0d 92       	st	X+, r0
     618:	8a 95       	dec	r24
     61a:	e1 f7       	brne	.-8      	; 0x614 <main+0xcc>
     61c:	c1 2c       	mov	r12, r1
     61e:	d1 2c       	mov	r13, r1
	init_pid(&basemotor2, 1.0, 0.0, 0.0); //0000008
     620:	76 01       	movw	r14, r12
     622:	97 01       	movw	r18, r14
     624:	86 01       	movw	r16, r12
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	60 e8       	ldi	r22, 0x80	; 128
     62c:	7f e3       	ldi	r23, 0x3F	; 63
     62e:	89 e0       	ldi	r24, 0x09	; 9
     630:	95 e0       	ldi	r25, 0x05	; 5
     632:	4d d2       	rcall	.+1178   	; 0xace <init_pid>
     634:	bf 92       	push	r11
     636:	1f 92       	push	r1

	micromotor3 = init_motor(1, &PORTL, PL2, PL3, &DDRL, DDL2, DDL3, &DDRB, DDB6, &OCR1B, NULL, 180);
     638:	1f 92       	push	r1
     63a:	1f 92       	push	r1
     63c:	8a e8       	ldi	r24, 0x8A	; 138
     63e:	8f 93       	push	r24
     640:	86 e0       	ldi	r24, 0x06	; 6
     642:	8f 93       	push	r24
     644:	0f 2e       	mov	r0, r31
     646:	f4 e2       	ldi	r31, 0x24	; 36
     648:	8f 2e       	mov	r8, r31
     64a:	91 2c       	mov	r9, r1
     64c:	f0 2d       	mov	r31, r0
     64e:	0f 2e       	mov	r0, r31
     650:	f3 e0       	ldi	r31, 0x03	; 3
     652:	af 2e       	mov	r10, r31
     654:	f0 2d       	mov	r31, r0
     656:	68 94       	set
     658:	cc 24       	eor	r12, r12
     65a:	c1 f8       	bld	r12, 1
     65c:	0f 2e       	mov	r0, r31
     65e:	fa e0       	ldi	r31, 0x0A	; 10
     660:	ef 2e       	mov	r14, r31
     662:	ff 24       	eor	r15, r15
     664:	f3 94       	inc	r15
     666:	f0 2d       	mov	r31, r0
     668:	03 e0       	ldi	r16, 0x03	; 3
     66a:	22 e0       	ldi	r18, 0x02	; 2
     66c:	4b e0       	ldi	r20, 0x0B	; 11
     66e:	51 e0       	ldi	r21, 0x01	; 1
     670:	61 e0       	ldi	r22, 0x01	; 1
     672:	ce 01       	movw	r24, r28
     674:	01 96       	adiw	r24, 0x01	; 1
     676:	d6 d1       	rcall	.+940    	; 0xa24 <init_motor>
     678:	83 e7       	ldi	r24, 0x73	; 115
     67a:	fe 01       	movw	r30, r28
     67c:	31 96       	adiw	r30, 0x01	; 1
     67e:	a4 e9       	ldi	r26, 0x94	; 148
     680:	b4 e0       	ldi	r27, 0x04	; 4
     682:	01 90       	ld	r0, Z+
     684:	0d 92       	st	X+, r0
     686:	8a 95       	dec	r24
     688:	e1 f7       	brne	.-8      	; 0x682 <main+0x13a>
     68a:	0f 2e       	mov	r0, r31
     68c:	f5 e9       	ldi	r31, 0x95	; 149
	init_pid(&micromotor3, 1.2, 0.05, 0.0000008);
     68e:	cf 2e       	mov	r12, r31
     690:	ff eb       	ldi	r31, 0xBF	; 191
     692:	df 2e       	mov	r13, r31
     694:	f6 e5       	ldi	r31, 0x56	; 86
     696:	ef 2e       	mov	r14, r31
     698:	f5 e3       	ldi	r31, 0x35	; 53
     69a:	ff 2e       	mov	r15, r31
     69c:	f0 2d       	mov	r31, r0
     69e:	0d ec       	ldi	r16, 0xCD	; 205
     6a0:	1c ec       	ldi	r17, 0xCC	; 204
     6a2:	2c e4       	ldi	r18, 0x4C	; 76
     6a4:	3d e3       	ldi	r19, 0x3D	; 61
     6a6:	4a e9       	ldi	r20, 0x9A	; 154
     6a8:	59 e9       	ldi	r21, 0x99	; 153
     6aa:	69 e9       	ldi	r22, 0x99	; 153
     6ac:	7f e3       	ldi	r23, 0x3F	; 63
     6ae:	84 e9       	ldi	r24, 0x94	; 148
     6b0:	94 e0       	ldi	r25, 0x04	; 4
     6b2:	0d d2       	rcall	.+1050   	; 0xace <init_pid>
     6b4:	7b d2       	rcall	.+1270   	; 0xbac <init_pwm>
	//micromotor4 = init_motor(1, &PORTL, PL0, PL1, &DDRL, DDL0, DDL1, &DDRB, DDB7, &OCR0A, NULL, 255);
	//init_pid(&micromotor4, 1.2, 0.05, 0.0000008);

	//INITIALIZE MOTORS PWM
	init_pwm();
     6b6:	80 b3       	in	r24, 0x10	; 16
     6b8:	80 68       	ori	r24, 0x80	; 128

	//SETUP RELAY PIN
	DDRF |= (1 << DDF7);
     6ba:	80 bb       	out	0x10, r24	; 16
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <connected>

    while (1) 
    {	
		if(!connected) if(strcmp(read, "conn") == 0){connected = 1; USART0_send_string("ackc\n");}
     6ca:	81 11       	cpse	r24, r1
     6cc:	0e c0       	rjmp	.+28     	; 0x6ea <main+0x1a2>
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	72 e0       	ldi	r23, 0x02	; 2
     6d2:	8f e2       	ldi	r24, 0x2F	; 47
     6d4:	94 e0       	ldi	r25, 0x04	; 4
     6d6:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <strcmp>
     6da:	89 2b       	or	r24, r25
     6dc:	31 f4       	brne	.+12     	; 0x6ea <main+0x1a2>
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <connected>
     6e4:	86 e0       	ldi	r24, 0x06	; 6
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	c7 d5       	rcall	.+2958   	; 0x1278 <USART0_send_string>
     6ea:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <connected>
		if(connected){
     6ee:	88 23       	and	r24, r24
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <main+0x1ac>
     6f2:	91 c1       	rjmp	.+802    	; 0xa16 <main+0x4ce>
     6f4:	6c e0       	ldi	r22, 0x0C	; 12
     6f6:	72 e0       	ldi	r23, 0x02	; 2
			if(strcmp(read, "disc") == 0){connected = 0; USART0_send_string("ackd\n");}
     6f8:	8f e2       	ldi	r24, 0x2F	; 47
     6fa:	94 e0       	ldi	r25, 0x04	; 4
     6fc:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <strcmp>
     700:	89 2b       	or	r24, r25
     702:	29 f4       	brne	.+10     	; 0x70e <main+0x1c6>
     704:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <connected>
     708:	81 e1       	ldi	r24, 0x11	; 17
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	b5 d5       	rcall	.+2922   	; 0x1278 <USART0_send_string>
     70e:	67 e1       	ldi	r22, 0x17	; 23
     710:	72 e0       	ldi	r23, 0x02	; 2

			token = strtok(read, "/");
     712:	8f e2       	ldi	r24, 0x2F	; 47
     714:	94 e0       	ldi	r25, 0x04	; 4
     716:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <strtok>
     71a:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <token+0x1>
     71e:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <token>
     722:	00 97       	sbiw	r24, 0x00	; 0
     724:	29 f0       	breq	.+10     	; 0x730 <main+0x1e8>
			if (token != NULL) strcpy(command, token);
     726:	bc 01       	movw	r22, r24
     728:	88 e5       	ldi	r24, 0x58	; 88
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	0e 94 df 0b 	call	0x17be	; 0x17be <strcpy>
     730:	69 e1       	ldi	r22, 0x19	; 25
     732:	72 e0       	ldi	r23, 0x02	; 2

			if(strcmp(command, "HM") == 0){homing = 1; start_s = 0;}
     734:	88 e5       	ldi	r24, 0x58	; 88
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <strcmp>
     73c:	89 2b       	or	r24, r25
     73e:	31 f4       	brne	.+12     	; 0x74c <main+0x204>
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <homing>
     746:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <start_s>
     74a:	0a c0       	rjmp	.+20     	; 0x760 <main+0x218>
     74c:	6c e1       	ldi	r22, 0x1C	; 28
     74e:	72 e0       	ldi	r23, 0x02	; 2
			else if(strcmp(command, "HS") == 0) homing = 0;
     750:	88 e5       	ldi	r24, 0x58	; 88
     752:	93 e0       	ldi	r25, 0x03	; 3
     754:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <strcmp>
     758:	89 2b       	or	r24, r25
     75a:	11 f4       	brne	.+4      	; 0x760 <main+0x218>
     75c:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <homing>
     760:	6f e1       	ldi	r22, 0x1F	; 31
     762:	72 e0       	ldi	r23, 0x02	; 2

			if(strcmp(command, "ST") == 0){start_s = 1; homing = 0;}
     764:	88 e5       	ldi	r24, 0x58	; 88
     766:	93 e0       	ldi	r25, 0x03	; 3
     768:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <strcmp>
     76c:	89 2b       	or	r24, r25
     76e:	31 f4       	brne	.+12     	; 0x77c <main+0x234>
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <start_s>
     776:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <homing>
     77a:	0a c0       	rjmp	.+20     	; 0x790 <main+0x248>
     77c:	62 e2       	ldi	r22, 0x22	; 34
     77e:	72 e0       	ldi	r23, 0x02	; 2
			else if(strcmp(command, "SO") == 0) start_s = 0;
     780:	88 e5       	ldi	r24, 0x58	; 88
     782:	93 e0       	ldi	r25, 0x03	; 3
     784:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <strcmp>
     788:	89 2b       	or	r24, r25
     78a:	11 f4       	brne	.+4      	; 0x790 <main+0x248>
     78c:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <start_s>
     790:	67 e1       	ldi	r22, 0x17	; 23
			//else if(strcmp(command, "CM1D") == 0) current_motor1 = 0.2;

			//if(strcmp(command, "CM2") == 0) current_motor2 = 6.0;
			//else if(strcmp(command, "CM2D") == 0) current_motor2 = 0.2;

			token = strtok(NULL, "/");
     792:	72 e0       	ldi	r23, 0x02	; 2
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <strtok>
     79c:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <token+0x1>
     7a0:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <token>
     7a4:	00 97       	sbiw	r24, 0x00	; 0
			if (token != NULL) setpoint1 = atoi(token);
     7a6:	69 f0       	breq	.+26     	; 0x7c2 <main+0x27a>
     7a8:	e1 d7       	rcall	.+4034   	; 0x176c <atoi>
     7aa:	09 2e       	mov	r0, r25
     7ac:	00 0c       	add	r0, r0
     7ae:	aa 0b       	sbc	r26, r26
     7b0:	bb 0b       	sbc	r27, r27
     7b2:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <setpoint1>
     7b6:	90 93 6c 02 	sts	0x026C, r25	; 0x80026c <setpoint1+0x1>
     7ba:	a0 93 6d 02 	sts	0x026D, r26	; 0x80026d <setpoint1+0x2>
     7be:	b0 93 6e 02 	sts	0x026E, r27	; 0x80026e <setpoint1+0x3>

			token = strtok(NULL, "/");
     7c2:	67 e1       	ldi	r22, 0x17	; 23
     7c4:	72 e0       	ldi	r23, 0x02	; 2
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	ed d7       	rcall	.+4058   	; 0x17a6 <strtok>
     7cc:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <token+0x1>
     7d0:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <token>
     7d4:	00 97       	sbiw	r24, 0x00	; 0
			if (token != NULL) setpoint2 = atoi(token);
     7d6:	69 f0       	breq	.+26     	; 0x7f2 <main+0x2aa>
     7d8:	c9 d7       	rcall	.+3986   	; 0x176c <atoi>
     7da:	09 2e       	mov	r0, r25
     7dc:	00 0c       	add	r0, r0
     7de:	aa 0b       	sbc	r26, r26
     7e0:	bb 0b       	sbc	r27, r27
     7e2:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <setpoint2>
     7e6:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <setpoint2+0x1>
     7ea:	a0 93 69 02 	sts	0x0269, r26	; 0x800269 <setpoint2+0x2>
     7ee:	b0 93 6a 02 	sts	0x026A, r27	; 0x80026a <setpoint2+0x3>

			token = strtok(NULL, "/");
     7f2:	67 e1       	ldi	r22, 0x17	; 23
     7f4:	72 e0       	ldi	r23, 0x02	; 2
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	d5 d7       	rcall	.+4010   	; 0x17a6 <strtok>
     7fc:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <token+0x1>
     800:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <token>
     804:	00 97       	sbiw	r24, 0x00	; 0
			if (token != NULL) setpoint3 = atoi(token);
     806:	69 f0       	breq	.+26     	; 0x822 <main+0x2da>
     808:	b1 d7       	rcall	.+3938   	; 0x176c <atoi>
     80a:	09 2e       	mov	r0, r25
     80c:	00 0c       	add	r0, r0
     80e:	aa 0b       	sbc	r26, r26
     810:	bb 0b       	sbc	r27, r27
     812:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <setpoint3>
     816:	90 93 64 02 	sts	0x0264, r25	; 0x800264 <setpoint3+0x1>
     81a:	a0 93 65 02 	sts	0x0265, r26	; 0x800265 <setpoint3+0x2>
     81e:	b0 93 66 02 	sts	0x0266, r27	; 0x800266 <setpoint3+0x3>
     822:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <homing>

			if(homing){ 
     826:	88 23       	and	r24, r24
     828:	09 f4       	brne	.+2      	; 0x82c <main+0x2e4>
     82a:	69 c0       	rjmp	.+210    	; 0x8fe <main+0x3b6>
     82c:	60 e5       	ldi	r22, 0x50	; 80
				set_max_speed(&basemotor1, 80);
     82e:	85 ee       	ldi	r24, 0xE5	; 229
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	d8 d4       	rcall	.+2480   	; 0x11e4 <set_max_speed>
     834:	60 e5       	ldi	r22, 0x50	; 80
				set_max_speed(&basemotor2, 80);
     836:	89 e0       	ldi	r24, 0x09	; 9
     838:	95 e0       	ldi	r25, 0x05	; 5
     83a:	d4 d4       	rcall	.+2472   	; 0x11e4 <set_max_speed>
     83c:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>

				if(homing1) {
     840:	88 23       	and	r24, r24
     842:	d9 f0       	breq	.+54     	; 0x87a <main+0x332>
     844:	85 e2       	ldi	r24, 0x25	; 37
     846:	92 e0       	ldi	r25, 0x02	; 2
					USART0_send_string("hominh1\n");
     848:	17 d5       	rcall	.+2606   	; 0x1278 <USART0_send_string>
     84a:	00 91 7d 02 	lds	r16, 0x027D	; 0x80027d <motor1_currentPos>
     84e:	10 91 7e 02 	lds	r17, 0x027E	; 0x80027e <motor1_currentPos+0x1>
					move_abs(&basemotor1, -20000, motor1_currentPos, current_motor1);
     852:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <motor1_currentPos+0x2>
     856:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <motor1_currentPos+0x3>
     85a:	c0 90 58 02 	lds	r12, 0x0258	; 0x800258 <current_motor1>
     85e:	d0 90 59 02 	lds	r13, 0x0259	; 0x800259 <current_motor1+0x1>
     862:	e0 90 5a 02 	lds	r14, 0x025A	; 0x80025a <current_motor1+0x2>
     866:	f0 90 5b 02 	lds	r15, 0x025B	; 0x80025b <current_motor1+0x3>
     86a:	40 ee       	ldi	r20, 0xE0	; 224
     86c:	51 eb       	ldi	r21, 0xB1	; 177
     86e:	6f ef       	ldi	r22, 0xFF	; 255
     870:	7f ef       	ldi	r23, 0xFF	; 255
     872:	85 ee       	ldi	r24, 0xE5	; 229
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	29 d4       	rcall	.+2130   	; 0x10ca <move_abs>
     878:	0b c0       	rjmp	.+22     	; 0x890 <main+0x348>
     87a:	85 ee       	ldi	r24, 0xE5	; 229
     87c:	92 e0       	ldi	r25, 0x02	; 2
					 
				}else{ stop(&basemotor1); motor1_currentPos = 0; }
     87e:	0d d2       	rcall	.+1050   	; 0xc9a <stop>
     880:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <motor1_currentPos>
     884:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <motor1_currentPos+0x1>
     888:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <motor1_currentPos+0x2>
     88c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <motor1_currentPos+0x3>
     890:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <homing2>
				if(homing2) {
     894:	88 23       	and	r24, r24
     896:	d9 f0       	breq	.+54     	; 0x8ce <main+0x386>
     898:	8e e2       	ldi	r24, 0x2E	; 46
     89a:	92 e0       	ldi	r25, 0x02	; 2
					USART0_send_string("hominh2\n");
     89c:	ed d4       	rcall	.+2522   	; 0x1278 <USART0_send_string>
     89e:	00 91 79 02 	lds	r16, 0x0279	; 0x800279 <motor2_currentPos>
     8a2:	10 91 7a 02 	lds	r17, 0x027A	; 0x80027a <motor2_currentPos+0x1>
					move_abs(&basemotor2, -20000, motor2_currentPos, current_motor2);
     8a6:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <motor2_currentPos+0x2>
     8aa:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <motor2_currentPos+0x3>
     8ae:	c0 90 54 02 	lds	r12, 0x0254	; 0x800254 <current_motor2>
     8b2:	d0 90 55 02 	lds	r13, 0x0255	; 0x800255 <current_motor2+0x1>
     8b6:	e0 90 56 02 	lds	r14, 0x0256	; 0x800256 <current_motor2+0x2>
     8ba:	f0 90 57 02 	lds	r15, 0x0257	; 0x800257 <current_motor2+0x3>
     8be:	40 ee       	ldi	r20, 0xE0	; 224
     8c0:	51 eb       	ldi	r21, 0xB1	; 177
     8c2:	6f ef       	ldi	r22, 0xFF	; 255
     8c4:	7f ef       	ldi	r23, 0xFF	; 255
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	95 e0       	ldi	r25, 0x05	; 5
     8ca:	ff d3       	rcall	.+2046   	; 0x10ca <move_abs>
     8cc:	0b c0       	rjmp	.+22     	; 0x8e4 <main+0x39c>
     8ce:	89 e0       	ldi	r24, 0x09	; 9
     8d0:	95 e0       	ldi	r25, 0x05	; 5
					
				}else{ stop(&basemotor2); motor2_currentPos = 0; }
     8d2:	e3 d1       	rcall	.+966    	; 0xc9a <stop>
     8d4:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <motor2_currentPos>
     8d8:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <motor2_currentPos+0x1>
     8dc:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <motor2_currentPos+0x2>
     8e0:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <motor2_currentPos+0x3>
     8e4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
				if(!homing1 && !homing2){ homing = 0; USART0_send_string("ackh\n"); }
     8e8:	81 11       	cpse	r24, r1
     8ea:	09 c0       	rjmp	.+18     	; 0x8fe <main+0x3b6>
     8ec:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <homing2>
     8f0:	81 11       	cpse	r24, r1
     8f2:	05 c0       	rjmp	.+10     	; 0x8fe <main+0x3b6>
     8f4:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <homing>
     8f8:	87 e3       	ldi	r24, 0x37	; 55
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	bd d4       	rcall	.+2426   	; 0x1278 <USART0_send_string>
     8fe:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <start_s>
     902:	88 23       	and	r24, r24
			}

			if(start_s){
     904:	09 f4       	brne	.+2      	; 0x908 <main+0x3c0>
     906:	76 c0       	rjmp	.+236    	; 0x9f4 <main+0x4ac>
     908:	64 9b       	sbis	0x0c, 4	; 12
     90a:	1e c0       	rjmp	.+60     	; 0x948 <main+0x400>
     90c:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <limit1>
				// IMPLEMENT DATA READY CHECKING
				//current_motor1 = read_current(6,400);
				//current_motor2 = read_current(7,400);

				if(PINE & (1 << PE4)) {limit1 = 0; move_abs(&basemotor1, setpoint1, motor1_currentPos, current_motor1);}
     910:	00 91 7d 02 	lds	r16, 0x027D	; 0x80027d <motor1_currentPos>
     914:	10 91 7e 02 	lds	r17, 0x027E	; 0x80027e <motor1_currentPos+0x1>
     918:	20 91 7f 02 	lds	r18, 0x027F	; 0x80027f <motor1_currentPos+0x2>
     91c:	30 91 80 02 	lds	r19, 0x0280	; 0x800280 <motor1_currentPos+0x3>
     920:	c0 90 58 02 	lds	r12, 0x0258	; 0x800258 <current_motor1>
     924:	d0 90 59 02 	lds	r13, 0x0259	; 0x800259 <current_motor1+0x1>
     928:	e0 90 5a 02 	lds	r14, 0x025A	; 0x80025a <current_motor1+0x2>
     92c:	f0 90 5b 02 	lds	r15, 0x025B	; 0x80025b <current_motor1+0x3>
     930:	40 91 6b 02 	lds	r20, 0x026B	; 0x80026b <setpoint1>
     934:	50 91 6c 02 	lds	r21, 0x026C	; 0x80026c <setpoint1+0x1>
     938:	60 91 6d 02 	lds	r22, 0x026D	; 0x80026d <setpoint1+0x2>
     93c:	70 91 6e 02 	lds	r23, 0x026E	; 0x80026e <setpoint1+0x3>
     940:	85 ee       	ldi	r24, 0xE5	; 229
     942:	92 e0       	ldi	r25, 0x02	; 2
     944:	c2 d3       	rcall	.+1924   	; 0x10ca <move_abs>
     946:	03 c0       	rjmp	.+6      	; 0x94e <main+0x406>
     948:	85 ee       	ldi	r24, 0xE5	; 229
     94a:	92 e0       	ldi	r25, 0x02	; 2
				else stop(&basemotor1);
     94c:	a6 d1       	rcall	.+844    	; 0xc9a <stop>
     94e:	65 9b       	sbis	0x0c, 5	; 12
     950:	20 c0       	rjmp	.+64     	; 0x992 <main+0x44a>
     952:	66 9b       	sbis	0x0c, 6	; 12

				if((PINE & (1 << PE5)) && (PINE & (1 << PE6))) {limit2 = 0; move_abs(&basemotor2, setpoint2, motor2_currentPos, current_motor2);}
     954:	1e c0       	rjmp	.+60     	; 0x992 <main+0x44a>
     956:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <limit2>
     95a:	00 91 79 02 	lds	r16, 0x0279	; 0x800279 <motor2_currentPos>
     95e:	10 91 7a 02 	lds	r17, 0x027A	; 0x80027a <motor2_currentPos+0x1>
     962:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <motor2_currentPos+0x2>
     966:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <motor2_currentPos+0x3>
     96a:	c0 90 54 02 	lds	r12, 0x0254	; 0x800254 <current_motor2>
     96e:	d0 90 55 02 	lds	r13, 0x0255	; 0x800255 <current_motor2+0x1>
     972:	e0 90 56 02 	lds	r14, 0x0256	; 0x800256 <current_motor2+0x2>
     976:	f0 90 57 02 	lds	r15, 0x0257	; 0x800257 <current_motor2+0x3>
     97a:	40 91 67 02 	lds	r20, 0x0267	; 0x800267 <setpoint2>
     97e:	50 91 68 02 	lds	r21, 0x0268	; 0x800268 <setpoint2+0x1>
     982:	60 91 69 02 	lds	r22, 0x0269	; 0x800269 <setpoint2+0x2>
     986:	70 91 6a 02 	lds	r23, 0x026A	; 0x80026a <setpoint2+0x3>
     98a:	89 e0       	ldi	r24, 0x09	; 9
     98c:	95 e0       	ldi	r25, 0x05	; 5
     98e:	9d d3       	rcall	.+1850   	; 0x10ca <move_abs>
     990:	03 c0       	rjmp	.+6      	; 0x998 <main+0x450>
     992:	89 e0       	ldi	r24, 0x09	; 9
     994:	95 e0       	ldi	r25, 0x05	; 5
				else stop(&basemotor2);
     996:	81 d1       	rcall	.+770    	; 0xc9a <stop>
     998:	00 91 75 02 	lds	r16, 0x0275	; 0x800275 <motor3_currentPos>
     99c:	10 91 76 02 	lds	r17, 0x0276	; 0x800276 <motor3_currentPos+0x1>

				move_abs(&micromotor3, setpoint3, motor3_currentPos, 0.0);
     9a0:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <motor3_currentPos+0x2>
     9a4:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <motor3_currentPos+0x3>
     9a8:	40 91 63 02 	lds	r20, 0x0263	; 0x800263 <setpoint3>
     9ac:	50 91 64 02 	lds	r21, 0x0264	; 0x800264 <setpoint3+0x1>
     9b0:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <setpoint3+0x2>
     9b4:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <setpoint3+0x3>
     9b8:	c1 2c       	mov	r12, r1
     9ba:	d1 2c       	mov	r13, r1
     9bc:	76 01       	movw	r14, r12
     9be:	84 e9       	ldi	r24, 0x94	; 148
     9c0:	94 e0       	ldi	r25, 0x04	; 4
     9c2:	83 d3       	rcall	.+1798   	; 0x10ca <move_abs>
     9c4:	e5 ee       	ldi	r30, 0xE5	; 229
     9c6:	f2 e0       	ldi	r31, 0x02	; 2

				sprintf(response,"%d motor 1\n", basemotor1.pwm_value);
     9c8:	86 8d       	ldd	r24, Z+30	; 0x1e
     9ca:	8f 93       	push	r24
     9cc:	85 8d       	ldd	r24, Z+29	; 0x1d
     9ce:	8f 93       	push	r24
     9d0:	8d e3       	ldi	r24, 0x3D	; 61
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	81 e8       	ldi	r24, 0x81	; 129
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	9f 93       	push	r25
     9de:	8f 93       	push	r24
     9e0:	24 d7       	rcall	.+3656   	; 0x182a <sprintf>

				//dtostrf(current_motor2, 6, 4, response);
				USART0_send_string(response);
     9e2:	81 e8       	ldi	r24, 0x81	; 129
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	48 d4       	rcall	.+2192   	; 0x1278 <USART0_send_string>
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	0f 90       	pop	r0
     9f2:	0f 90       	pop	r0
     9f4:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <start_s>
			}
			
			if(!start_s && !homing){
     9f8:	81 11       	cpse	r24, r1
     9fa:	0d c0       	rjmp	.+26     	; 0xa16 <main+0x4ce>
     9fc:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <homing>
     a00:	81 11       	cpse	r24, r1
     a02:	09 c0       	rjmp	.+18     	; 0xa16 <main+0x4ce>
     a04:	85 ee       	ldi	r24, 0xE5	; 229
				stop(&basemotor1);
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	48 d1       	rcall	.+656    	; 0xc9a <stop>
     a0a:	89 e0       	ldi	r24, 0x09	; 9
     a0c:	95 e0       	ldi	r25, 0x05	; 5
				stop(&basemotor2);
     a0e:	45 d1       	rcall	.+650    	; 0xc9a <stop>
     a10:	84 e9       	ldi	r24, 0x94	; 148
     a12:	94 e0       	ldi	r25, 0x04	; 4
     a14:	42 d1       	rcall	.+644    	; 0xc9a <stop>
				stop(&micromotor3);
     a16:	8f e3       	ldi	r24, 0x3F	; 63
     a18:	9c e9       	ldi	r25, 0x9C	; 156
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <main+0x4d2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <main+0x4d8>
     a20:	00 00       	nop
     a22:	51 ce       	rjmp	.-862    	; 0x6c6 <main+0x17e>

00000a24 <init_motor>:
#include "motor.h"

Motor init_motor(uint8_t motortype, volatile uint8_t *portdirpin, uint8_t dirpin1, uint8_t dirpin2,
				volatile uint8_t *ddreg, uint8_t ddrpin1, uint8_t ddrpin2, 
				volatile uint8_t *ddrpwm, uint8_t pwmpin, volatile uint16_t *ocr1, 
				volatile uint16_t *ocr2 , uint8_t max_speed){
     a24:	6f 92       	push	r6
     a26:	7f 92       	push	r7
     a28:	8f 92       	push	r8
     a2a:	9f 92       	push	r9
     a2c:	af 92       	push	r10
     a2e:	cf 92       	push	r12
     a30:	df 92       	push	r13
     a32:	ef 92       	push	r14
     a34:	ff 92       	push	r15
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	3c 01       	movw	r6, r24
     a44:	16 2f       	mov	r17, r22
     a46:	6c 2d       	mov	r22, r12
     a48:	d9 88       	ldd	r13, Y+17	; 0x11
     a4a:	8e 89       	ldd	r24, Y+22	; 0x16
	Motor motor;
	motor.motortype		= motortype;
     a4c:	f3 01       	movw	r30, r6
     a4e:	10 83       	st	Z, r17
	motor.portdirpin	= portdirpin;
     a50:	56 83       	std	Z+6, r21	; 0x06
     a52:	45 83       	std	Z+5, r20	; 0x05
	motor.dirpin1		= dirpin1;
     a54:	27 83       	std	Z+7, r18	; 0x07
	motor.dirpin2		= dirpin2;
     a56:	00 87       	std	Z+8, r16	; 0x08
	motor.ddreg			= ddreg;
     a58:	f2 82       	std	Z+2, r15	; 0x02
     a5a:	e1 82       	std	Z+1, r14	; 0x01
	motor.ddrpin1		= ddrpin1;
     a5c:	c3 82       	std	Z+3, r12	; 0x03
	motor.ddrpin2		= ddrpin2;
     a5e:	a4 82       	std	Z+4, r10	; 0x04
	motor.ddrpwm		= ddrpwm;
     a60:	92 86       	std	Z+10, r9	; 0x0a
     a62:	81 86       	std	Z+9, r8	; 0x09
	motor.pwmpin		= pwmpin;
     a64:	d3 86       	std	Z+11, r13	; 0x0b
	motor.ocr1			= ocr1;
     a66:	2a 89       	ldd	r18, Y+18	; 0x12
     a68:	3b 89       	ldd	r19, Y+19	; 0x13
     a6a:	30 8f       	std	Z+24, r19	; 0x18
     a6c:	27 8b       	std	Z+23, r18	; 0x17
	motor.ocr2			= ocr2;
     a6e:	2c 89       	ldd	r18, Y+20	; 0x14
     a70:	3d 89       	ldd	r19, Y+21	; 0x15
     a72:	32 8f       	std	Z+26, r19	; 0x1a
     a74:	21 8f       	std	Z+25, r18	; 0x19
	motor.max_speed		= max_speed;
     a76:	84 87       	std	Z+12, r24	; 0x0c
	motor.pwm_value		= max_speed;
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	96 8f       	std	Z+30, r25	; 0x1e
     a7c:	85 8f       	std	Z+29, r24	; 0x1d
	motor.min_speed		= 50;
     a7e:	82 e3       	ldi	r24, 0x32	; 50
     a80:	85 87       	std	Z+13, r24	; 0x0d

	//SET DIR PIN OUTPUTS
	set_output(motor.ddreg, motor.ddrpin1);
     a82:	c7 01       	movw	r24, r14
     a84:	8f db       	rcall	.-2274   	; 0x1a4 <set_output>
	set_output(motor.ddreg, motor.ddrpin2);
     a86:	6a 2d       	mov	r22, r10
     a88:	c7 01       	movw	r24, r14
     a8a:	8c db       	rcall	.-2280   	; 0x1a4 <set_output>

	if(motortype == 1){			
     a8c:	11 30       	cpi	r17, 0x01	; 1
     a8e:	49 f4       	brne	.+18     	; 0xaa2 <init_motor+0x7e>
		motor.ticks_per_rev = 12; //MICROMOTOR
     a90:	8c e0       	ldi	r24, 0x0C	; 12
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	f3 01       	movw	r30, r6
     a96:	94 8f       	std	Z+28, r25	; 0x1c
     a98:	83 8f       	std	Z+27, r24	; 0x1b
		//SET PWM PIN OUTPUTS
		set_output(motor.ddrpwm, motor.pwmpin);
     a9a:	6d 2d       	mov	r22, r13
     a9c:	c4 01       	movw	r24, r8
     a9e:	82 db       	rcall	.-2300   	; 0x1a4 <set_output>
     aa0:	07 c0       	rjmp	.+14     	; 0xab0 <init_motor+0x8c>
	}		
	else if(motortype == 2) motor.ticks_per_rev = 700; //BASE MOTOR
     aa2:	12 30       	cpi	r17, 0x02	; 2
     aa4:	29 f4       	brne	.+10     	; 0xab0 <init_motor+0x8c>
     aa6:	8c eb       	ldi	r24, 0xBC	; 188
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	f3 01       	movw	r30, r6
     aac:	94 8f       	std	Z+28, r25	; 0x1c
     aae:	83 8f       	std	Z+27, r24	; 0x1b

	return motor;
}
     ab0:	c3 01       	movw	r24, r6
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	af 90       	pop	r10
     ac4:	9f 90       	pop	r9
     ac6:	8f 90       	pop	r8
     ac8:	7f 90       	pop	r7
     aca:	6f 90       	pop	r6
     acc:	08 95       	ret

00000ace <init_pid>:

void init_pid(Motor *motor, float kp, float kd, float ki){
     ace:	cf 92       	push	r12
     ad0:	df 92       	push	r13
     ad2:	ef 92       	push	r14
     ad4:	ff 92       	push	r15
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	ec 01       	movw	r28, r24
	motor->pid.Kp				= kp;
     ae0:	fc 01       	movw	r30, r24
     ae2:	e9 59       	subi	r30, 0x99	; 153
     ae4:	ff 4f       	sbci	r31, 0xFF	; 255
     ae6:	40 83       	st	Z, r20
     ae8:	51 83       	std	Z+1, r21	; 0x01
     aea:	62 83       	std	Z+2, r22	; 0x02
     aec:	73 83       	std	Z+3, r23	; 0x03
	motor->pid.Kd				= kd;
     aee:	34 96       	adiw	r30, 0x04	; 4
     af0:	00 83       	st	Z, r16
     af2:	11 83       	std	Z+1, r17	; 0x01
     af4:	22 83       	std	Z+2, r18	; 0x02
     af6:	33 83       	std	Z+3, r19	; 0x03
	motor->pid.Ki				= ki;
     af8:	34 96       	adiw	r30, 0x04	; 4
     afa:	c0 82       	st	Z, r12
     afc:	d1 82       	std	Z+1, r13	; 0x01
     afe:	e2 82       	std	Z+2, r14	; 0x02
     b00:	f3 82       	std	Z+3, r15	; 0x03
	motor->pid.prev_error		= 0;
     b02:	1f 8e       	std	Y+31, r1	; 0x1f
     b04:	18 a2       	std	Y+32, r1	; 0x20
     b06:	19 a2       	std	Y+33, r1	; 0x21
     b08:	1a a2       	std	Y+34, r1	; 0x22
	motor->pid.setpoint			= 0;
     b0a:	1b a6       	std	Y+43, r1	; 0x2b
     b0c:	1c a6       	std	Y+44, r1	; 0x2c
     b0e:	1d a6       	std	Y+45, r1	; 0x2d
     b10:	1e a6       	std	Y+46, r1	; 0x2e
	motor->pid.critical_delta	= 2 * motor->ticks_per_rev;
     b12:	6b 8d       	ldd	r22, Y+27	; 0x1b
     b14:	7c 8d       	ldd	r23, Y+28	; 0x1c
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8c 01       	movw	r16, r24
     b1c:	01 5a       	subi	r16, 0xA1	; 161
     b1e:	1f 4f       	sbci	r17, 0xFF	; 255
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	b7 d4       	rcall	.+2414   	; 0x1494 <__floatunsisf>
     b26:	f8 01       	movw	r30, r16
     b28:	60 83       	st	Z, r22
     b2a:	71 83       	std	Z+1, r23	; 0x01
     b2c:	82 83       	std	Z+2, r24	; 0x02
     b2e:	93 83       	std	Z+3, r25	; 0x03
	motor->pid.e_prop			= 0;
     b30:	1b aa       	std	Y+51, r1	; 0x33
     b32:	1c aa       	std	Y+52, r1	; 0x34
     b34:	1d aa       	std	Y+53, r1	; 0x35
     b36:	1e aa       	std	Y+54, r1	; 0x36
	motor->pid.e_dot			= 0;
     b38:	1f aa       	std	Y+55, r1	; 0x37
     b3a:	18 ae       	std	Y+56, r1	; 0x38
     b3c:	19 ae       	std	Y+57, r1	; 0x39
     b3e:	1a ae       	std	Y+58, r1	; 0x3a
	motor->pid.e_int			= 0;
     b40:	1b ae       	std	Y+59, r1	; 0x3b
     b42:	1c ae       	std	Y+60, r1	; 0x3c
     b44:	1d ae       	std	Y+61, r1	; 0x3d
     b46:	1e ae       	std	Y+62, r1	; 0x3e
	motor->pid.us_time			= 0;
     b48:	b0 97       	sbiw	r30, 0x20	; 32
     b4a:	1f ae       	std	Y+63, r1	; 0x3f
     b4c:	11 82       	std	Z+1, r1	; 0x01
     b4e:	12 82       	std	Z+2, r1	; 0x02
     b50:	13 82       	std	Z+3, r1	; 0x03
     b52:	14 82       	std	Z+4, r1	; 0x04
     b54:	15 82       	std	Z+5, r1	; 0x05
     b56:	16 82       	std	Z+6, r1	; 0x06
     b58:	17 82       	std	Z+7, r1	; 0x07
	motor->pid.d_time			= 0;
     b5a:	38 96       	adiw	r30, 0x08	; 8
     b5c:	10 82       	st	Z, r1
     b5e:	11 82       	std	Z+1, r1	; 0x01
     b60:	12 82       	std	Z+2, r1	; 0x02
     b62:	13 82       	std	Z+3, r1	; 0x03
     b64:	14 82       	std	Z+4, r1	; 0x04
     b66:	15 82       	std	Z+5, r1	; 0x05
     b68:	16 82       	std	Z+6, r1	; 0x06
     b6a:	17 82       	std	Z+7, r1	; 0x07
	motor->pid.prev_time		= 0;
     b6c:	38 96       	adiw	r30, 0x08	; 8
     b6e:	10 82       	st	Z, r1
     b70:	11 82       	std	Z+1, r1	; 0x01
     b72:	12 82       	std	Z+2, r1	; 0x02
     b74:	13 82       	std	Z+3, r1	; 0x03
     b76:	14 82       	std	Z+4, r1	; 0x04
     b78:	15 82       	std	Z+5, r1	; 0x05
     b7a:	16 82       	std	Z+6, r1	; 0x06
     b7c:	17 82       	std	Z+7, r1	; 0x07
	motor->pid.last_pos			= 0;
     b7e:	1f a2       	std	Y+39, r1	; 0x27
     b80:	18 a6       	std	Y+40, r1	; 0x28
     b82:	19 a6       	std	Y+41, r1	; 0x29
     b84:	1a a6       	std	Y+42, r1	; 0x2a
	motor->pid.prev_stall_time	= 0;
     b86:	c9 5a       	subi	r28, 0xA9	; 169
     b88:	df 4f       	sbci	r29, 0xFF	; 255
     b8a:	18 82       	st	Y, r1
     b8c:	19 82       	std	Y+1, r1	; 0x01
     b8e:	1a 82       	std	Y+2, r1	; 0x02
     b90:	1b 82       	std	Y+3, r1	; 0x03
     b92:	1c 82       	std	Y+4, r1	; 0x04
     b94:	1d 82       	std	Y+5, r1	; 0x05
     b96:	1e 82       	std	Y+6, r1	; 0x06
     b98:	1f 82       	std	Y+7, r1	; 0x07
}
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	ff 90       	pop	r15
     ba4:	ef 90       	pop	r14
     ba6:	df 90       	pop	r13
     ba8:	cf 90       	pop	r12
     baa:	08 95       	ret

00000bac <init_pwm>:

void init_pwm(void){
	//SET THE TIMER COUNTER CONTROL REGISTERS TO FAST PWM MODE WITH CLEAR ON COMPARE MATCH
	//MICRO MOTOR PWM SETUP
	TCCR0A |= (1 << COM0A1) | (1 << WGM01)  | (1 << WGM00);
     bac:	84 b5       	in	r24, 0x24	; 36
     bae:	83 68       	ori	r24, 0x83	; 131
     bb0:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=  (1 << CS00)  | (1 << WGM02);
     bb2:	85 b5       	in	r24, 0x25	; 37
     bb4:	89 60       	ori	r24, 0x09	; 9
     bb6:	85 bd       	out	0x25, r24	; 37
	
	TCCR1A |= (1 << COM1B1) | (1 << WGM10);
     bb8:	e0 e8       	ldi	r30, 0x80	; 128
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	81 62       	ori	r24, 0x21	; 33
     bc0:	80 83       	st	Z, r24
	TCCR1B |=  (1 << CS10)  | (1 << WGM12);
     bc2:	e1 e8       	ldi	r30, 0x81	; 129
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	89 60       	ori	r24, 0x09	; 9
     bca:	80 83       	st	Z, r24

	//BASE MOTOR PWM SETUP
	TCCR2A |= (1 << COM2B1) | (1 << WGM20); //| (1 << WGM21);
     bcc:	e0 eb       	ldi	r30, 0xB0	; 176
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	81 62       	ori	r24, 0x21	; 33
     bd4:	80 83       	st	Z, r24
	TCCR2B |=  (1 << CS20);
     bd6:	e1 eb       	ldi	r30, 0xB1	; 177
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	80 83       	st	Z, r24

	TCCR4A |= (1 << COM4A1) | (1 << COM4B1) | (1 << COM4C1) | (1 << WGM40);
     be0:	e0 ea       	ldi	r30, 0xA0	; 160
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	89 6a       	ori	r24, 0xA9	; 169
     be8:	80 83       	st	Z, r24
	TCCR4B |=  (1 << CS40);  //| (1 << WGM42);
     bea:	e1 ea       	ldi	r30, 0xA1	; 161
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	81 60       	ori	r24, 0x01	; 1
     bf2:	80 83       	st	Z, r24
     bf4:	08 95       	ret

00000bf6 <fwd>:
}

void fwd(Motor *motor){
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	fc 01       	movw	r30, r24
	motor->moving_fwd = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	81 8b       	std	Z+17, r24	; 0x11
	motor->moving_bwd = 0;
     c00:	12 8a       	std	Z+18, r1	; 0x12
	if(motor->motortype == 1){			//MICROMOTOR
     c02:	80 81       	ld	r24, Z
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	51 f4       	brne	.+20     	; 0xc1c <fwd+0x26>
     c08:	ef 01       	movw	r28, r30
		pin_high(motor->portdirpin, motor->dirpin1);
     c0a:	67 81       	ldd	r22, Z+7	; 0x07
     c0c:	85 81       	ldd	r24, Z+5	; 0x05
     c0e:	96 81       	ldd	r25, Z+6	; 0x06
     c10:	d5 da       	rcall	.-2646   	; 0x1bc <pin_high>
		pin_low(motor->portdirpin, motor->dirpin2);
     c12:	68 85       	ldd	r22, Y+8	; 0x08
     c14:	8d 81       	ldd	r24, Y+5	; 0x05
     c16:	9e 81       	ldd	r25, Y+6	; 0x06
     c18:	dd da       	rcall	.-2630   	; 0x1d4 <pin_low>
     c1a:	13 c0       	rjmp	.+38     	; 0xc42 <fwd+0x4c>
	}else if(motor->motortype == 2){	//BASE MOTOR
     c1c:	82 30       	cpi	r24, 0x02	; 2
     c1e:	89 f4       	brne	.+34     	; 0xc42 <fwd+0x4c>
		*motor->ocr1 = abs(motor->pwm_value);
     c20:	a7 89       	ldd	r26, Z+23	; 0x17
     c22:	b0 8d       	ldd	r27, Z+24	; 0x18
     c24:	85 8d       	ldd	r24, Z+29	; 0x1d
     c26:	96 8d       	ldd	r25, Z+30	; 0x1e
     c28:	99 23       	and	r25, r25
     c2a:	1c f4       	brge	.+6      	; 0xc32 <fwd+0x3c>
     c2c:	91 95       	neg	r25
     c2e:	81 95       	neg	r24
     c30:	91 09       	sbc	r25, r1
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	9c 93       	st	X, r25
     c36:	8e 93       	st	-X, r24
		*motor->ocr2 = 0;
     c38:	01 8c       	ldd	r0, Z+25	; 0x19
     c3a:	f2 8d       	ldd	r31, Z+26	; 0x1a
     c3c:	e0 2d       	mov	r30, r0
     c3e:	11 82       	std	Z+1, r1	; 0x01
     c40:	10 82       	st	Z, r1
	}
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <bwd>:

void bwd(Motor *motor){
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	fc 01       	movw	r30, r24
	motor->moving_fwd = 0;
     c4e:	11 8a       	std	Z+17, r1	; 0x11
	motor->moving_bwd = 1;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	82 8b       	std	Z+18, r24	; 0x12
	if(motor->motortype == 1){			//MICROMOTOR
     c54:	80 81       	ld	r24, Z
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	51 f4       	brne	.+20     	; 0xc6e <bwd+0x26>
     c5a:	ef 01       	movw	r28, r30
		pin_low(motor->portdirpin, motor->dirpin1);
     c5c:	67 81       	ldd	r22, Z+7	; 0x07
     c5e:	85 81       	ldd	r24, Z+5	; 0x05
     c60:	96 81       	ldd	r25, Z+6	; 0x06
     c62:	b8 da       	rcall	.-2704   	; 0x1d4 <pin_low>
		pin_high(motor->portdirpin, motor->dirpin2);
     c64:	68 85       	ldd	r22, Y+8	; 0x08
     c66:	8d 81       	ldd	r24, Y+5	; 0x05
     c68:	9e 81       	ldd	r25, Y+6	; 0x06
     c6a:	a8 da       	rcall	.-2736   	; 0x1bc <pin_high>
     c6c:	13 c0       	rjmp	.+38     	; 0xc94 <bwd+0x4c>
	}else if(motor->motortype == 2){	//BASE MOTOR
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	89 f4       	brne	.+34     	; 0xc94 <bwd+0x4c>
		*motor->ocr1 = 0;
     c72:	a7 89       	ldd	r26, Z+23	; 0x17
     c74:	b0 8d       	ldd	r27, Z+24	; 0x18
     c76:	11 96       	adiw	r26, 0x01	; 1
     c78:	1c 92       	st	X, r1
     c7a:	1e 92       	st	-X, r1
		*motor->ocr2 = abs(motor->pwm_value);
     c7c:	a1 8d       	ldd	r26, Z+25	; 0x19
     c7e:	b2 8d       	ldd	r27, Z+26	; 0x1a
     c80:	85 8d       	ldd	r24, Z+29	; 0x1d
     c82:	96 8d       	ldd	r25, Z+30	; 0x1e
     c84:	99 23       	and	r25, r25
     c86:	1c f4       	brge	.+6      	; 0xc8e <bwd+0x46>
     c88:	91 95       	neg	r25
     c8a:	81 95       	neg	r24
     c8c:	91 09       	sbc	r25, r1
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	9c 93       	st	X, r25
     c92:	8e 93       	st	-X, r24
	}
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	08 95       	ret

00000c9a <stop>:

void stop(Motor *motor){
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	fc 01       	movw	r30, r24
	motor->moving_fwd = 0;
     ca0:	11 8a       	std	Z+17, r1	; 0x11
	motor->moving_bwd = 0;
     ca2:	12 8a       	std	Z+18, r1	; 0x12
	if(motor->motortype == 1){			//MICROMOTOR
     ca4:	80 81       	ld	r24, Z
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	51 f4       	brne	.+20     	; 0xcbe <stop+0x24>
     caa:	ef 01       	movw	r28, r30
		pin_low(motor->portdirpin, motor->dirpin1);
     cac:	67 81       	ldd	r22, Z+7	; 0x07
     cae:	85 81       	ldd	r24, Z+5	; 0x05
     cb0:	96 81       	ldd	r25, Z+6	; 0x06
     cb2:	90 da       	rcall	.-2784   	; 0x1d4 <pin_low>
		pin_low(motor->portdirpin, motor->dirpin2);
     cb4:	68 85       	ldd	r22, Y+8	; 0x08
     cb6:	8d 81       	ldd	r24, Y+5	; 0x05
     cb8:	9e 81       	ldd	r25, Y+6	; 0x06
     cba:	8c da       	rcall	.-2792   	; 0x1d4 <pin_low>
     cbc:	0c c0       	rjmp	.+24     	; 0xcd6 <stop+0x3c>
	}else if(motor->motortype == 2){	//BASE MOTOR
     cbe:	82 30       	cpi	r24, 0x02	; 2
     cc0:	51 f4       	brne	.+20     	; 0xcd6 <stop+0x3c>
		*motor->ocr1 = 0;
     cc2:	a7 89       	ldd	r26, Z+23	; 0x17
     cc4:	b0 8d       	ldd	r27, Z+24	; 0x18
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 92       	st	X, r1
     cca:	1e 92       	st	-X, r1
		*motor->ocr2 = 0;
     ccc:	01 8c       	ldd	r0, Z+25	; 0x19
     cce:	f2 8d       	ldd	r31, Z+26	; 0x1a
     cd0:	e0 2d       	mov	r30, r0
     cd2:	11 82       	std	Z+1, r1	; 0x01
     cd4:	10 82       	st	Z, r1
	}
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <calculatePID>:

void calculatePID(Motor *motor){ 
     cdc:	2f 92       	push	r2
     cde:	3f 92       	push	r3
     ce0:	4f 92       	push	r4
     ce2:	5f 92       	push	r5
     ce4:	6f 92       	push	r6
     ce6:	7f 92       	push	r7
     ce8:	8f 92       	push	r8
     cea:	9f 92       	push	r9
     cec:	af 92       	push	r10
     cee:	bf 92       	push	r11
     cf0:	cf 92       	push	r12
     cf2:	df 92       	push	r13
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	62 97       	sbiw	r28, 0x12	; 18
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	f8 94       	cli
     d0a:	de bf       	out	0x3e, r29	; 62
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	cd bf       	out	0x3d, r28	; 61
     d10:	9a 8b       	std	Y+18, r25	; 0x12
     d12:	89 8b       	std	Y+17, r24	; 0x11
	motor->pid.us_time	= micros();
     d14:	79 da       	rcall	.-2830   	; 0x208 <micros>
     d16:	7b 01       	movw	r14, r22
     d18:	8c 01       	movw	r16, r24
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	a9 01       	movw	r20, r18
     d20:	69 83       	std	Y+1, r22	; 0x01
     d22:	fa 82       	std	Y+2, r15	; 0x02
     d24:	0b 83       	std	Y+3, r16	; 0x03
     d26:	1c 83       	std	Y+4, r17	; 0x04
     d28:	2d 83       	std	Y+5, r18	; 0x05
     d2a:	3e 83       	std	Y+6, r19	; 0x06
     d2c:	4f 83       	std	Y+7, r20	; 0x07
     d2e:	58 87       	std	Y+8, r21	; 0x08
     d30:	e9 89       	ldd	r30, Y+17	; 0x11
     d32:	fa 89       	ldd	r31, Y+18	; 0x12
     d34:	ff 96       	adiw	r30, 0x3f	; 63
     d36:	a9 89       	ldd	r26, Y+17	; 0x11
     d38:	ba 89       	ldd	r27, Y+18	; 0x12
     d3a:	df 96       	adiw	r26, 0x3f	; 63
     d3c:	6c 93       	st	X, r22
     d3e:	df 97       	sbiw	r26, 0x3f	; 63
     d40:	f1 82       	std	Z+1, r15	; 0x01
     d42:	02 83       	std	Z+2, r16	; 0x02
     d44:	13 83       	std	Z+3, r17	; 0x03
     d46:	14 82       	std	Z+4, r1	; 0x04
     d48:	15 82       	std	Z+5, r1	; 0x05
     d4a:	16 82       	std	Z+6, r1	; 0x06
     d4c:	17 82       	std	Z+7, r1	; 0x07
	motor->pid.d_time	= (motor->pid.us_time - motor->pid.prev_time);
     d4e:	1d 01       	movw	r2, r26
     d50:	bf e4       	ldi	r27, 0x4F	; 79
     d52:	2b 0e       	add	r2, r27
     d54:	31 1c       	adc	r3, r1
     d56:	f1 01       	movw	r30, r2
     d58:	a0 80       	ld	r10, Z
     d5a:	b1 80       	ldd	r11, Z+1	; 0x01
     d5c:	c2 80       	ldd	r12, Z+2	; 0x02
     d5e:	d3 80       	ldd	r13, Z+3	; 0x03
     d60:	e4 80       	ldd	r14, Z+4	; 0x04
     d62:	f5 80       	ldd	r15, Z+5	; 0x05
     d64:	06 81       	ldd	r16, Z+6	; 0x06
     d66:	17 81       	ldd	r17, Z+7	; 0x07
     d68:	29 81       	ldd	r18, Y+1	; 0x01
     d6a:	3a 81       	ldd	r19, Y+2	; 0x02
     d6c:	4b 81       	ldd	r20, Y+3	; 0x03
     d6e:	5c 81       	ldd	r21, Y+4	; 0x04
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	f0 d4       	rcall	.+2528   	; 0x175a <__subdi3>
     d7a:	62 2e       	mov	r6, r18
     d7c:	73 2e       	mov	r7, r19
     d7e:	04 2f       	mov	r16, r20
     d80:	15 2f       	mov	r17, r21
     d82:	86 2e       	mov	r8, r22
     d84:	97 2e       	mov	r9, r23
     d86:	a8 2e       	mov	r10, r24
     d88:	b9 2e       	mov	r11, r25
     d8a:	e9 89       	ldd	r30, Y+17	; 0x11
     d8c:	fa 89       	ldd	r31, Y+18	; 0x12
     d8e:	e9 5b       	subi	r30, 0xB9	; 185
     d90:	ff 4f       	sbci	r31, 0xFF	; 255
     d92:	20 83       	st	Z, r18
     d94:	31 83       	std	Z+1, r19	; 0x01
     d96:	42 83       	std	Z+2, r20	; 0x02
     d98:	53 83       	std	Z+3, r21	; 0x03
     d9a:	64 83       	std	Z+4, r22	; 0x04
     d9c:	75 83       	std	Z+5, r23	; 0x05
     d9e:	86 83       	std	Z+6, r24	; 0x06
     da0:	97 83       	std	Z+7, r25	; 0x07

	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
     da2:	e9 89       	ldd	r30, Y+17	; 0x11
     da4:	fa 89       	ldd	r31, Y+18	; 0x12
     da6:	83 a5       	ldd	r24, Z+43	; 0x2b
     da8:	94 a5       	ldd	r25, Z+44	; 0x2c
     daa:	a5 a5       	ldd	r26, Z+45	; 0x2d
     dac:	b6 a5       	ldd	r27, Z+46	; 0x2e
     dae:	c3 a0       	ldd	r12, Z+35	; 0x23
     db0:	d4 a0       	ldd	r13, Z+36	; 0x24
     db2:	e5 a0       	ldd	r14, Z+37	; 0x25
     db4:	f6 a0       	ldd	r15, Z+38	; 0x26
     db6:	bc 01       	movw	r22, r24
     db8:	cd 01       	movw	r24, r26
     dba:	6c 19       	sub	r22, r12
     dbc:	7d 09       	sbc	r23, r13
     dbe:	8e 09       	sbc	r24, r14
     dc0:	9f 09       	sbc	r25, r15
     dc2:	6a d3       	rcall	.+1748   	; 0x1498 <__floatsisf>
     dc4:	6b 01       	movw	r12, r22
     dc6:	7c 01       	movw	r14, r24
     dc8:	a9 89       	ldd	r26, Y+17	; 0x11
     dca:	ba 89       	ldd	r27, Y+18	; 0x12
     dcc:	d3 96       	adiw	r26, 0x33	; 51
     dce:	6d 93       	st	X+, r22
     dd0:	7d 93       	st	X+, r23
     dd2:	8d 93       	st	X+, r24
     dd4:	9c 93       	st	X, r25
     dd6:	d6 97       	sbiw	r26, 0x36	; 54
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
     dd8:	5f 96       	adiw	r26, 0x1f	; 31
     dda:	6d 91       	ld	r22, X+
     ddc:	7d 91       	ld	r23, X+
     dde:	8d 91       	ld	r24, X+
     de0:	9c 91       	ld	r25, X
     de2:	92 97       	sbiw	r26, 0x22	; 34
     de4:	59 d3       	rcall	.+1714   	; 0x1498 <__floatsisf>
     de6:	9b 01       	movw	r18, r22
     de8:	ac 01       	movw	r20, r24
     dea:	c7 01       	movw	r24, r14
     dec:	b6 01       	movw	r22, r12
     dee:	50 d2       	rcall	.+1184   	; 0x1290 <__subsf3>
     df0:	6d 87       	std	Y+13, r22	; 0x0d
     df2:	7e 87       	std	Y+14, r23	; 0x0e
     df4:	8f 87       	std	Y+15, r24	; 0x0f
     df6:	98 8b       	std	Y+16, r25	; 0x10
     df8:	26 2d       	mov	r18, r6
     dfa:	37 2d       	mov	r19, r7
     dfc:	40 2f       	mov	r20, r16
     dfe:	51 2f       	mov	r21, r17
     e00:	68 2d       	mov	r22, r8
     e02:	79 2d       	mov	r23, r9
     e04:	8a 2d       	mov	r24, r10
     e06:	9b 2d       	mov	r25, r11
     e08:	82 d3       	rcall	.+1796   	; 0x150e <__floatundisf>
     e0a:	69 87       	std	Y+9, r22	; 0x09
     e0c:	7a 87       	std	Y+10, r23	; 0x0a
     e0e:	8b 87       	std	Y+11, r24	; 0x0b
     e10:	9c 87       	std	Y+12, r25	; 0x0c
     e12:	9b 01       	movw	r18, r22
     e14:	ac 01       	movw	r20, r24
     e16:	6d 85       	ldd	r22, Y+13	; 0x0d
     e18:	7e 85       	ldd	r23, Y+14	; 0x0e
     e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1c:	98 89       	ldd	r25, Y+16	; 0x10
     e1e:	a1 d2       	rcall	.+1346   	; 0x1362 <__divsf3>
     e20:	4b 01       	movw	r8, r22
     e22:	5c 01       	movw	r10, r24
     e24:	e9 89       	ldd	r30, Y+17	; 0x11
     e26:	fa 89       	ldd	r31, Y+18	; 0x12
     e28:	67 ab       	std	Z+55, r22	; 0x37
     e2a:	70 af       	std	Z+56, r23	; 0x38
     e2c:	81 af       	std	Z+57, r24	; 0x39
     e2e:	92 af       	std	Z+58, r25	; 0x3a
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);
     e30:	43 ac       	ldd	r4, Z+59	; 0x3b
     e32:	54 ac       	ldd	r5, Z+60	; 0x3c
     e34:	65 ac       	ldd	r6, Z+61	; 0x3d
     e36:	76 ac       	ldd	r7, Z+62	; 0x3e
     e38:	29 85       	ldd	r18, Y+9	; 0x09
     e3a:	3a 85       	ldd	r19, Y+10	; 0x0a
     e3c:	4b 85       	ldd	r20, Y+11	; 0x0b
     e3e:	5c 85       	ldd	r21, Y+12	; 0x0c
     e40:	c7 01       	movw	r24, r14
     e42:	b6 01       	movw	r22, r12
     e44:	1b d4       	rcall	.+2102   	; 0x167c <__mulsf3>
     e46:	9b 01       	movw	r18, r22
     e48:	ac 01       	movw	r20, r24
     e4a:	c3 01       	movw	r24, r6
     e4c:	b2 01       	movw	r22, r4
     e4e:	21 d2       	rcall	.+1090   	; 0x1292 <__addsf3>
     e50:	2b 01       	movw	r4, r22
     e52:	3c 01       	movw	r6, r24
     e54:	a9 89       	ldd	r26, Y+17	; 0x11
     e56:	ba 89       	ldd	r27, Y+18	; 0x12
     e58:	db 96       	adiw	r26, 0x3b	; 59
     e5a:	6d 93       	st	X+, r22
     e5c:	7d 93       	st	X+, r23
     e5e:	8d 93       	st	X+, r24
     e60:	9c 93       	st	X, r25
     e62:	de 97       	sbiw	r26, 0x3e	; 62

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
     e64:	fd 01       	movw	r30, r26
     e66:	e9 59       	subi	r30, 0x99	; 153
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	20 81       	ld	r18, Z
     e6c:	31 81       	ldd	r19, Z+1	; 0x01
     e6e:	42 81       	ldd	r20, Z+2	; 0x02
     e70:	53 81       	ldd	r21, Z+3	; 0x03
     e72:	c7 01       	movw	r24, r14
     e74:	b6 01       	movw	r22, r12
     e76:	02 d4       	rcall	.+2052   	; 0x167c <__mulsf3>
     e78:	69 87       	std	Y+9, r22	; 0x09
     e7a:	7a 87       	std	Y+10, r23	; 0x0a
     e7c:	8b 87       	std	Y+11, r24	; 0x0b
     e7e:	9c 87       	std	Y+12, r25	; 0x0c
							 (motor->pid.Kd * motor->pid.e_dot) + 
     e80:	e9 89       	ldd	r30, Y+17	; 0x11
     e82:	fa 89       	ldd	r31, Y+18	; 0x12
     e84:	e5 59       	subi	r30, 0x95	; 149
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	20 81       	ld	r18, Z
     e8a:	31 81       	ldd	r19, Z+1	; 0x01
     e8c:	42 81       	ldd	r20, Z+2	; 0x02
     e8e:	53 81       	ldd	r21, Z+3	; 0x03
     e90:	c5 01       	movw	r24, r10
     e92:	b4 01       	movw	r22, r8
     e94:	f3 d3       	rcall	.+2022   	; 0x167c <__mulsf3>
     e96:	9b 01       	movw	r18, r22

	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
     e98:	ac 01       	movw	r20, r24
     e9a:	69 85       	ldd	r22, Y+9	; 0x09
     e9c:	7a 85       	ldd	r23, Y+10	; 0x0a
     e9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     ea0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ea2:	f7 d1       	rcall	.+1006   	; 0x1292 <__addsf3>
     ea4:	4b 01       	movw	r8, r22
							 (motor->pid.Kd * motor->pid.e_dot) + 
							 (motor->pid.Ki * motor->pid.e_int);
     ea6:	5c 01       	movw	r10, r24
     ea8:	e9 89       	ldd	r30, Y+17	; 0x11
     eaa:	fa 89       	ldd	r31, Y+18	; 0x12
     eac:	e1 59       	subi	r30, 0x91	; 145
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	20 81       	ld	r18, Z
     eb2:	31 81       	ldd	r19, Z+1	; 0x01
     eb4:	42 81       	ldd	r20, Z+2	; 0x02
     eb6:	53 81       	ldd	r21, Z+3	; 0x03
     eb8:	c3 01       	movw	r24, r6
     eba:	b2 01       	movw	r22, r4
     ebc:	df d3       	rcall	.+1982   	; 0x167c <__mulsf3>
     ebe:	9b 01       	movw	r18, r22
	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
							 (motor->pid.Kd * motor->pid.e_dot) + 
     ec0:	ac 01       	movw	r20, r24
     ec2:	c5 01       	movw	r24, r10
     ec4:	b4 01       	movw	r22, r8
     ec6:	e5 d1       	rcall	.+970    	; 0x1292 <__addsf3>
     ec8:	4b 01       	movw	r8, r22

	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
     eca:	5c 01       	movw	r10, r24
     ecc:	e9 89       	ldd	r30, Y+17	; 0x11
     ece:	fa 89       	ldd	r31, Y+18	; 0x12
     ed0:	ed 59       	subi	r30, 0x9D	; 157
     ed2:	ff 4f       	sbci	r31, 0xFF	; 255
     ed4:	60 83       	st	Z, r22
     ed6:	71 83       	std	Z+1, r23	; 0x01
     ed8:	82 83       	std	Z+2, r24	; 0x02
							 (motor->pid.Kd * motor->pid.e_dot) + 
							 (motor->pid.Ki * motor->pid.e_int);
	
	motor->pid.prev_error	= motor->pid.e_prop;
     eda:	93 83       	std	Z+3, r25	; 0x03
     edc:	c7 01       	movw	r24, r14
     ede:	b6 01       	movw	r22, r12
     ee0:	a8 d2       	rcall	.+1360   	; 0x1432 <__fixsfsi>
     ee2:	e9 89       	ldd	r30, Y+17	; 0x11
     ee4:	fa 89       	ldd	r31, Y+18	; 0x12
     ee6:	67 8f       	std	Z+31, r22	; 0x1f
     ee8:	70 a3       	std	Z+32, r23	; 0x20
     eea:	81 a3       	std	Z+33, r24	; 0x21
     eec:	92 a3       	std	Z+34, r25	; 0x22
	motor->pid.prev_time	= motor->pid.us_time;
     eee:	e9 81       	ldd	r30, Y+1	; 0x01
     ef0:	d1 01       	movw	r26, r2
     ef2:	ec 93       	st	X, r30
     ef4:	fa 81       	ldd	r31, Y+2	; 0x02
     ef6:	11 96       	adiw	r26, 0x01	; 1
     ef8:	fc 93       	st	X, r31
     efa:	11 97       	sbiw	r26, 0x01	; 1
     efc:	eb 80       	ldd	r14, Y+3	; 0x03
     efe:	12 96       	adiw	r26, 0x02	; 2
     f00:	ec 92       	st	X, r14
     f02:	12 97       	sbiw	r26, 0x02	; 2
     f04:	fc 80       	ldd	r15, Y+4	; 0x04
     f06:	13 96       	adiw	r26, 0x03	; 3
     f08:	fc 92       	st	X, r15
     f0a:	13 97       	sbiw	r26, 0x03	; 3
     f0c:	14 96       	adiw	r26, 0x04	; 4
     f0e:	1c 92       	st	X, r1
     f10:	14 97       	sbiw	r26, 0x04	; 4
     f12:	15 96       	adiw	r26, 0x05	; 5
     f14:	1c 92       	st	X, r1
     f16:	15 97       	sbiw	r26, 0x05	; 5
     f18:	16 96       	adiw	r26, 0x06	; 6
     f1a:	1c 92       	st	X, r1
     f1c:	16 97       	sbiw	r26, 0x06	; 6
     f1e:	17 96       	adiw	r26, 0x07	; 7

	if (motor->pid.ctrl_signal > motor->max_speed) motor->pid.ctrl_signal = motor->max_speed;
     f20:	1c 92       	st	X, r1
     f22:	a9 89       	ldd	r26, Y+17	; 0x11
     f24:	ba 89       	ldd	r27, Y+18	; 0x12
     f26:	1c 96       	adiw	r26, 0x0c	; 12
     f28:	dc 90       	ld	r13, X
     f2a:	0d 2d       	mov	r16, r13
     f2c:	10 e0       	ldi	r17, 0x00	; 0
     f2e:	b8 01       	movw	r22, r16
     f30:	01 2e       	mov	r0, r17
     f32:	00 0c       	add	r0, r0
     f34:	88 0b       	sbc	r24, r24
     f36:	99 0b       	sbc	r25, r25
     f38:	af d2       	rcall	.+1374   	; 0x1498 <__floatsisf>
     f3a:	9b 01       	movw	r18, r22
     f3c:	ac 01       	movw	r20, r24
     f3e:	c5 01       	movw	r24, r10
     f40:	b4 01       	movw	r22, r8
     f42:	98 d3       	rcall	.+1840   	; 0x1674 <__gesf2>
     f44:	18 16       	cp	r1, r24
     f46:	7c f4       	brge	.+30     	; 0xf66 <calculatePID+0x28a>
     f48:	e9 88       	ldd	r14, Y+17	; 0x11
     f4a:	fa 88       	ldd	r15, Y+18	; 0x12
     f4c:	b3 e6       	ldi	r27, 0x63	; 99
     f4e:	eb 0e       	add	r14, r27
     f50:	f1 1c       	adc	r15, r1
     f52:	6d 2d       	mov	r22, r13
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9c d2       	rcall	.+1336   	; 0x1494 <__floatunsisf>
     f5c:	f7 01       	movw	r30, r14
     f5e:	60 83       	st	Z, r22
     f60:	71 83       	std	Z+1, r23	; 0x01
     f62:	82 83       	std	Z+2, r24	; 0x02
	if (motor->pid.ctrl_signal < -motor->max_speed) motor->pid.ctrl_signal = -motor->max_speed;
     f64:	93 83       	std	Z+3, r25	; 0x03
     f66:	e9 89       	ldd	r30, Y+17	; 0x11
     f68:	fa 89       	ldd	r31, Y+18	; 0x12
     f6a:	ed 59       	subi	r30, 0x9D	; 157
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	c0 80       	ld	r12, Z
     f70:	d1 80       	ldd	r13, Z+1	; 0x01
     f72:	e2 80       	ldd	r14, Z+2	; 0x02
     f74:	f3 80       	ldd	r15, Z+3	; 0x03
     f76:	66 27       	eor	r22, r22
     f78:	77 27       	eor	r23, r23
     f7a:	60 1b       	sub	r22, r16
     f7c:	71 0b       	sbc	r23, r17
     f7e:	07 2e       	mov	r0, r23
     f80:	00 0c       	add	r0, r0
     f82:	88 0b       	sbc	r24, r24
     f84:	99 0b       	sbc	r25, r25
     f86:	88 d2       	rcall	.+1296   	; 0x1498 <__floatsisf>
     f88:	4b 01       	movw	r8, r22
     f8a:	5c 01       	movw	r10, r24
     f8c:	9b 01       	movw	r18, r22
     f8e:	ac 01       	movw	r20, r24
     f90:	c7 01       	movw	r24, r14
     f92:	b6 01       	movw	r22, r12
     f94:	e2 d1       	rcall	.+964    	; 0x135a <__cmpsf2>
     f96:	88 23       	and	r24, r24
     f98:	54 f4       	brge	.+20     	; 0xfae <calculatePID+0x2d2>
     f9a:	09 89       	ldd	r16, Y+17	; 0x11
     f9c:	1a 89       	ldd	r17, Y+18	; 0x12
     f9e:	0d 59       	subi	r16, 0x9D	; 157
     fa0:	1f 4f       	sbci	r17, 0xFF	; 255
     fa2:	d8 01       	movw	r26, r16
     fa4:	8d 92       	st	X+, r8
     fa6:	9d 92       	st	X+, r9
     fa8:	ad 92       	st	X+, r10
     faa:	bc 92       	st	X, r11
     fac:	13 97       	sbiw	r26, 0x03	; 3
}
     fae:	62 96       	adiw	r28, 0x12	; 18
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	df 90       	pop	r13
     fc8:	cf 90       	pop	r12
     fca:	bf 90       	pop	r11
     fcc:	af 90       	pop	r10
     fce:	9f 90       	pop	r9
     fd0:	8f 90       	pop	r8
     fd2:	7f 90       	pop	r7
     fd4:	6f 90       	pop	r6
     fd6:	5f 90       	pop	r5
     fd8:	4f 90       	pop	r4
     fda:	3f 90       	pop	r3
     fdc:	2f 90       	pop	r2
     fde:	08 95       	ret

00000fe0 <set_speed>:

void set_speed(Motor *motor){
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	8c 01       	movw	r16, r24

	// Clamp PID output to speed cap
	if (motor->pwm_value > motor->dynamic_max_speed) motor->pwm_value = motor->dynamic_max_speed;
	else if (motor->pwm_value < -motor->dynamic_max_speed) motor->pwm_value = -motor->dynamic_max_speed;
	*/
	if (motor->pid.ctrl_signal > motor->pwm_value + ACCEL_CONST) {
     ff6:	fc 01       	movw	r30, r24
     ff8:	ed 59       	subi	r30, 0x9D	; 157
     ffa:	ff 4f       	sbci	r31, 0xFF	; 255
     ffc:	c0 80       	ld	r12, Z
     ffe:	d1 80       	ldd	r13, Z+1	; 0x01
    1000:	e2 80       	ldd	r14, Z+2	; 0x02
    1002:	f3 80       	ldd	r15, Z+3	; 0x03
    1004:	fc 01       	movw	r30, r24
    1006:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1008:	d6 8d       	ldd	r29, Z+30	; 0x1e
    100a:	5e 01       	movw	r10, r28
    100c:	f2 e0       	ldi	r31, 0x02	; 2
    100e:	af 0e       	add	r10, r31
    1010:	b1 1c       	adc	r11, r1
    1012:	b5 01       	movw	r22, r10
    1014:	0b 2c       	mov	r0, r11
    1016:	00 0c       	add	r0, r0
    1018:	88 0b       	sbc	r24, r24
    101a:	99 0b       	sbc	r25, r25
    101c:	3d d2       	rcall	.+1146   	; 0x1498 <__floatsisf>
    101e:	9b 01       	movw	r18, r22
    1020:	ac 01       	movw	r20, r24
    1022:	c7 01       	movw	r24, r14
    1024:	b6 01       	movw	r22, r12
    1026:	26 d3       	rcall	.+1612   	; 0x1674 <__gesf2>
    1028:	18 16       	cp	r1, r24
    102a:	24 f4       	brge	.+8      	; 0x1034 <__EEPROM_REGION_LENGTH__+0x34>
		motor->pwm_value += ACCEL_CONST;  // Gradual acceleration
    102c:	f8 01       	movw	r30, r16
    102e:	b6 8e       	std	Z+30, r11	; 0x1e
    1030:	a5 8e       	std	Z+29, r10	; 0x1d
    1032:	18 c0       	rjmp	.+48     	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
	} else if ((motor->pid.ctrl_signal < motor->pwm_value - DECEL_CONST)) {
    1034:	22 97       	sbiw	r28, 0x02	; 2
    1036:	be 01       	movw	r22, r28
    1038:	0d 2e       	mov	r0, r29
    103a:	00 0c       	add	r0, r0
    103c:	88 0b       	sbc	r24, r24
    103e:	99 0b       	sbc	r25, r25
    1040:	2b d2       	rcall	.+1110   	; 0x1498 <__floatsisf>
    1042:	9b 01       	movw	r18, r22
    1044:	ac 01       	movw	r20, r24
    1046:	c7 01       	movw	r24, r14
    1048:	b6 01       	movw	r22, r12
    104a:	87 d1       	rcall	.+782    	; 0x135a <__cmpsf2>
    104c:	88 23       	and	r24, r24
    104e:	24 f4       	brge	.+8      	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
		motor->pwm_value -= DECEL_CONST;  // Gradual deceleration
    1050:	f8 01       	movw	r30, r16
    1052:	d6 8f       	std	Z+30, r29	; 0x1e
    1054:	c5 8f       	std	Z+29, r28	; 0x1d
	} else {
		motor->pwm_value = motor->pid.ctrl_signal; // Maintain speed
    1056:	06 c0       	rjmp	.+12     	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    1058:	c7 01       	movw	r24, r14
    105a:	b6 01       	movw	r22, r12
    105c:	ea d1       	rcall	.+980    	; 0x1432 <__fixsfsi>
    105e:	f8 01       	movw	r30, r16
    1060:	76 8f       	std	Z+30, r23	; 0x1e
    1062:	65 8f       	std	Z+29, r22	; 0x1d
	}
}
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	08 95       	ret

0000107a <update_stall>:

void update_stall(Motor *motor){
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24

		motor->pid.prev_stall_time	= now;
		motor->pid.last_pos			= motor->pid.current_pos;
	}
	*/
	if (motor->current_draw > CURRENT_LIMIT) {
    1080:	6b 89       	ldd	r22, Y+19	; 0x13
    1082:	7c 89       	ldd	r23, Y+20	; 0x14
    1084:	8d 89       	ldd	r24, Y+21	; 0x15
    1086:	9e 89       	ldd	r25, Y+22	; 0x16
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 ea       	ldi	r20, 0xA0	; 160
    108e:	50 e4       	ldi	r21, 0x40	; 64
    1090:	f1 d2       	rcall	.+1506   	; 0x1674 <__gesf2>
    1092:	18 16       	cp	r1, r24
    1094:	5c f4       	brge	.+22     	; 0x10ac <update_stall+0x32>
		if (motor->moving_fwd) motor->stall_fwd			= 1;
    1096:	89 89       	ldd	r24, Y+17	; 0x11
    1098:	88 23       	and	r24, r24
    109a:	19 f0       	breq	.+6      	; 0x10a2 <update_stall+0x28>
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	8f 87       	std	Y+15, r24	; 0x0f
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <update_stall+0x32>
		else if (motor->moving_bwd) motor->stall_bwd	= 1;
    10a2:	8a 89       	ldd	r24, Y+18	; 0x12
    10a4:	88 23       	and	r24, r24
    10a6:	11 f0       	breq	.+4      	; 0x10ac <update_stall+0x32>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	88 8b       	std	Y+16, r24	; 0x10
	}

	// Reset stall if switching direction
	if (motor->moving_bwd && motor->stall_fwd) motor->stall_fwd = 0;
    10ac:	8a 89       	ldd	r24, Y+18	; 0x12
    10ae:	88 23       	and	r24, r24
    10b0:	19 f0       	breq	.+6      	; 0x10b8 <update_stall+0x3e>
    10b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b4:	81 11       	cpse	r24, r1
    10b6:	1f 86       	std	Y+15, r1	; 0x0f
	if (motor->moving_fwd && motor->stall_bwd) motor->stall_bwd = 0;
    10b8:	89 89       	ldd	r24, Y+17	; 0x11
    10ba:	88 23       	and	r24, r24
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <update_stall+0x4a>
    10be:	88 89       	ldd	r24, Y+16	; 0x10
    10c0:	81 11       	cpse	r24, r1
    10c2:	18 8a       	std	Y+16, r1	; 0x10
}
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <move_abs>:

void move_abs(Motor *motor, volatile int32_t setpoint, volatile int32_t currentpos, float current){
    10ca:	af 92       	push	r10
    10cc:	bf 92       	push	r11
    10ce:	cf 92       	push	r12
    10d0:	df 92       	push	r13
    10d2:	ef 92       	push	r14
    10d4:	ff 92       	push	r15
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	28 97       	sbiw	r28, 0x08	; 8
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	5c 01       	movw	r10, r24
    10f0:	49 83       	std	Y+1, r20	; 0x01
    10f2:	5a 83       	std	Y+2, r21	; 0x02
    10f4:	6b 83       	std	Y+3, r22	; 0x03
    10f6:	7c 83       	std	Y+4, r23	; 0x04
    10f8:	0d 83       	std	Y+5, r16	; 0x05
    10fa:	1e 83       	std	Y+6, r17	; 0x06
    10fc:	2f 83       	std	Y+7, r18	; 0x07
    10fe:	38 87       	std	Y+8, r19	; 0x08
	motor->pid.current_pos	= currentpos;
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	af 81       	ldd	r26, Y+7	; 0x07
    1106:	b8 85       	ldd	r27, Y+8	; 0x08
    1108:	f5 01       	movw	r30, r10
    110a:	83 a3       	std	Z+35, r24	; 0x23
    110c:	94 a3       	std	Z+36, r25	; 0x24
    110e:	a5 a3       	std	Z+37, r26	; 0x25
    1110:	b6 a3       	std	Z+38, r27	; 0x26
	motor->pid.setpoint		= setpoint;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	9a 81       	ldd	r25, Y+2	; 0x02
    1116:	ab 81       	ldd	r26, Y+3	; 0x03
    1118:	bc 81       	ldd	r27, Y+4	; 0x04
    111a:	83 a7       	std	Z+43, r24	; 0x2b
    111c:	94 a7       	std	Z+44, r25	; 0x2c
    111e:	a5 a7       	std	Z+45, r26	; 0x2d
    1120:	b6 a7       	std	Z+46, r27	; 0x2e
	motor->current_draw		= current;
    1122:	c3 8a       	std	Z+19, r12	; 0x13
    1124:	d4 8a       	std	Z+20, r13	; 0x14
    1126:	e5 8a       	std	Z+21, r14	; 0x15
    1128:	f6 8a       	std	Z+22, r15	; 0x16

	calculatePID(motor);
    112a:	c5 01       	movw	r24, r10
    112c:	d7 dd       	rcall	.-1106   	; 0xcdc <calculatePID>
	//if(abs(motor->pid.ctrl_signal) > motor->pid.critical_delta)
	//	motor->pwm_value = motor->max_speed;
	//else
	//	motor->pwm_value = ((abs(motor->pid.ctrl_signal)/motor->pid.critical_delta)*motor->max_speed);

	set_speed(motor);
    112e:	c5 01       	movw	r24, r10
    1130:	57 df       	rcall	.-338    	; 0xfe0 <set_speed>

	update_stall(motor);
    1132:	c5 01       	movw	r24, r10
    1134:	a2 df       	rcall	.-188    	; 0x107a <update_stall>
    1136:	f5 01       	movw	r30, r10

	// Check for blocked direction & stop moving in that direction
	if ((motor->pwm_value > 0 && motor->stall_fwd) || (motor->pwm_value < 0 && motor->stall_bwd)) {
    1138:	85 8d       	ldd	r24, Z+29	; 0x1d
    113a:	96 8d       	ldd	r25, Z+30	; 0x1e
    113c:	18 16       	cp	r1, r24
    113e:	19 06       	cpc	r1, r25
    1140:	1c f4       	brge	.+6      	; 0x1148 <move_abs+0x7e>
    1142:	27 85       	ldd	r18, Z+15	; 0x0f
    1144:	21 11       	cpse	r18, r1
    1146:	07 c0       	rjmp	.+14     	; 0x1156 <move_abs+0x8c>
    1148:	99 23       	and	r25, r25
    114a:	44 f4       	brge	.+16     	; 0x115c <move_abs+0x92>
    114c:	d5 01       	movw	r26, r10
    114e:	50 96       	adiw	r26, 0x10	; 16
    1150:	2c 91       	ld	r18, X
    1152:	22 23       	and	r18, r18
    1154:	19 f0       	breq	.+6      	; 0x115c <move_abs+0x92>
		stop(motor);
    1156:	c5 01       	movw	r24, r10
    1158:	a0 dd       	rcall	.-1216   	; 0xc9a <stop>
    115a:	33 c0       	rjmp	.+102    	; 0x11c2 <move_abs+0xf8>
		return;
    115c:	f5 01       	movw	r30, r10
	}

	if(motor->motortype == 1) *motor->ocr1 = motor->pwm_value;
    115e:	20 81       	ld	r18, Z
    1160:	21 30       	cpi	r18, 0x01	; 1
    1162:	29 f4       	brne	.+10     	; 0x116e <move_abs+0xa4>
    1164:	07 88       	ldd	r0, Z+23	; 0x17
    1166:	f0 8d       	ldd	r31, Z+24	; 0x18
    1168:	e0 2d       	mov	r30, r0
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
    116e:	f5 01       	movw	r30, r10

	if(motor->pid.ctrl_signal > MIN_POS_DELTA) fwd(motor); // && !fwd_current
    1170:	ed 59       	subi	r30, 0x9D	; 157
    1172:	ff 4f       	sbci	r31, 0xFF	; 255
    1174:	c0 80       	ld	r12, Z
    1176:	d1 80       	ldd	r13, Z+1	; 0x01
    1178:	e2 80       	ldd	r14, Z+2	; 0x02
    117a:	f3 80       	ldd	r15, Z+3	; 0x03
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e2       	ldi	r20, 0x20	; 32
    1182:	51 e4       	ldi	r21, 0x41	; 65
    1184:	c7 01       	movw	r24, r14
    1186:	b6 01       	movw	r22, r12
    1188:	75 d2       	rcall	.+1258   	; 0x1674 <__gesf2>
    118a:	18 16       	cp	r1, r24
    118c:	1c f4       	brge	.+6      	; 0x1194 <move_abs+0xca>
    118e:	c5 01       	movw	r24, r10
    1190:	32 dd       	rcall	.-1436   	; 0xbf6 <fwd>
    1192:	0e c0       	rjmp	.+28     	; 0x11b0 <move_abs+0xe6>
    1194:	20 e0       	ldi	r18, 0x00	; 0
	else if(motor->pid.ctrl_signal < -MIN_POS_DELTA) bwd(motor);
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e2       	ldi	r20, 0x20	; 32
    119a:	51 ec       	ldi	r21, 0xC1	; 193
    119c:	c7 01       	movw	r24, r14
    119e:	b6 01       	movw	r22, r12
    11a0:	dc d0       	rcall	.+440    	; 0x135a <__cmpsf2>
    11a2:	88 23       	and	r24, r24
    11a4:	1c f4       	brge	.+6      	; 0x11ac <move_abs+0xe2>
    11a6:	c5 01       	movw	r24, r10
    11a8:	4f dd       	rcall	.-1378   	; 0xc48 <bwd>
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <move_abs+0xe6>
	else stop(motor);
    11ac:	c5 01       	movw	r24, r10
    11ae:	75 dd       	rcall	.-1302   	; 0xc9a <stop>
    11b0:	f5 01       	movw	r30, r10

	motor->pid.prev_setpoint = motor->pid.setpoint;
    11b2:	83 a5       	ldd	r24, Z+43	; 0x2b
    11b4:	94 a5       	ldd	r25, Z+44	; 0x2c
    11b6:	a5 a5       	ldd	r26, Z+45	; 0x2d
    11b8:	b6 a5       	ldd	r27, Z+46	; 0x2e
    11ba:	87 a7       	std	Z+47, r24	; 0x2f
    11bc:	90 ab       	std	Z+48, r25	; 0x30
    11be:	a1 ab       	std	Z+49, r26	; 0x31
    11c0:	b2 ab       	std	Z+50, r27	; 0x32
    11c2:	28 96       	adiw	r28, 0x08	; 8
}
    11c4:	0f b6       	in	r0, 0x3f	; 63
    11c6:	f8 94       	cli
    11c8:	de bf       	out	0x3e, r29	; 62
    11ca:	0f be       	out	0x3f, r0	; 63
    11cc:	cd bf       	out	0x3d, r28	; 61
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	df 90       	pop	r13
    11dc:	cf 90       	pop	r12
    11de:	bf 90       	pop	r11
    11e0:	af 90       	pop	r10
    11e2:	08 95       	ret

000011e4 <set_max_speed>:
    11e4:	fc 01       	movw	r30, r24

void set_max_speed(Motor *motor, uint8_t speed){
	motor->max_speed = speed;
    11e6:	64 87       	std	Z+12, r22	; 0x0c
    11e8:	08 95       	ret

000011ea <setup_ext_sensors>:
float		avg_voltage		= 0;
float		amp				= 0;
uint16_t	adcvalue		= 0;

void setup_ext_sensors(void){
	cli();
    11ea:	f8 94       	cli

	//CONFIGURE ENCODER A PINS AND SENSOR IN PINS AS INPUTS
	DDRD &= ~((1 << DDD0) | (1 << DDD1) | (1 << DDD2) | (1 << DDD3) | (1 << DDD6) | (1 << DDD7));
    11ec:	8a b1       	in	r24, 0x0a	; 10
    11ee:	80 73       	andi	r24, 0x30	; 48
    11f0:	8a b9       	out	0x0a, r24	; 10
	DDRE &= ~((1 << DDE4) | (1 << DDE5) | (1 << DDE6) | (1 << DDE7));
    11f2:	8d b1       	in	r24, 0x0d	; 13
    11f4:	8f 70       	andi	r24, 0x0F	; 15
    11f6:	8d b9       	out	0x0d, r24	; 13
	DDRB &= ~((1 << DDB4) | (1 << DDB5));
    11f8:	84 b1       	in	r24, 0x04	; 4
    11fa:	8f 7c       	andi	r24, 0xCF	; 207
    11fc:	84 b9       	out	0x04, r24	; 4

	//DISABLE PULL-UP RESISTORS
	PORTD &= ~((1 << PD0) | (1 << PD1) | (1 << PD2) | (1 << PD3) | (1 << PD6) | (1 << PD7));
    11fe:	8b b1       	in	r24, 0x0b	; 11
    1200:	80 73       	andi	r24, 0x30	; 48
    1202:	8b b9       	out	0x0b, r24	; 11
	PORTB &= ~((1 << PB4) | (1 << PB5));
    1204:	85 b1       	in	r24, 0x05	; 5
    1206:	8f 7c       	andi	r24, 0xCF	; 207
    1208:	85 b9       	out	0x05, r24	; 5

	//ENABLE PULL-UPS FOR EXTERNAL SENSORS
	PORTE |=  ((1 << PE4) | (1 << PE5) | (1 << PE6) | (1 << PE7));
    120a:	8e b1       	in	r24, 0x0e	; 14
    120c:	80 6f       	ori	r24, 0xF0	; 240
    120e:	8e b9       	out	0x0e, r24	; 14

	//SETUP EXTERNAL INTERRUPTS
	EICRA |= (1 << ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11) | (1 << ISC20) | (1 << ISC21) | (1 << ISC30) | (1 << ISC31); // rising edge detect
    1210:	e9 e6       	ldi	r30, 0x69	; 105
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	90 83       	st	Z, r25
	EICRB |= (1 << ISC40) | (1 << ISC50) | (1 << ISC60) | (1 << ISC70);																// any logical change
    121a:	ea e6       	ldi	r30, 0x6A	; 106
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	85 65       	ori	r24, 0x55	; 85
    1222:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0)  | (1 << INT1)  | (1 << INT2)  | (1 << INT3)  | (1 << INT4)  | (1 << INT5)  | (1 << INT6)  | (1 << INT7);  // Enable interrupts
    1224:	8d b3       	in	r24, 0x1d	; 29
    1226:	9d bb       	out	0x1d, r25	; 29

	sei();
    1228:	78 94       	sei
    122a:	08 95       	ret

0000122c <ADC_init>:
}

void ADC_init(void){														//PF6 ADC6 / PF7 ADC7
	ADCSRA	|= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);	// Enable the ADC
    122c:	ea e7       	ldi	r30, 0x7A	; 122
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	87 68       	ori	r24, 0x87	; 135
    1234:	80 83       	st	Z, r24
	ADMUX	|= (1 << REFS0);												// Use AVCC for reference
    1236:	ec e7       	ldi	r30, 0x7C	; 124
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 64       	ori	r24, 0x40	; 64
    123e:	80 83       	st	Z, r24
	ADMUX	&= ~(1 << REFS1);
    1240:	80 81       	ld	r24, Z
    1242:	8f 77       	andi	r24, 0x7F	; 127
    1244:	80 83       	st	Z, r24
	ADCSRB	&= ~(1 << MUX5);
    1246:	eb e7       	ldi	r30, 0x7B	; 123
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	87 7f       	andi	r24, 0xF7	; 247
    124e:	80 83       	st	Z, r24
    1250:	08 95       	ret

00001252 <USART0_init>:

#include "uart.h"

void USART0_init(void){
	//USART BAUD RATE SETUP
	UBRR0H = (unsigned char) (BRC >> 8);
    1252:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char) BRC;
    1256:	87 e6       	ldi	r24, 0x67	; 103
    1258:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	//RX TX ENABLE
	//UCSR0A = (1 << U2X0);
	UCSR0B = (1 << RXEN0)  | (1 << TXEN0) | (1 << RXCIE0);
    125c:	88 e9       	ldi	r24, 0x98	; 152
    125e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
    1262:	86 e0       	ldi	r24, 0x06	; 6
    1264:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
    1268:	08 95       	ret

0000126a <USART0_send>:
}

void USART0_send(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
    126a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    126e:	95 ff       	sbrs	r25, 5
    1270:	fc cf       	rjmp	.-8      	; 0x126a <USART0_send>
	UDR0 = data;
    1272:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    1276:	08 95       	ret

00001278 <USART0_send_string>:
}

void USART0_send_string(char *ptr){
    1278:	cf 93       	push	r28
    127a:	df 93       	push	r29
    127c:	ec 01       	movw	r28, r24
	while (*ptr) {
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <USART0_send_string+0xc>
		USART0_send(*ptr++);
    1280:	21 96       	adiw	r28, 0x01	; 1
    1282:	f3 df       	rcall	.-26     	; 0x126a <USART0_send>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void USART0_send_string(char *ptr){
	while (*ptr) {
    1284:	88 81       	ld	r24, Y
    1286:	81 11       	cpse	r24, r1
    1288:	fb cf       	rjmp	.-10     	; 0x1280 <USART0_send_string+0x8>
		USART0_send(*ptr++);
	}
}
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <__subsf3>:
    1290:	50 58       	subi	r21, 0x80	; 128

00001292 <__addsf3>:
    1292:	bb 27       	eor	r27, r27
    1294:	aa 27       	eor	r26, r26
    1296:	0e d0       	rcall	.+28     	; 0x12b4 <__addsf3x>
    1298:	b3 c1       	rjmp	.+870    	; 0x1600 <__fp_round>
    129a:	a4 d1       	rcall	.+840    	; 0x15e4 <__fp_pscA>
    129c:	30 f0       	brcs	.+12     	; 0x12aa <__addsf3+0x18>
    129e:	a9 d1       	rcall	.+850    	; 0x15f2 <__fp_pscB>
    12a0:	20 f0       	brcs	.+8      	; 0x12aa <__addsf3+0x18>
    12a2:	31 f4       	brne	.+12     	; 0x12b0 <__addsf3+0x1e>
    12a4:	9f 3f       	cpi	r25, 0xFF	; 255
    12a6:	11 f4       	brne	.+4      	; 0x12ac <__addsf3+0x1a>
    12a8:	1e f4       	brtc	.+6      	; 0x12b0 <__addsf3+0x1e>
    12aa:	99 c1       	rjmp	.+818    	; 0x15de <__fp_nan>
    12ac:	0e f4       	brtc	.+2      	; 0x12b0 <__addsf3+0x1e>
    12ae:	e0 95       	com	r30
    12b0:	e7 fb       	bst	r30, 7
    12b2:	8f c1       	rjmp	.+798    	; 0x15d2 <__fp_inf>

000012b4 <__addsf3x>:
    12b4:	e9 2f       	mov	r30, r25
    12b6:	b5 d1       	rcall	.+874    	; 0x1622 <__fp_split3>
    12b8:	80 f3       	brcs	.-32     	; 0x129a <__addsf3+0x8>
    12ba:	ba 17       	cp	r27, r26
    12bc:	62 07       	cpc	r22, r18
    12be:	73 07       	cpc	r23, r19
    12c0:	84 07       	cpc	r24, r20
    12c2:	95 07       	cpc	r25, r21
    12c4:	18 f0       	brcs	.+6      	; 0x12cc <__addsf3x+0x18>
    12c6:	71 f4       	brne	.+28     	; 0x12e4 <__addsf3x+0x30>
    12c8:	9e f5       	brtc	.+102    	; 0x1330 <__addsf3x+0x7c>
    12ca:	cd c1       	rjmp	.+922    	; 0x1666 <__fp_zero>
    12cc:	0e f4       	brtc	.+2      	; 0x12d0 <__addsf3x+0x1c>
    12ce:	e0 95       	com	r30
    12d0:	0b 2e       	mov	r0, r27
    12d2:	ba 2f       	mov	r27, r26
    12d4:	a0 2d       	mov	r26, r0
    12d6:	0b 01       	movw	r0, r22
    12d8:	b9 01       	movw	r22, r18
    12da:	90 01       	movw	r18, r0
    12dc:	0c 01       	movw	r0, r24
    12de:	ca 01       	movw	r24, r20
    12e0:	a0 01       	movw	r20, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	ff 27       	eor	r31, r31
    12e6:	59 1b       	sub	r21, r25
    12e8:	99 f0       	breq	.+38     	; 0x1310 <__addsf3x+0x5c>
    12ea:	59 3f       	cpi	r21, 0xF9	; 249
    12ec:	50 f4       	brcc	.+20     	; 0x1302 <__addsf3x+0x4e>
    12ee:	50 3e       	cpi	r21, 0xE0	; 224
    12f0:	68 f1       	brcs	.+90     	; 0x134c <__addsf3x+0x98>
    12f2:	1a 16       	cp	r1, r26
    12f4:	f0 40       	sbci	r31, 0x00	; 0
    12f6:	a2 2f       	mov	r26, r18
    12f8:	23 2f       	mov	r18, r19
    12fa:	34 2f       	mov	r19, r20
    12fc:	44 27       	eor	r20, r20
    12fe:	58 5f       	subi	r21, 0xF8	; 248
    1300:	f3 cf       	rjmp	.-26     	; 0x12e8 <__addsf3x+0x34>
    1302:	46 95       	lsr	r20
    1304:	37 95       	ror	r19
    1306:	27 95       	ror	r18
    1308:	a7 95       	ror	r26
    130a:	f0 40       	sbci	r31, 0x00	; 0
    130c:	53 95       	inc	r21
    130e:	c9 f7       	brne	.-14     	; 0x1302 <__addsf3x+0x4e>
    1310:	7e f4       	brtc	.+30     	; 0x1330 <__addsf3x+0x7c>
    1312:	1f 16       	cp	r1, r31
    1314:	ba 0b       	sbc	r27, r26
    1316:	62 0b       	sbc	r22, r18
    1318:	73 0b       	sbc	r23, r19
    131a:	84 0b       	sbc	r24, r20
    131c:	ba f0       	brmi	.+46     	; 0x134c <__addsf3x+0x98>
    131e:	91 50       	subi	r25, 0x01	; 1
    1320:	a1 f0       	breq	.+40     	; 0x134a <__addsf3x+0x96>
    1322:	ff 0f       	add	r31, r31
    1324:	bb 1f       	adc	r27, r27
    1326:	66 1f       	adc	r22, r22
    1328:	77 1f       	adc	r23, r23
    132a:	88 1f       	adc	r24, r24
    132c:	c2 f7       	brpl	.-16     	; 0x131e <__addsf3x+0x6a>
    132e:	0e c0       	rjmp	.+28     	; 0x134c <__addsf3x+0x98>
    1330:	ba 0f       	add	r27, r26
    1332:	62 1f       	adc	r22, r18
    1334:	73 1f       	adc	r23, r19
    1336:	84 1f       	adc	r24, r20
    1338:	48 f4       	brcc	.+18     	; 0x134c <__addsf3x+0x98>
    133a:	87 95       	ror	r24
    133c:	77 95       	ror	r23
    133e:	67 95       	ror	r22
    1340:	b7 95       	ror	r27
    1342:	f7 95       	ror	r31
    1344:	9e 3f       	cpi	r25, 0xFE	; 254
    1346:	08 f0       	brcs	.+2      	; 0x134a <__addsf3x+0x96>
    1348:	b3 cf       	rjmp	.-154    	; 0x12b0 <__addsf3+0x1e>
    134a:	93 95       	inc	r25
    134c:	88 0f       	add	r24, r24
    134e:	08 f0       	brcs	.+2      	; 0x1352 <__addsf3x+0x9e>
    1350:	99 27       	eor	r25, r25
    1352:	ee 0f       	add	r30, r30
    1354:	97 95       	ror	r25
    1356:	87 95       	ror	r24
    1358:	08 95       	ret

0000135a <__cmpsf2>:
    135a:	17 d1       	rcall	.+558    	; 0x158a <__fp_cmp>
    135c:	08 f4       	brcc	.+2      	; 0x1360 <__cmpsf2+0x6>
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	08 95       	ret

00001362 <__divsf3>:
    1362:	0c d0       	rcall	.+24     	; 0x137c <__divsf3x>
    1364:	4d c1       	rjmp	.+666    	; 0x1600 <__fp_round>
    1366:	45 d1       	rcall	.+650    	; 0x15f2 <__fp_pscB>
    1368:	40 f0       	brcs	.+16     	; 0x137a <__divsf3+0x18>
    136a:	3c d1       	rcall	.+632    	; 0x15e4 <__fp_pscA>
    136c:	30 f0       	brcs	.+12     	; 0x137a <__divsf3+0x18>
    136e:	21 f4       	brne	.+8      	; 0x1378 <__divsf3+0x16>
    1370:	5f 3f       	cpi	r21, 0xFF	; 255
    1372:	19 f0       	breq	.+6      	; 0x137a <__divsf3+0x18>
    1374:	2e c1       	rjmp	.+604    	; 0x15d2 <__fp_inf>
    1376:	51 11       	cpse	r21, r1
    1378:	77 c1       	rjmp	.+750    	; 0x1668 <__fp_szero>
    137a:	31 c1       	rjmp	.+610    	; 0x15de <__fp_nan>

0000137c <__divsf3x>:
    137c:	52 d1       	rcall	.+676    	; 0x1622 <__fp_split3>
    137e:	98 f3       	brcs	.-26     	; 0x1366 <__divsf3+0x4>

00001380 <__divsf3_pse>:
    1380:	99 23       	and	r25, r25
    1382:	c9 f3       	breq	.-14     	; 0x1376 <__divsf3+0x14>
    1384:	55 23       	and	r21, r21
    1386:	b1 f3       	breq	.-20     	; 0x1374 <__divsf3+0x12>
    1388:	95 1b       	sub	r25, r21
    138a:	55 0b       	sbc	r21, r21
    138c:	bb 27       	eor	r27, r27
    138e:	aa 27       	eor	r26, r26
    1390:	62 17       	cp	r22, r18
    1392:	73 07       	cpc	r23, r19
    1394:	84 07       	cpc	r24, r20
    1396:	38 f0       	brcs	.+14     	; 0x13a6 <__divsf3_pse+0x26>
    1398:	9f 5f       	subi	r25, 0xFF	; 255
    139a:	5f 4f       	sbci	r21, 0xFF	; 255
    139c:	22 0f       	add	r18, r18
    139e:	33 1f       	adc	r19, r19
    13a0:	44 1f       	adc	r20, r20
    13a2:	aa 1f       	adc	r26, r26
    13a4:	a9 f3       	breq	.-22     	; 0x1390 <__divsf3_pse+0x10>
    13a6:	33 d0       	rcall	.+102    	; 0x140e <__divsf3_pse+0x8e>
    13a8:	0e 2e       	mov	r0, r30
    13aa:	3a f0       	brmi	.+14     	; 0x13ba <__divsf3_pse+0x3a>
    13ac:	e0 e8       	ldi	r30, 0x80	; 128
    13ae:	30 d0       	rcall	.+96     	; 0x1410 <__divsf3_pse+0x90>
    13b0:	91 50       	subi	r25, 0x01	; 1
    13b2:	50 40       	sbci	r21, 0x00	; 0
    13b4:	e6 95       	lsr	r30
    13b6:	00 1c       	adc	r0, r0
    13b8:	ca f7       	brpl	.-14     	; 0x13ac <__divsf3_pse+0x2c>
    13ba:	29 d0       	rcall	.+82     	; 0x140e <__divsf3_pse+0x8e>
    13bc:	fe 2f       	mov	r31, r30
    13be:	27 d0       	rcall	.+78     	; 0x140e <__divsf3_pse+0x8e>
    13c0:	66 0f       	add	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	88 1f       	adc	r24, r24
    13c6:	bb 1f       	adc	r27, r27
    13c8:	26 17       	cp	r18, r22
    13ca:	37 07       	cpc	r19, r23
    13cc:	48 07       	cpc	r20, r24
    13ce:	ab 07       	cpc	r26, r27
    13d0:	b0 e8       	ldi	r27, 0x80	; 128
    13d2:	09 f0       	breq	.+2      	; 0x13d6 <__divsf3_pse+0x56>
    13d4:	bb 0b       	sbc	r27, r27
    13d6:	80 2d       	mov	r24, r0
    13d8:	bf 01       	movw	r22, r30
    13da:	ff 27       	eor	r31, r31
    13dc:	93 58       	subi	r25, 0x83	; 131
    13de:	5f 4f       	sbci	r21, 0xFF	; 255
    13e0:	2a f0       	brmi	.+10     	; 0x13ec <__divsf3_pse+0x6c>
    13e2:	9e 3f       	cpi	r25, 0xFE	; 254
    13e4:	51 05       	cpc	r21, r1
    13e6:	68 f0       	brcs	.+26     	; 0x1402 <__divsf3_pse+0x82>
    13e8:	f4 c0       	rjmp	.+488    	; 0x15d2 <__fp_inf>
    13ea:	3e c1       	rjmp	.+636    	; 0x1668 <__fp_szero>
    13ec:	5f 3f       	cpi	r21, 0xFF	; 255
    13ee:	ec f3       	brlt	.-6      	; 0x13ea <__divsf3_pse+0x6a>
    13f0:	98 3e       	cpi	r25, 0xE8	; 232
    13f2:	dc f3       	brlt	.-10     	; 0x13ea <__divsf3_pse+0x6a>
    13f4:	86 95       	lsr	r24
    13f6:	77 95       	ror	r23
    13f8:	67 95       	ror	r22
    13fa:	b7 95       	ror	r27
    13fc:	f7 95       	ror	r31
    13fe:	9f 5f       	subi	r25, 0xFF	; 255
    1400:	c9 f7       	brne	.-14     	; 0x13f4 <__divsf3_pse+0x74>
    1402:	88 0f       	add	r24, r24
    1404:	91 1d       	adc	r25, r1
    1406:	96 95       	lsr	r25
    1408:	87 95       	ror	r24
    140a:	97 f9       	bld	r25, 7
    140c:	08 95       	ret
    140e:	e1 e0       	ldi	r30, 0x01	; 1
    1410:	66 0f       	add	r22, r22
    1412:	77 1f       	adc	r23, r23
    1414:	88 1f       	adc	r24, r24
    1416:	bb 1f       	adc	r27, r27
    1418:	62 17       	cp	r22, r18
    141a:	73 07       	cpc	r23, r19
    141c:	84 07       	cpc	r24, r20
    141e:	ba 07       	cpc	r27, r26
    1420:	20 f0       	brcs	.+8      	; 0x142a <__divsf3_pse+0xaa>
    1422:	62 1b       	sub	r22, r18
    1424:	73 0b       	sbc	r23, r19
    1426:	84 0b       	sbc	r24, r20
    1428:	ba 0b       	sbc	r27, r26
    142a:	ee 1f       	adc	r30, r30
    142c:	88 f7       	brcc	.-30     	; 0x1410 <__divsf3_pse+0x90>
    142e:	e0 95       	com	r30
    1430:	08 95       	ret

00001432 <__fixsfsi>:
    1432:	04 d0       	rcall	.+8      	; 0x143c <__fixunssfsi>
    1434:	68 94       	set
    1436:	b1 11       	cpse	r27, r1
    1438:	17 c1       	rjmp	.+558    	; 0x1668 <__fp_szero>
    143a:	08 95       	ret

0000143c <__fixunssfsi>:
    143c:	fa d0       	rcall	.+500    	; 0x1632 <__fp_splitA>
    143e:	88 f0       	brcs	.+34     	; 0x1462 <__fixunssfsi+0x26>
    1440:	9f 57       	subi	r25, 0x7F	; 127
    1442:	90 f0       	brcs	.+36     	; 0x1468 <__fixunssfsi+0x2c>
    1444:	b9 2f       	mov	r27, r25
    1446:	99 27       	eor	r25, r25
    1448:	b7 51       	subi	r27, 0x17	; 23
    144a:	a0 f0       	brcs	.+40     	; 0x1474 <__fixunssfsi+0x38>
    144c:	d1 f0       	breq	.+52     	; 0x1482 <__fixunssfsi+0x46>
    144e:	66 0f       	add	r22, r22
    1450:	77 1f       	adc	r23, r23
    1452:	88 1f       	adc	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	1a f0       	brmi	.+6      	; 0x145e <__fixunssfsi+0x22>
    1458:	ba 95       	dec	r27
    145a:	c9 f7       	brne	.-14     	; 0x144e <__fixunssfsi+0x12>
    145c:	12 c0       	rjmp	.+36     	; 0x1482 <__fixunssfsi+0x46>
    145e:	b1 30       	cpi	r27, 0x01	; 1
    1460:	81 f0       	breq	.+32     	; 0x1482 <__fixunssfsi+0x46>
    1462:	01 d1       	rcall	.+514    	; 0x1666 <__fp_zero>
    1464:	b1 e0       	ldi	r27, 0x01	; 1
    1466:	08 95       	ret
    1468:	fe c0       	rjmp	.+508    	; 0x1666 <__fp_zero>
    146a:	67 2f       	mov	r22, r23
    146c:	78 2f       	mov	r23, r24
    146e:	88 27       	eor	r24, r24
    1470:	b8 5f       	subi	r27, 0xF8	; 248
    1472:	39 f0       	breq	.+14     	; 0x1482 <__fixunssfsi+0x46>
    1474:	b9 3f       	cpi	r27, 0xF9	; 249
    1476:	cc f3       	brlt	.-14     	; 0x146a <__fixunssfsi+0x2e>
    1478:	86 95       	lsr	r24
    147a:	77 95       	ror	r23
    147c:	67 95       	ror	r22
    147e:	b3 95       	inc	r27
    1480:	d9 f7       	brne	.-10     	; 0x1478 <__fixunssfsi+0x3c>
    1482:	3e f4       	brtc	.+14     	; 0x1492 <__fixunssfsi+0x56>
    1484:	90 95       	com	r25
    1486:	80 95       	com	r24
    1488:	70 95       	com	r23
    148a:	61 95       	neg	r22
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8f 4f       	sbci	r24, 0xFF	; 255
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	08 95       	ret

00001494 <__floatunsisf>:
    1494:	e8 94       	clt
    1496:	09 c0       	rjmp	.+18     	; 0x14aa <__floatsisf+0x12>

00001498 <__floatsisf>:
    1498:	97 fb       	bst	r25, 7
    149a:	3e f4       	brtc	.+14     	; 0x14aa <__floatsisf+0x12>
    149c:	90 95       	com	r25
    149e:	80 95       	com	r24
    14a0:	70 95       	com	r23
    14a2:	61 95       	neg	r22
    14a4:	7f 4f       	sbci	r23, 0xFF	; 255
    14a6:	8f 4f       	sbci	r24, 0xFF	; 255
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	99 23       	and	r25, r25
    14ac:	a9 f0       	breq	.+42     	; 0x14d8 <__floatsisf+0x40>
    14ae:	f9 2f       	mov	r31, r25
    14b0:	96 e9       	ldi	r25, 0x96	; 150
    14b2:	bb 27       	eor	r27, r27
    14b4:	93 95       	inc	r25
    14b6:	f6 95       	lsr	r31
    14b8:	87 95       	ror	r24
    14ba:	77 95       	ror	r23
    14bc:	67 95       	ror	r22
    14be:	b7 95       	ror	r27
    14c0:	f1 11       	cpse	r31, r1
    14c2:	f8 cf       	rjmp	.-16     	; 0x14b4 <__floatsisf+0x1c>
    14c4:	fa f4       	brpl	.+62     	; 0x1504 <__floatsisf+0x6c>
    14c6:	bb 0f       	add	r27, r27
    14c8:	11 f4       	brne	.+4      	; 0x14ce <__floatsisf+0x36>
    14ca:	60 ff       	sbrs	r22, 0
    14cc:	1b c0       	rjmp	.+54     	; 0x1504 <__floatsisf+0x6c>
    14ce:	6f 5f       	subi	r22, 0xFF	; 255
    14d0:	7f 4f       	sbci	r23, 0xFF	; 255
    14d2:	8f 4f       	sbci	r24, 0xFF	; 255
    14d4:	9f 4f       	sbci	r25, 0xFF	; 255
    14d6:	16 c0       	rjmp	.+44     	; 0x1504 <__floatsisf+0x6c>
    14d8:	88 23       	and	r24, r24
    14da:	11 f0       	breq	.+4      	; 0x14e0 <__floatsisf+0x48>
    14dc:	96 e9       	ldi	r25, 0x96	; 150
    14de:	11 c0       	rjmp	.+34     	; 0x1502 <__floatsisf+0x6a>
    14e0:	77 23       	and	r23, r23
    14e2:	21 f0       	breq	.+8      	; 0x14ec <__floatsisf+0x54>
    14e4:	9e e8       	ldi	r25, 0x8E	; 142
    14e6:	87 2f       	mov	r24, r23
    14e8:	76 2f       	mov	r23, r22
    14ea:	05 c0       	rjmp	.+10     	; 0x14f6 <__floatsisf+0x5e>
    14ec:	66 23       	and	r22, r22
    14ee:	71 f0       	breq	.+28     	; 0x150c <__floatsisf+0x74>
    14f0:	96 e8       	ldi	r25, 0x86	; 134
    14f2:	86 2f       	mov	r24, r22
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	2a f0       	brmi	.+10     	; 0x1504 <__floatsisf+0x6c>
    14fa:	9a 95       	dec	r25
    14fc:	66 0f       	add	r22, r22
    14fe:	77 1f       	adc	r23, r23
    1500:	88 1f       	adc	r24, r24
    1502:	da f7       	brpl	.-10     	; 0x14fa <__floatsisf+0x62>
    1504:	88 0f       	add	r24, r24
    1506:	96 95       	lsr	r25
    1508:	87 95       	ror	r24
    150a:	97 f9       	bld	r25, 7
    150c:	08 95       	ret

0000150e <__floatundisf>:
    150e:	e8 94       	clt

00001510 <__fp_di2sf>:
    1510:	f9 2f       	mov	r31, r25
    1512:	96 eb       	ldi	r25, 0xB6	; 182
    1514:	ff 23       	and	r31, r31
    1516:	81 f0       	breq	.+32     	; 0x1538 <__fp_di2sf+0x28>
    1518:	12 16       	cp	r1, r18
    151a:	13 06       	cpc	r1, r19
    151c:	14 06       	cpc	r1, r20
    151e:	44 0b       	sbc	r20, r20
    1520:	93 95       	inc	r25
    1522:	f6 95       	lsr	r31
    1524:	87 95       	ror	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	57 95       	ror	r21
    152c:	40 40       	sbci	r20, 0x00	; 0
    152e:	ff 23       	and	r31, r31
    1530:	b9 f7       	brne	.-18     	; 0x1520 <__fp_di2sf+0x10>
    1532:	1b c0       	rjmp	.+54     	; 0x156a <__fp_di2sf+0x5a>
    1534:	99 27       	eor	r25, r25
    1536:	08 95       	ret
    1538:	88 23       	and	r24, r24
    153a:	51 f4       	brne	.+20     	; 0x1550 <__fp_di2sf+0x40>
    153c:	98 50       	subi	r25, 0x08	; 8
    153e:	d2 f7       	brpl	.-12     	; 0x1534 <__fp_di2sf+0x24>
    1540:	87 2b       	or	r24, r23
    1542:	76 2f       	mov	r23, r22
    1544:	65 2f       	mov	r22, r21
    1546:	54 2f       	mov	r21, r20
    1548:	43 2f       	mov	r20, r19
    154a:	32 2f       	mov	r19, r18
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	b1 f3       	breq	.-20     	; 0x153c <__fp_di2sf+0x2c>
    1550:	12 16       	cp	r1, r18
    1552:	13 06       	cpc	r1, r19
    1554:	14 06       	cpc	r1, r20
    1556:	44 0b       	sbc	r20, r20
    1558:	88 23       	and	r24, r24
    155a:	3a f0       	brmi	.+14     	; 0x156a <__fp_di2sf+0x5a>
    155c:	9a 95       	dec	r25
    155e:	44 0f       	add	r20, r20
    1560:	55 1f       	adc	r21, r21
    1562:	66 1f       	adc	r22, r22
    1564:	77 1f       	adc	r23, r23
    1566:	88 1f       	adc	r24, r24
    1568:	ca f7       	brpl	.-14     	; 0x155c <__fp_di2sf+0x4c>
    156a:	55 23       	and	r21, r21
    156c:	4a f4       	brpl	.+18     	; 0x1580 <__fp_di2sf+0x70>
    156e:	44 0f       	add	r20, r20
    1570:	55 1f       	adc	r21, r21
    1572:	11 f4       	brne	.+4      	; 0x1578 <__fp_di2sf+0x68>
    1574:	60 ff       	sbrs	r22, 0
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <__fp_di2sf+0x70>
    1578:	6f 5f       	subi	r22, 0xFF	; 255
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	88 0f       	add	r24, r24
    1582:	96 95       	lsr	r25
    1584:	87 95       	ror	r24
    1586:	97 f9       	bld	r25, 7
    1588:	08 95       	ret

0000158a <__fp_cmp>:
    158a:	99 0f       	add	r25, r25
    158c:	00 08       	sbc	r0, r0
    158e:	55 0f       	add	r21, r21
    1590:	aa 0b       	sbc	r26, r26
    1592:	e0 e8       	ldi	r30, 0x80	; 128
    1594:	fe ef       	ldi	r31, 0xFE	; 254
    1596:	16 16       	cp	r1, r22
    1598:	17 06       	cpc	r1, r23
    159a:	e8 07       	cpc	r30, r24
    159c:	f9 07       	cpc	r31, r25
    159e:	c0 f0       	brcs	.+48     	; 0x15d0 <__fp_cmp+0x46>
    15a0:	12 16       	cp	r1, r18
    15a2:	13 06       	cpc	r1, r19
    15a4:	e4 07       	cpc	r30, r20
    15a6:	f5 07       	cpc	r31, r21
    15a8:	98 f0       	brcs	.+38     	; 0x15d0 <__fp_cmp+0x46>
    15aa:	62 1b       	sub	r22, r18
    15ac:	73 0b       	sbc	r23, r19
    15ae:	84 0b       	sbc	r24, r20
    15b0:	95 0b       	sbc	r25, r21
    15b2:	39 f4       	brne	.+14     	; 0x15c2 <__fp_cmp+0x38>
    15b4:	0a 26       	eor	r0, r26
    15b6:	61 f0       	breq	.+24     	; 0x15d0 <__fp_cmp+0x46>
    15b8:	23 2b       	or	r18, r19
    15ba:	24 2b       	or	r18, r20
    15bc:	25 2b       	or	r18, r21
    15be:	21 f4       	brne	.+8      	; 0x15c8 <__fp_cmp+0x3e>
    15c0:	08 95       	ret
    15c2:	0a 26       	eor	r0, r26
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <__fp_cmp+0x3e>
    15c6:	a1 40       	sbci	r26, 0x01	; 1
    15c8:	a6 95       	lsr	r26
    15ca:	8f ef       	ldi	r24, 0xFF	; 255
    15cc:	81 1d       	adc	r24, r1
    15ce:	81 1d       	adc	r24, r1
    15d0:	08 95       	ret

000015d2 <__fp_inf>:
    15d2:	97 f9       	bld	r25, 7
    15d4:	9f 67       	ori	r25, 0x7F	; 127
    15d6:	80 e8       	ldi	r24, 0x80	; 128
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	08 95       	ret

000015de <__fp_nan>:
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	80 ec       	ldi	r24, 0xC0	; 192
    15e2:	08 95       	ret

000015e4 <__fp_pscA>:
    15e4:	00 24       	eor	r0, r0
    15e6:	0a 94       	dec	r0
    15e8:	16 16       	cp	r1, r22
    15ea:	17 06       	cpc	r1, r23
    15ec:	18 06       	cpc	r1, r24
    15ee:	09 06       	cpc	r0, r25
    15f0:	08 95       	ret

000015f2 <__fp_pscB>:
    15f2:	00 24       	eor	r0, r0
    15f4:	0a 94       	dec	r0
    15f6:	12 16       	cp	r1, r18
    15f8:	13 06       	cpc	r1, r19
    15fa:	14 06       	cpc	r1, r20
    15fc:	05 06       	cpc	r0, r21
    15fe:	08 95       	ret

00001600 <__fp_round>:
    1600:	09 2e       	mov	r0, r25
    1602:	03 94       	inc	r0
    1604:	00 0c       	add	r0, r0
    1606:	11 f4       	brne	.+4      	; 0x160c <__fp_round+0xc>
    1608:	88 23       	and	r24, r24
    160a:	52 f0       	brmi	.+20     	; 0x1620 <__fp_round+0x20>
    160c:	bb 0f       	add	r27, r27
    160e:	40 f4       	brcc	.+16     	; 0x1620 <__fp_round+0x20>
    1610:	bf 2b       	or	r27, r31
    1612:	11 f4       	brne	.+4      	; 0x1618 <__fp_round+0x18>
    1614:	60 ff       	sbrs	r22, 0
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <__fp_round+0x20>
    1618:	6f 5f       	subi	r22, 0xFF	; 255
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	8f 4f       	sbci	r24, 0xFF	; 255
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	08 95       	ret

00001622 <__fp_split3>:
    1622:	57 fd       	sbrc	r21, 7
    1624:	90 58       	subi	r25, 0x80	; 128
    1626:	44 0f       	add	r20, r20
    1628:	55 1f       	adc	r21, r21
    162a:	59 f0       	breq	.+22     	; 0x1642 <__fp_splitA+0x10>
    162c:	5f 3f       	cpi	r21, 0xFF	; 255
    162e:	71 f0       	breq	.+28     	; 0x164c <__fp_splitA+0x1a>
    1630:	47 95       	ror	r20

00001632 <__fp_splitA>:
    1632:	88 0f       	add	r24, r24
    1634:	97 fb       	bst	r25, 7
    1636:	99 1f       	adc	r25, r25
    1638:	61 f0       	breq	.+24     	; 0x1652 <__fp_splitA+0x20>
    163a:	9f 3f       	cpi	r25, 0xFF	; 255
    163c:	79 f0       	breq	.+30     	; 0x165c <__fp_splitA+0x2a>
    163e:	87 95       	ror	r24
    1640:	08 95       	ret
    1642:	12 16       	cp	r1, r18
    1644:	13 06       	cpc	r1, r19
    1646:	14 06       	cpc	r1, r20
    1648:	55 1f       	adc	r21, r21
    164a:	f2 cf       	rjmp	.-28     	; 0x1630 <__fp_split3+0xe>
    164c:	46 95       	lsr	r20
    164e:	f1 df       	rcall	.-30     	; 0x1632 <__fp_splitA>
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <__fp_splitA+0x30>
    1652:	16 16       	cp	r1, r22
    1654:	17 06       	cpc	r1, r23
    1656:	18 06       	cpc	r1, r24
    1658:	99 1f       	adc	r25, r25
    165a:	f1 cf       	rjmp	.-30     	; 0x163e <__fp_splitA+0xc>
    165c:	86 95       	lsr	r24
    165e:	71 05       	cpc	r23, r1
    1660:	61 05       	cpc	r22, r1
    1662:	08 94       	sec
    1664:	08 95       	ret

00001666 <__fp_zero>:
    1666:	e8 94       	clt

00001668 <__fp_szero>:
    1668:	bb 27       	eor	r27, r27
    166a:	66 27       	eor	r22, r22
    166c:	77 27       	eor	r23, r23
    166e:	cb 01       	movw	r24, r22
    1670:	97 f9       	bld	r25, 7
    1672:	08 95       	ret

00001674 <__gesf2>:
    1674:	8a df       	rcall	.-236    	; 0x158a <__fp_cmp>
    1676:	08 f4       	brcc	.+2      	; 0x167a <__gesf2+0x6>
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	08 95       	ret

0000167c <__mulsf3>:
    167c:	0b d0       	rcall	.+22     	; 0x1694 <__mulsf3x>
    167e:	c0 cf       	rjmp	.-128    	; 0x1600 <__fp_round>
    1680:	b1 df       	rcall	.-158    	; 0x15e4 <__fp_pscA>
    1682:	28 f0       	brcs	.+10     	; 0x168e <__mulsf3+0x12>
    1684:	b6 df       	rcall	.-148    	; 0x15f2 <__fp_pscB>
    1686:	18 f0       	brcs	.+6      	; 0x168e <__mulsf3+0x12>
    1688:	95 23       	and	r25, r21
    168a:	09 f0       	breq	.+2      	; 0x168e <__mulsf3+0x12>
    168c:	a2 cf       	rjmp	.-188    	; 0x15d2 <__fp_inf>
    168e:	a7 cf       	rjmp	.-178    	; 0x15de <__fp_nan>
    1690:	11 24       	eor	r1, r1
    1692:	ea cf       	rjmp	.-44     	; 0x1668 <__fp_szero>

00001694 <__mulsf3x>:
    1694:	c6 df       	rcall	.-116    	; 0x1622 <__fp_split3>
    1696:	a0 f3       	brcs	.-24     	; 0x1680 <__mulsf3+0x4>

00001698 <__mulsf3_pse>:
    1698:	95 9f       	mul	r25, r21
    169a:	d1 f3       	breq	.-12     	; 0x1690 <__mulsf3+0x14>
    169c:	95 0f       	add	r25, r21
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	55 1f       	adc	r21, r21
    16a2:	62 9f       	mul	r22, r18
    16a4:	f0 01       	movw	r30, r0
    16a6:	72 9f       	mul	r23, r18
    16a8:	bb 27       	eor	r27, r27
    16aa:	f0 0d       	add	r31, r0
    16ac:	b1 1d       	adc	r27, r1
    16ae:	63 9f       	mul	r22, r19
    16b0:	aa 27       	eor	r26, r26
    16b2:	f0 0d       	add	r31, r0
    16b4:	b1 1d       	adc	r27, r1
    16b6:	aa 1f       	adc	r26, r26
    16b8:	64 9f       	mul	r22, r20
    16ba:	66 27       	eor	r22, r22
    16bc:	b0 0d       	add	r27, r0
    16be:	a1 1d       	adc	r26, r1
    16c0:	66 1f       	adc	r22, r22
    16c2:	82 9f       	mul	r24, r18
    16c4:	22 27       	eor	r18, r18
    16c6:	b0 0d       	add	r27, r0
    16c8:	a1 1d       	adc	r26, r1
    16ca:	62 1f       	adc	r22, r18
    16cc:	73 9f       	mul	r23, r19
    16ce:	b0 0d       	add	r27, r0
    16d0:	a1 1d       	adc	r26, r1
    16d2:	62 1f       	adc	r22, r18
    16d4:	83 9f       	mul	r24, r19
    16d6:	a0 0d       	add	r26, r0
    16d8:	61 1d       	adc	r22, r1
    16da:	22 1f       	adc	r18, r18
    16dc:	74 9f       	mul	r23, r20
    16de:	33 27       	eor	r19, r19
    16e0:	a0 0d       	add	r26, r0
    16e2:	61 1d       	adc	r22, r1
    16e4:	23 1f       	adc	r18, r19
    16e6:	84 9f       	mul	r24, r20
    16e8:	60 0d       	add	r22, r0
    16ea:	21 1d       	adc	r18, r1
    16ec:	82 2f       	mov	r24, r18
    16ee:	76 2f       	mov	r23, r22
    16f0:	6a 2f       	mov	r22, r26
    16f2:	11 24       	eor	r1, r1
    16f4:	9f 57       	subi	r25, 0x7F	; 127
    16f6:	50 40       	sbci	r21, 0x00	; 0
    16f8:	8a f0       	brmi	.+34     	; 0x171c <__mulsf3_pse+0x84>
    16fa:	e1 f0       	breq	.+56     	; 0x1734 <__mulsf3_pse+0x9c>
    16fc:	88 23       	and	r24, r24
    16fe:	4a f0       	brmi	.+18     	; 0x1712 <__mulsf3_pse+0x7a>
    1700:	ee 0f       	add	r30, r30
    1702:	ff 1f       	adc	r31, r31
    1704:	bb 1f       	adc	r27, r27
    1706:	66 1f       	adc	r22, r22
    1708:	77 1f       	adc	r23, r23
    170a:	88 1f       	adc	r24, r24
    170c:	91 50       	subi	r25, 0x01	; 1
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	a9 f7       	brne	.-22     	; 0x16fc <__mulsf3_pse+0x64>
    1712:	9e 3f       	cpi	r25, 0xFE	; 254
    1714:	51 05       	cpc	r21, r1
    1716:	70 f0       	brcs	.+28     	; 0x1734 <__mulsf3_pse+0x9c>
    1718:	5c cf       	rjmp	.-328    	; 0x15d2 <__fp_inf>
    171a:	a6 cf       	rjmp	.-180    	; 0x1668 <__fp_szero>
    171c:	5f 3f       	cpi	r21, 0xFF	; 255
    171e:	ec f3       	brlt	.-6      	; 0x171a <__mulsf3_pse+0x82>
    1720:	98 3e       	cpi	r25, 0xE8	; 232
    1722:	dc f3       	brlt	.-10     	; 0x171a <__mulsf3_pse+0x82>
    1724:	86 95       	lsr	r24
    1726:	77 95       	ror	r23
    1728:	67 95       	ror	r22
    172a:	b7 95       	ror	r27
    172c:	f7 95       	ror	r31
    172e:	e7 95       	ror	r30
    1730:	9f 5f       	subi	r25, 0xFF	; 255
    1732:	c1 f7       	brne	.-16     	; 0x1724 <__mulsf3_pse+0x8c>
    1734:	fe 2b       	or	r31, r30
    1736:	88 0f       	add	r24, r24
    1738:	91 1d       	adc	r25, r1
    173a:	96 95       	lsr	r25
    173c:	87 95       	ror	r24
    173e:	97 f9       	bld	r25, 7
    1740:	08 95       	ret

00001742 <__adddi3_s8>:
    1742:	00 24       	eor	r0, r0
    1744:	a7 fd       	sbrc	r26, 7
    1746:	00 94       	com	r0
    1748:	2a 0f       	add	r18, r26
    174a:	30 1d       	adc	r19, r0
    174c:	40 1d       	adc	r20, r0
    174e:	50 1d       	adc	r21, r0
    1750:	60 1d       	adc	r22, r0
    1752:	70 1d       	adc	r23, r0
    1754:	80 1d       	adc	r24, r0
    1756:	90 1d       	adc	r25, r0
    1758:	08 95       	ret

0000175a <__subdi3>:
    175a:	2a 19       	sub	r18, r10
    175c:	3b 09       	sbc	r19, r11
    175e:	4c 09       	sbc	r20, r12
    1760:	5d 09       	sbc	r21, r13
    1762:	6e 09       	sbc	r22, r14
    1764:	7f 09       	sbc	r23, r15
    1766:	80 0b       	sbc	r24, r16
    1768:	91 0b       	sbc	r25, r17
    176a:	08 95       	ret

0000176c <atoi>:
    176c:	fc 01       	movw	r30, r24
    176e:	88 27       	eor	r24, r24
    1770:	99 27       	eor	r25, r25
    1772:	e8 94       	clt
    1774:	21 91       	ld	r18, Z+
    1776:	20 32       	cpi	r18, 0x20	; 32
    1778:	e9 f3       	breq	.-6      	; 0x1774 <atoi+0x8>
    177a:	29 30       	cpi	r18, 0x09	; 9
    177c:	10 f0       	brcs	.+4      	; 0x1782 <atoi+0x16>
    177e:	2e 30       	cpi	r18, 0x0E	; 14
    1780:	c8 f3       	brcs	.-14     	; 0x1774 <atoi+0x8>
    1782:	2b 32       	cpi	r18, 0x2B	; 43
    1784:	39 f0       	breq	.+14     	; 0x1794 <atoi+0x28>
    1786:	2d 32       	cpi	r18, 0x2D	; 45
    1788:	31 f4       	brne	.+12     	; 0x1796 <atoi+0x2a>
    178a:	68 94       	set
    178c:	03 c0       	rjmp	.+6      	; 0x1794 <atoi+0x28>
    178e:	45 d0       	rcall	.+138    	; 0x181a <__mulhi_const_10>
    1790:	82 0f       	add	r24, r18
    1792:	91 1d       	adc	r25, r1
    1794:	21 91       	ld	r18, Z+
    1796:	20 53       	subi	r18, 0x30	; 48
    1798:	2a 30       	cpi	r18, 0x0A	; 10
    179a:	c8 f3       	brcs	.-14     	; 0x178e <atoi+0x22>
    179c:	1e f4       	brtc	.+6      	; 0x17a4 <atoi+0x38>
    179e:	90 95       	com	r25
    17a0:	81 95       	neg	r24
    17a2:	9f 4f       	sbci	r25, 0xFF	; 255
    17a4:	08 95       	ret

000017a6 <strtok>:
    17a6:	4a e4       	ldi	r20, 0x4A	; 74
    17a8:	52 e0       	ldi	r21, 0x02	; 2
    17aa:	10 c0       	rjmp	.+32     	; 0x17cc <strtok_r>

000017ac <strcmp>:
    17ac:	fb 01       	movw	r30, r22
    17ae:	dc 01       	movw	r26, r24
    17b0:	8d 91       	ld	r24, X+
    17b2:	01 90       	ld	r0, Z+
    17b4:	80 19       	sub	r24, r0
    17b6:	01 10       	cpse	r0, r1
    17b8:	d9 f3       	breq	.-10     	; 0x17b0 <strcmp+0x4>
    17ba:	99 0b       	sbc	r25, r25
    17bc:	08 95       	ret

000017be <strcpy>:
    17be:	fb 01       	movw	r30, r22
    17c0:	dc 01       	movw	r26, r24
    17c2:	01 90       	ld	r0, Z+
    17c4:	0d 92       	st	X+, r0
    17c6:	00 20       	and	r0, r0
    17c8:	e1 f7       	brne	.-8      	; 0x17c2 <strcpy+0x4>
    17ca:	08 95       	ret

000017cc <strtok_r>:
    17cc:	fa 01       	movw	r30, r20
    17ce:	a1 91       	ld	r26, Z+
    17d0:	b0 81       	ld	r27, Z
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	19 f4       	brne	.+6      	; 0x17dc <strtok_r+0x10>
    17d6:	10 97       	sbiw	r26, 0x00	; 0
    17d8:	e1 f0       	breq	.+56     	; 0x1812 <strtok_r+0x46>
    17da:	cd 01       	movw	r24, r26
    17dc:	dc 01       	movw	r26, r24
    17de:	cd 01       	movw	r24, r26
    17e0:	0d 90       	ld	r0, X+
    17e2:	00 20       	and	r0, r0
    17e4:	11 f4       	brne	.+4      	; 0x17ea <strtok_r+0x1e>
    17e6:	c0 01       	movw	r24, r0
    17e8:	13 c0       	rjmp	.+38     	; 0x1810 <strtok_r+0x44>
    17ea:	fb 01       	movw	r30, r22
    17ec:	21 91       	ld	r18, Z+
    17ee:	22 23       	and	r18, r18
    17f0:	19 f0       	breq	.+6      	; 0x17f8 <strtok_r+0x2c>
    17f2:	20 15       	cp	r18, r0
    17f4:	d9 f7       	brne	.-10     	; 0x17ec <strtok_r+0x20>
    17f6:	f3 cf       	rjmp	.-26     	; 0x17de <strtok_r+0x12>
    17f8:	fb 01       	movw	r30, r22
    17fa:	21 91       	ld	r18, Z+
    17fc:	20 15       	cp	r18, r0
    17fe:	19 f4       	brne	.+6      	; 0x1806 <strtok_r+0x3a>
    1800:	1e 92       	st	-X, r1
    1802:	11 96       	adiw	r26, 0x01	; 1
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <strtok_r+0x46>
    1806:	22 23       	and	r18, r18
    1808:	c1 f7       	brne	.-16     	; 0x17fa <strtok_r+0x2e>
    180a:	0d 90       	ld	r0, X+
    180c:	00 20       	and	r0, r0
    180e:	a1 f7       	brne	.-24     	; 0x17f8 <strtok_r+0x2c>
    1810:	d0 01       	movw	r26, r0
    1812:	fa 01       	movw	r30, r20
    1814:	a1 93       	st	Z+, r26
    1816:	b0 83       	st	Z, r27
    1818:	08 95       	ret

0000181a <__mulhi_const_10>:
    181a:	7a e0       	ldi	r23, 0x0A	; 10
    181c:	97 9f       	mul	r25, r23
    181e:	90 2d       	mov	r25, r0
    1820:	87 9f       	mul	r24, r23
    1822:	80 2d       	mov	r24, r0
    1824:	91 0d       	add	r25, r1
    1826:	11 24       	eor	r1, r1
    1828:	08 95       	ret

0000182a <sprintf>:
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	cf 93       	push	r28
    1830:	df 93       	push	r29
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	2e 97       	sbiw	r28, 0x0e	; 14
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	0e 89       	ldd	r16, Y+22	; 0x16
    1844:	1f 89       	ldd	r17, Y+23	; 0x17
    1846:	86 e0       	ldi	r24, 0x06	; 6
    1848:	8c 83       	std	Y+4, r24	; 0x04
    184a:	1a 83       	std	Y+2, r17	; 0x02
    184c:	09 83       	std	Y+1, r16	; 0x01
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	9f e7       	ldi	r25, 0x7F	; 127
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	8d 83       	std	Y+5, r24	; 0x05
    1856:	ae 01       	movw	r20, r28
    1858:	46 5e       	subi	r20, 0xE6	; 230
    185a:	5f 4f       	sbci	r21, 0xFF	; 255
    185c:	68 8d       	ldd	r22, Y+24	; 0x18
    185e:	79 8d       	ldd	r23, Y+25	; 0x19
    1860:	ce 01       	movw	r24, r28
    1862:	01 96       	adiw	r24, 0x01	; 1
    1864:	10 d0       	rcall	.+32     	; 0x1886 <vfprintf>
    1866:	ef 81       	ldd	r30, Y+7	; 0x07
    1868:	f8 85       	ldd	r31, Y+8	; 0x08
    186a:	e0 0f       	add	r30, r16
    186c:	f1 1f       	adc	r31, r17
    186e:	10 82       	st	Z, r1
    1870:	2e 96       	adiw	r28, 0x0e	; 14
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	0f 91       	pop	r16
    1884:	08 95       	ret

00001886 <vfprintf>:
    1886:	2f 92       	push	r2
    1888:	3f 92       	push	r3
    188a:	4f 92       	push	r4
    188c:	5f 92       	push	r5
    188e:	6f 92       	push	r6
    1890:	7f 92       	push	r7
    1892:	8f 92       	push	r8
    1894:	9f 92       	push	r9
    1896:	af 92       	push	r10
    1898:	bf 92       	push	r11
    189a:	cf 92       	push	r12
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	2b 97       	sbiw	r28, 0x0b	; 11
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
    18ba:	6c 01       	movw	r12, r24
    18bc:	7b 01       	movw	r14, r22
    18be:	8a 01       	movw	r16, r20
    18c0:	fc 01       	movw	r30, r24
    18c2:	17 82       	std	Z+7, r1	; 0x07
    18c4:	16 82       	std	Z+6, r1	; 0x06
    18c6:	83 81       	ldd	r24, Z+3	; 0x03
    18c8:	81 ff       	sbrs	r24, 1
    18ca:	bf c1       	rjmp	.+894    	; 0x1c4a <vfprintf+0x3c4>
    18cc:	ce 01       	movw	r24, r28
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	3c 01       	movw	r6, r24
    18d2:	f6 01       	movw	r30, r12
    18d4:	93 81       	ldd	r25, Z+3	; 0x03
    18d6:	f7 01       	movw	r30, r14
    18d8:	93 fd       	sbrc	r25, 3
    18da:	85 91       	lpm	r24, Z+
    18dc:	93 ff       	sbrs	r25, 3
    18de:	81 91       	ld	r24, Z+
    18e0:	7f 01       	movw	r14, r30
    18e2:	88 23       	and	r24, r24
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <vfprintf+0x62>
    18e6:	ad c1       	rjmp	.+858    	; 0x1c42 <vfprintf+0x3bc>
    18e8:	85 32       	cpi	r24, 0x25	; 37
    18ea:	39 f4       	brne	.+14     	; 0x18fa <vfprintf+0x74>
    18ec:	93 fd       	sbrc	r25, 3
    18ee:	85 91       	lpm	r24, Z+
    18f0:	93 ff       	sbrs	r25, 3
    18f2:	81 91       	ld	r24, Z+
    18f4:	7f 01       	movw	r14, r30
    18f6:	85 32       	cpi	r24, 0x25	; 37
    18f8:	21 f4       	brne	.+8      	; 0x1902 <vfprintf+0x7c>
    18fa:	b6 01       	movw	r22, r12
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	d6 d1       	rcall	.+940    	; 0x1cac <fputc>
    1900:	e8 cf       	rjmp	.-48     	; 0x18d2 <vfprintf+0x4c>
    1902:	91 2c       	mov	r9, r1
    1904:	21 2c       	mov	r2, r1
    1906:	31 2c       	mov	r3, r1
    1908:	ff e1       	ldi	r31, 0x1F	; 31
    190a:	f3 15       	cp	r31, r3
    190c:	d8 f0       	brcs	.+54     	; 0x1944 <vfprintf+0xbe>
    190e:	8b 32       	cpi	r24, 0x2B	; 43
    1910:	79 f0       	breq	.+30     	; 0x1930 <vfprintf+0xaa>
    1912:	38 f4       	brcc	.+14     	; 0x1922 <vfprintf+0x9c>
    1914:	80 32       	cpi	r24, 0x20	; 32
    1916:	79 f0       	breq	.+30     	; 0x1936 <vfprintf+0xb0>
    1918:	83 32       	cpi	r24, 0x23	; 35
    191a:	a1 f4       	brne	.+40     	; 0x1944 <vfprintf+0xbe>
    191c:	23 2d       	mov	r18, r3
    191e:	20 61       	ori	r18, 0x10	; 16
    1920:	1d c0       	rjmp	.+58     	; 0x195c <vfprintf+0xd6>
    1922:	8d 32       	cpi	r24, 0x2D	; 45
    1924:	61 f0       	breq	.+24     	; 0x193e <vfprintf+0xb8>
    1926:	80 33       	cpi	r24, 0x30	; 48
    1928:	69 f4       	brne	.+26     	; 0x1944 <vfprintf+0xbe>
    192a:	23 2d       	mov	r18, r3
    192c:	21 60       	ori	r18, 0x01	; 1
    192e:	16 c0       	rjmp	.+44     	; 0x195c <vfprintf+0xd6>
    1930:	83 2d       	mov	r24, r3
    1932:	82 60       	ori	r24, 0x02	; 2
    1934:	38 2e       	mov	r3, r24
    1936:	e3 2d       	mov	r30, r3
    1938:	e4 60       	ori	r30, 0x04	; 4
    193a:	3e 2e       	mov	r3, r30
    193c:	2a c0       	rjmp	.+84     	; 0x1992 <vfprintf+0x10c>
    193e:	f3 2d       	mov	r31, r3
    1940:	f8 60       	ori	r31, 0x08	; 8
    1942:	1d c0       	rjmp	.+58     	; 0x197e <vfprintf+0xf8>
    1944:	37 fc       	sbrc	r3, 7
    1946:	2d c0       	rjmp	.+90     	; 0x19a2 <vfprintf+0x11c>
    1948:	20 ed       	ldi	r18, 0xD0	; 208
    194a:	28 0f       	add	r18, r24
    194c:	2a 30       	cpi	r18, 0x0A	; 10
    194e:	40 f0       	brcs	.+16     	; 0x1960 <vfprintf+0xda>
    1950:	8e 32       	cpi	r24, 0x2E	; 46
    1952:	b9 f4       	brne	.+46     	; 0x1982 <vfprintf+0xfc>
    1954:	36 fc       	sbrc	r3, 6
    1956:	75 c1       	rjmp	.+746    	; 0x1c42 <vfprintf+0x3bc>
    1958:	23 2d       	mov	r18, r3
    195a:	20 64       	ori	r18, 0x40	; 64
    195c:	32 2e       	mov	r3, r18
    195e:	19 c0       	rjmp	.+50     	; 0x1992 <vfprintf+0x10c>
    1960:	36 fe       	sbrs	r3, 6
    1962:	06 c0       	rjmp	.+12     	; 0x1970 <vfprintf+0xea>
    1964:	8a e0       	ldi	r24, 0x0A	; 10
    1966:	98 9e       	mul	r9, r24
    1968:	20 0d       	add	r18, r0
    196a:	11 24       	eor	r1, r1
    196c:	92 2e       	mov	r9, r18
    196e:	11 c0       	rjmp	.+34     	; 0x1992 <vfprintf+0x10c>
    1970:	ea e0       	ldi	r30, 0x0A	; 10
    1972:	2e 9e       	mul	r2, r30
    1974:	20 0d       	add	r18, r0
    1976:	11 24       	eor	r1, r1
    1978:	22 2e       	mov	r2, r18
    197a:	f3 2d       	mov	r31, r3
    197c:	f0 62       	ori	r31, 0x20	; 32
    197e:	3f 2e       	mov	r3, r31
    1980:	08 c0       	rjmp	.+16     	; 0x1992 <vfprintf+0x10c>
    1982:	8c 36       	cpi	r24, 0x6C	; 108
    1984:	21 f4       	brne	.+8      	; 0x198e <vfprintf+0x108>
    1986:	83 2d       	mov	r24, r3
    1988:	80 68       	ori	r24, 0x80	; 128
    198a:	38 2e       	mov	r3, r24
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <vfprintf+0x10c>
    198e:	88 36       	cpi	r24, 0x68	; 104
    1990:	41 f4       	brne	.+16     	; 0x19a2 <vfprintf+0x11c>
    1992:	f7 01       	movw	r30, r14
    1994:	93 fd       	sbrc	r25, 3
    1996:	85 91       	lpm	r24, Z+
    1998:	93 ff       	sbrs	r25, 3
    199a:	81 91       	ld	r24, Z+
    199c:	7f 01       	movw	r14, r30
    199e:	81 11       	cpse	r24, r1
    19a0:	b3 cf       	rjmp	.-154    	; 0x1908 <vfprintf+0x82>
    19a2:	98 2f       	mov	r25, r24
    19a4:	9f 7d       	andi	r25, 0xDF	; 223
    19a6:	95 54       	subi	r25, 0x45	; 69
    19a8:	93 30       	cpi	r25, 0x03	; 3
    19aa:	28 f4       	brcc	.+10     	; 0x19b6 <vfprintf+0x130>
    19ac:	0c 5f       	subi	r16, 0xFC	; 252
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	9f e3       	ldi	r25, 0x3F	; 63
    19b2:	99 83       	std	Y+1, r25	; 0x01
    19b4:	0d c0       	rjmp	.+26     	; 0x19d0 <vfprintf+0x14a>
    19b6:	83 36       	cpi	r24, 0x63	; 99
    19b8:	31 f0       	breq	.+12     	; 0x19c6 <vfprintf+0x140>
    19ba:	83 37       	cpi	r24, 0x73	; 115
    19bc:	71 f0       	breq	.+28     	; 0x19da <vfprintf+0x154>
    19be:	83 35       	cpi	r24, 0x53	; 83
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <vfprintf+0x13e>
    19c2:	55 c0       	rjmp	.+170    	; 0x1a6e <vfprintf+0x1e8>
    19c4:	20 c0       	rjmp	.+64     	; 0x1a06 <vfprintf+0x180>
    19c6:	f8 01       	movw	r30, r16
    19c8:	80 81       	ld	r24, Z
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	0e 5f       	subi	r16, 0xFE	; 254
    19ce:	1f 4f       	sbci	r17, 0xFF	; 255
    19d0:	88 24       	eor	r8, r8
    19d2:	83 94       	inc	r8
    19d4:	91 2c       	mov	r9, r1
    19d6:	53 01       	movw	r10, r6
    19d8:	12 c0       	rjmp	.+36     	; 0x19fe <vfprintf+0x178>
    19da:	28 01       	movw	r4, r16
    19dc:	f2 e0       	ldi	r31, 0x02	; 2
    19de:	4f 0e       	add	r4, r31
    19e0:	51 1c       	adc	r5, r1
    19e2:	f8 01       	movw	r30, r16
    19e4:	a0 80       	ld	r10, Z
    19e6:	b1 80       	ldd	r11, Z+1	; 0x01
    19e8:	36 fe       	sbrs	r3, 6
    19ea:	03 c0       	rjmp	.+6      	; 0x19f2 <vfprintf+0x16c>
    19ec:	69 2d       	mov	r22, r9
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <vfprintf+0x170>
    19f2:	6f ef       	ldi	r22, 0xFF	; 255
    19f4:	7f ef       	ldi	r23, 0xFF	; 255
    19f6:	c5 01       	movw	r24, r10
    19f8:	4e d1       	rcall	.+668    	; 0x1c96 <strnlen>
    19fa:	4c 01       	movw	r8, r24
    19fc:	82 01       	movw	r16, r4
    19fe:	f3 2d       	mov	r31, r3
    1a00:	ff 77       	andi	r31, 0x7F	; 127
    1a02:	3f 2e       	mov	r3, r31
    1a04:	15 c0       	rjmp	.+42     	; 0x1a30 <vfprintf+0x1aa>
    1a06:	28 01       	movw	r4, r16
    1a08:	22 e0       	ldi	r18, 0x02	; 2
    1a0a:	42 0e       	add	r4, r18
    1a0c:	51 1c       	adc	r5, r1
    1a0e:	f8 01       	movw	r30, r16
    1a10:	a0 80       	ld	r10, Z
    1a12:	b1 80       	ldd	r11, Z+1	; 0x01
    1a14:	36 fe       	sbrs	r3, 6
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <vfprintf+0x198>
    1a18:	69 2d       	mov	r22, r9
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <vfprintf+0x19c>
    1a1e:	6f ef       	ldi	r22, 0xFF	; 255
    1a20:	7f ef       	ldi	r23, 0xFF	; 255
    1a22:	c5 01       	movw	r24, r10
    1a24:	2d d1       	rcall	.+602    	; 0x1c80 <strnlen_P>
    1a26:	4c 01       	movw	r8, r24
    1a28:	f3 2d       	mov	r31, r3
    1a2a:	f0 68       	ori	r31, 0x80	; 128
    1a2c:	3f 2e       	mov	r3, r31
    1a2e:	82 01       	movw	r16, r4
    1a30:	33 fc       	sbrc	r3, 3
    1a32:	19 c0       	rjmp	.+50     	; 0x1a66 <vfprintf+0x1e0>
    1a34:	82 2d       	mov	r24, r2
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	88 16       	cp	r8, r24
    1a3a:	99 06       	cpc	r9, r25
    1a3c:	a0 f4       	brcc	.+40     	; 0x1a66 <vfprintf+0x1e0>
    1a3e:	b6 01       	movw	r22, r12
    1a40:	80 e2       	ldi	r24, 0x20	; 32
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	33 d1       	rcall	.+614    	; 0x1cac <fputc>
    1a46:	2a 94       	dec	r2
    1a48:	f5 cf       	rjmp	.-22     	; 0x1a34 <vfprintf+0x1ae>
    1a4a:	f5 01       	movw	r30, r10
    1a4c:	37 fc       	sbrc	r3, 7
    1a4e:	85 91       	lpm	r24, Z+
    1a50:	37 fe       	sbrs	r3, 7
    1a52:	81 91       	ld	r24, Z+
    1a54:	5f 01       	movw	r10, r30
    1a56:	b6 01       	movw	r22, r12
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	28 d1       	rcall	.+592    	; 0x1cac <fputc>
    1a5c:	21 10       	cpse	r2, r1
    1a5e:	2a 94       	dec	r2
    1a60:	21 e0       	ldi	r18, 0x01	; 1
    1a62:	82 1a       	sub	r8, r18
    1a64:	91 08       	sbc	r9, r1
    1a66:	81 14       	cp	r8, r1
    1a68:	91 04       	cpc	r9, r1
    1a6a:	79 f7       	brne	.-34     	; 0x1a4a <vfprintf+0x1c4>
    1a6c:	e1 c0       	rjmp	.+450    	; 0x1c30 <vfprintf+0x3aa>
    1a6e:	84 36       	cpi	r24, 0x64	; 100
    1a70:	11 f0       	breq	.+4      	; 0x1a76 <vfprintf+0x1f0>
    1a72:	89 36       	cpi	r24, 0x69	; 105
    1a74:	39 f5       	brne	.+78     	; 0x1ac4 <vfprintf+0x23e>
    1a76:	f8 01       	movw	r30, r16
    1a78:	37 fe       	sbrs	r3, 7
    1a7a:	07 c0       	rjmp	.+14     	; 0x1a8a <vfprintf+0x204>
    1a7c:	60 81       	ld	r22, Z
    1a7e:	71 81       	ldd	r23, Z+1	; 0x01
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	0c 5f       	subi	r16, 0xFC	; 252
    1a86:	1f 4f       	sbci	r17, 0xFF	; 255
    1a88:	08 c0       	rjmp	.+16     	; 0x1a9a <vfprintf+0x214>
    1a8a:	60 81       	ld	r22, Z
    1a8c:	71 81       	ldd	r23, Z+1	; 0x01
    1a8e:	07 2e       	mov	r0, r23
    1a90:	00 0c       	add	r0, r0
    1a92:	88 0b       	sbc	r24, r24
    1a94:	99 0b       	sbc	r25, r25
    1a96:	0e 5f       	subi	r16, 0xFE	; 254
    1a98:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9a:	f3 2d       	mov	r31, r3
    1a9c:	ff 76       	andi	r31, 0x6F	; 111
    1a9e:	3f 2e       	mov	r3, r31
    1aa0:	97 ff       	sbrs	r25, 7
    1aa2:	09 c0       	rjmp	.+18     	; 0x1ab6 <vfprintf+0x230>
    1aa4:	90 95       	com	r25
    1aa6:	80 95       	com	r24
    1aa8:	70 95       	com	r23
    1aaa:	61 95       	neg	r22
    1aac:	7f 4f       	sbci	r23, 0xFF	; 255
    1aae:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	f0 68       	ori	r31, 0x80	; 128
    1ab4:	3f 2e       	mov	r3, r31
    1ab6:	2a e0       	ldi	r18, 0x0A	; 10
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	a3 01       	movw	r20, r6
    1abc:	33 d1       	rcall	.+614    	; 0x1d24 <__ultoa_invert>
    1abe:	88 2e       	mov	r8, r24
    1ac0:	86 18       	sub	r8, r6
    1ac2:	44 c0       	rjmp	.+136    	; 0x1b4c <vfprintf+0x2c6>
    1ac4:	85 37       	cpi	r24, 0x75	; 117
    1ac6:	31 f4       	brne	.+12     	; 0x1ad4 <vfprintf+0x24e>
    1ac8:	23 2d       	mov	r18, r3
    1aca:	2f 7e       	andi	r18, 0xEF	; 239
    1acc:	b2 2e       	mov	r11, r18
    1ace:	2a e0       	ldi	r18, 0x0A	; 10
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	25 c0       	rjmp	.+74     	; 0x1b1e <vfprintf+0x298>
    1ad4:	93 2d       	mov	r25, r3
    1ad6:	99 7f       	andi	r25, 0xF9	; 249
    1ad8:	b9 2e       	mov	r11, r25
    1ada:	8f 36       	cpi	r24, 0x6F	; 111
    1adc:	c1 f0       	breq	.+48     	; 0x1b0e <vfprintf+0x288>
    1ade:	18 f4       	brcc	.+6      	; 0x1ae6 <vfprintf+0x260>
    1ae0:	88 35       	cpi	r24, 0x58	; 88
    1ae2:	79 f0       	breq	.+30     	; 0x1b02 <vfprintf+0x27c>
    1ae4:	ae c0       	rjmp	.+348    	; 0x1c42 <vfprintf+0x3bc>
    1ae6:	80 37       	cpi	r24, 0x70	; 112
    1ae8:	19 f0       	breq	.+6      	; 0x1af0 <vfprintf+0x26a>
    1aea:	88 37       	cpi	r24, 0x78	; 120
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <vfprintf+0x270>
    1aee:	a9 c0       	rjmp	.+338    	; 0x1c42 <vfprintf+0x3bc>
    1af0:	e9 2f       	mov	r30, r25
    1af2:	e0 61       	ori	r30, 0x10	; 16
    1af4:	be 2e       	mov	r11, r30
    1af6:	b4 fe       	sbrs	r11, 4
    1af8:	0d c0       	rjmp	.+26     	; 0x1b14 <vfprintf+0x28e>
    1afa:	fb 2d       	mov	r31, r11
    1afc:	f4 60       	ori	r31, 0x04	; 4
    1afe:	bf 2e       	mov	r11, r31
    1b00:	09 c0       	rjmp	.+18     	; 0x1b14 <vfprintf+0x28e>
    1b02:	34 fe       	sbrs	r3, 4
    1b04:	0a c0       	rjmp	.+20     	; 0x1b1a <vfprintf+0x294>
    1b06:	29 2f       	mov	r18, r25
    1b08:	26 60       	ori	r18, 0x06	; 6
    1b0a:	b2 2e       	mov	r11, r18
    1b0c:	06 c0       	rjmp	.+12     	; 0x1b1a <vfprintf+0x294>
    1b0e:	28 e0       	ldi	r18, 0x08	; 8
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <vfprintf+0x298>
    1b14:	20 e1       	ldi	r18, 0x10	; 16
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <vfprintf+0x298>
    1b1a:	20 e1       	ldi	r18, 0x10	; 16
    1b1c:	32 e0       	ldi	r19, 0x02	; 2
    1b1e:	f8 01       	movw	r30, r16
    1b20:	b7 fe       	sbrs	r11, 7
    1b22:	07 c0       	rjmp	.+14     	; 0x1b32 <vfprintf+0x2ac>
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	0c 5f       	subi	r16, 0xFC	; 252
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b30:	06 c0       	rjmp	.+12     	; 0x1b3e <vfprintf+0x2b8>
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 5f       	subi	r16, 0xFE	; 254
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	a3 01       	movw	r20, r6
    1b40:	f1 d0       	rcall	.+482    	; 0x1d24 <__ultoa_invert>
    1b42:	88 2e       	mov	r8, r24
    1b44:	86 18       	sub	r8, r6
    1b46:	fb 2d       	mov	r31, r11
    1b48:	ff 77       	andi	r31, 0x7F	; 127
    1b4a:	3f 2e       	mov	r3, r31
    1b4c:	36 fe       	sbrs	r3, 6
    1b4e:	0d c0       	rjmp	.+26     	; 0x1b6a <vfprintf+0x2e4>
    1b50:	23 2d       	mov	r18, r3
    1b52:	2e 7f       	andi	r18, 0xFE	; 254
    1b54:	a2 2e       	mov	r10, r18
    1b56:	89 14       	cp	r8, r9
    1b58:	58 f4       	brcc	.+22     	; 0x1b70 <vfprintf+0x2ea>
    1b5a:	34 fe       	sbrs	r3, 4
    1b5c:	0b c0       	rjmp	.+22     	; 0x1b74 <vfprintf+0x2ee>
    1b5e:	32 fc       	sbrc	r3, 2
    1b60:	09 c0       	rjmp	.+18     	; 0x1b74 <vfprintf+0x2ee>
    1b62:	83 2d       	mov	r24, r3
    1b64:	8e 7e       	andi	r24, 0xEE	; 238
    1b66:	a8 2e       	mov	r10, r24
    1b68:	05 c0       	rjmp	.+10     	; 0x1b74 <vfprintf+0x2ee>
    1b6a:	b8 2c       	mov	r11, r8
    1b6c:	a3 2c       	mov	r10, r3
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <vfprintf+0x2f0>
    1b70:	b8 2c       	mov	r11, r8
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <vfprintf+0x2f0>
    1b74:	b9 2c       	mov	r11, r9
    1b76:	a4 fe       	sbrs	r10, 4
    1b78:	0f c0       	rjmp	.+30     	; 0x1b98 <vfprintf+0x312>
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	e8 0d       	add	r30, r8
    1b7e:	f1 1d       	adc	r31, r1
    1b80:	80 81       	ld	r24, Z
    1b82:	80 33       	cpi	r24, 0x30	; 48
    1b84:	21 f4       	brne	.+8      	; 0x1b8e <vfprintf+0x308>
    1b86:	9a 2d       	mov	r25, r10
    1b88:	99 7e       	andi	r25, 0xE9	; 233
    1b8a:	a9 2e       	mov	r10, r25
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <vfprintf+0x31a>
    1b8e:	a2 fe       	sbrs	r10, 2
    1b90:	06 c0       	rjmp	.+12     	; 0x1b9e <vfprintf+0x318>
    1b92:	b3 94       	inc	r11
    1b94:	b3 94       	inc	r11
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <vfprintf+0x31a>
    1b98:	8a 2d       	mov	r24, r10
    1b9a:	86 78       	andi	r24, 0x86	; 134
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <vfprintf+0x31a>
    1b9e:	b3 94       	inc	r11
    1ba0:	a3 fc       	sbrc	r10, 3
    1ba2:	10 c0       	rjmp	.+32     	; 0x1bc4 <vfprintf+0x33e>
    1ba4:	a0 fe       	sbrs	r10, 0
    1ba6:	06 c0       	rjmp	.+12     	; 0x1bb4 <vfprintf+0x32e>
    1ba8:	b2 14       	cp	r11, r2
    1baa:	80 f4       	brcc	.+32     	; 0x1bcc <vfprintf+0x346>
    1bac:	28 0c       	add	r2, r8
    1bae:	92 2c       	mov	r9, r2
    1bb0:	9b 18       	sub	r9, r11
    1bb2:	0d c0       	rjmp	.+26     	; 0x1bce <vfprintf+0x348>
    1bb4:	b2 14       	cp	r11, r2
    1bb6:	58 f4       	brcc	.+22     	; 0x1bce <vfprintf+0x348>
    1bb8:	b6 01       	movw	r22, r12
    1bba:	80 e2       	ldi	r24, 0x20	; 32
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	76 d0       	rcall	.+236    	; 0x1cac <fputc>
    1bc0:	b3 94       	inc	r11
    1bc2:	f8 cf       	rjmp	.-16     	; 0x1bb4 <vfprintf+0x32e>
    1bc4:	b2 14       	cp	r11, r2
    1bc6:	18 f4       	brcc	.+6      	; 0x1bce <vfprintf+0x348>
    1bc8:	2b 18       	sub	r2, r11
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <vfprintf+0x34a>
    1bcc:	98 2c       	mov	r9, r8
    1bce:	21 2c       	mov	r2, r1
    1bd0:	a4 fe       	sbrs	r10, 4
    1bd2:	0f c0       	rjmp	.+30     	; 0x1bf2 <vfprintf+0x36c>
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	80 e3       	ldi	r24, 0x30	; 48
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	68 d0       	rcall	.+208    	; 0x1cac <fputc>
    1bdc:	a2 fe       	sbrs	r10, 2
    1bde:	16 c0       	rjmp	.+44     	; 0x1c0c <vfprintf+0x386>
    1be0:	a1 fc       	sbrc	r10, 1
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <vfprintf+0x364>
    1be4:	88 e7       	ldi	r24, 0x78	; 120
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <vfprintf+0x368>
    1bea:	88 e5       	ldi	r24, 0x58	; 88
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	b6 01       	movw	r22, r12
    1bf0:	0c c0       	rjmp	.+24     	; 0x1c0a <vfprintf+0x384>
    1bf2:	8a 2d       	mov	r24, r10
    1bf4:	86 78       	andi	r24, 0x86	; 134
    1bf6:	51 f0       	breq	.+20     	; 0x1c0c <vfprintf+0x386>
    1bf8:	a1 fe       	sbrs	r10, 1
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <vfprintf+0x37a>
    1bfc:	8b e2       	ldi	r24, 0x2B	; 43
    1bfe:	01 c0       	rjmp	.+2      	; 0x1c02 <vfprintf+0x37c>
    1c00:	80 e2       	ldi	r24, 0x20	; 32
    1c02:	a7 fc       	sbrc	r10, 7
    1c04:	8d e2       	ldi	r24, 0x2D	; 45
    1c06:	b6 01       	movw	r22, r12
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	50 d0       	rcall	.+160    	; 0x1cac <fputc>
    1c0c:	89 14       	cp	r8, r9
    1c0e:	30 f4       	brcc	.+12     	; 0x1c1c <vfprintf+0x396>
    1c10:	b6 01       	movw	r22, r12
    1c12:	80 e3       	ldi	r24, 0x30	; 48
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	4a d0       	rcall	.+148    	; 0x1cac <fputc>
    1c18:	9a 94       	dec	r9
    1c1a:	f8 cf       	rjmp	.-16     	; 0x1c0c <vfprintf+0x386>
    1c1c:	8a 94       	dec	r8
    1c1e:	f3 01       	movw	r30, r6
    1c20:	e8 0d       	add	r30, r8
    1c22:	f1 1d       	adc	r31, r1
    1c24:	80 81       	ld	r24, Z
    1c26:	b6 01       	movw	r22, r12
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	40 d0       	rcall	.+128    	; 0x1cac <fputc>
    1c2c:	81 10       	cpse	r8, r1
    1c2e:	f6 cf       	rjmp	.-20     	; 0x1c1c <vfprintf+0x396>
    1c30:	22 20       	and	r2, r2
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <vfprintf+0x3b0>
    1c34:	4e ce       	rjmp	.-868    	; 0x18d2 <vfprintf+0x4c>
    1c36:	b6 01       	movw	r22, r12
    1c38:	80 e2       	ldi	r24, 0x20	; 32
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	37 d0       	rcall	.+110    	; 0x1cac <fputc>
    1c3e:	2a 94       	dec	r2
    1c40:	f7 cf       	rjmp	.-18     	; 0x1c30 <vfprintf+0x3aa>
    1c42:	f6 01       	movw	r30, r12
    1c44:	86 81       	ldd	r24, Z+6	; 0x06
    1c46:	97 81       	ldd	r25, Z+7	; 0x07
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <vfprintf+0x3c8>
    1c4a:	8f ef       	ldi	r24, 0xFF	; 255
    1c4c:	9f ef       	ldi	r25, 0xFF	; 255
    1c4e:	2b 96       	adiw	r28, 0x0b	; 11
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	bf 90       	pop	r11
    1c6c:	af 90       	pop	r10
    1c6e:	9f 90       	pop	r9
    1c70:	8f 90       	pop	r8
    1c72:	7f 90       	pop	r7
    1c74:	6f 90       	pop	r6
    1c76:	5f 90       	pop	r5
    1c78:	4f 90       	pop	r4
    1c7a:	3f 90       	pop	r3
    1c7c:	2f 90       	pop	r2
    1c7e:	08 95       	ret

00001c80 <strnlen_P>:
    1c80:	fc 01       	movw	r30, r24
    1c82:	05 90       	lpm	r0, Z+
    1c84:	61 50       	subi	r22, 0x01	; 1
    1c86:	70 40       	sbci	r23, 0x00	; 0
    1c88:	01 10       	cpse	r0, r1
    1c8a:	d8 f7       	brcc	.-10     	; 0x1c82 <strnlen_P+0x2>
    1c8c:	80 95       	com	r24
    1c8e:	90 95       	com	r25
    1c90:	8e 0f       	add	r24, r30
    1c92:	9f 1f       	adc	r25, r31
    1c94:	08 95       	ret

00001c96 <strnlen>:
    1c96:	fc 01       	movw	r30, r24
    1c98:	61 50       	subi	r22, 0x01	; 1
    1c9a:	70 40       	sbci	r23, 0x00	; 0
    1c9c:	01 90       	ld	r0, Z+
    1c9e:	01 10       	cpse	r0, r1
    1ca0:	d8 f7       	brcc	.-10     	; 0x1c98 <strnlen+0x2>
    1ca2:	80 95       	com	r24
    1ca4:	90 95       	com	r25
    1ca6:	8e 0f       	add	r24, r30
    1ca8:	9f 1f       	adc	r25, r31
    1caa:	08 95       	ret

00001cac <fputc>:
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	fb 01       	movw	r30, r22
    1cb6:	23 81       	ldd	r18, Z+3	; 0x03
    1cb8:	21 fd       	sbrc	r18, 1
    1cba:	03 c0       	rjmp	.+6      	; 0x1cc2 <fputc+0x16>
    1cbc:	8f ef       	ldi	r24, 0xFF	; 255
    1cbe:	9f ef       	ldi	r25, 0xFF	; 255
    1cc0:	2c c0       	rjmp	.+88     	; 0x1d1a <fputc+0x6e>
    1cc2:	22 ff       	sbrs	r18, 2
    1cc4:	16 c0       	rjmp	.+44     	; 0x1cf2 <fputc+0x46>
    1cc6:	46 81       	ldd	r20, Z+6	; 0x06
    1cc8:	57 81       	ldd	r21, Z+7	; 0x07
    1cca:	24 81       	ldd	r18, Z+4	; 0x04
    1ccc:	35 81       	ldd	r19, Z+5	; 0x05
    1cce:	42 17       	cp	r20, r18
    1cd0:	53 07       	cpc	r21, r19
    1cd2:	44 f4       	brge	.+16     	; 0x1ce4 <fputc+0x38>
    1cd4:	a0 81       	ld	r26, Z
    1cd6:	b1 81       	ldd	r27, Z+1	; 0x01
    1cd8:	9d 01       	movw	r18, r26
    1cda:	2f 5f       	subi	r18, 0xFF	; 255
    1cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cde:	31 83       	std	Z+1, r19	; 0x01
    1ce0:	20 83       	st	Z, r18
    1ce2:	8c 93       	st	X, r24
    1ce4:	26 81       	ldd	r18, Z+6	; 0x06
    1ce6:	37 81       	ldd	r19, Z+7	; 0x07
    1ce8:	2f 5f       	subi	r18, 0xFF	; 255
    1cea:	3f 4f       	sbci	r19, 0xFF	; 255
    1cec:	37 83       	std	Z+7, r19	; 0x07
    1cee:	26 83       	std	Z+6, r18	; 0x06
    1cf0:	14 c0       	rjmp	.+40     	; 0x1d1a <fputc+0x6e>
    1cf2:	8b 01       	movw	r16, r22
    1cf4:	ec 01       	movw	r28, r24
    1cf6:	fb 01       	movw	r30, r22
    1cf8:	00 84       	ldd	r0, Z+8	; 0x08
    1cfa:	f1 85       	ldd	r31, Z+9	; 0x09
    1cfc:	e0 2d       	mov	r30, r0
    1cfe:	19 95       	eicall
    1d00:	89 2b       	or	r24, r25
    1d02:	e1 f6       	brne	.-72     	; 0x1cbc <fputc+0x10>
    1d04:	d8 01       	movw	r26, r16
    1d06:	16 96       	adiw	r26, 0x06	; 6
    1d08:	8d 91       	ld	r24, X+
    1d0a:	9c 91       	ld	r25, X
    1d0c:	17 97       	sbiw	r26, 0x07	; 7
    1d0e:	01 96       	adiw	r24, 0x01	; 1
    1d10:	17 96       	adiw	r26, 0x07	; 7
    1d12:	9c 93       	st	X, r25
    1d14:	8e 93       	st	-X, r24
    1d16:	16 97       	sbiw	r26, 0x06	; 6
    1d18:	ce 01       	movw	r24, r28
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

00001d24 <__ultoa_invert>:
    1d24:	fa 01       	movw	r30, r20
    1d26:	aa 27       	eor	r26, r26
    1d28:	28 30       	cpi	r18, 0x08	; 8
    1d2a:	51 f1       	breq	.+84     	; 0x1d80 <__ultoa_invert+0x5c>
    1d2c:	20 31       	cpi	r18, 0x10	; 16
    1d2e:	81 f1       	breq	.+96     	; 0x1d90 <__ultoa_invert+0x6c>
    1d30:	e8 94       	clt
    1d32:	6f 93       	push	r22
    1d34:	6e 7f       	andi	r22, 0xFE	; 254
    1d36:	6e 5f       	subi	r22, 0xFE	; 254
    1d38:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3e:	af 4f       	sbci	r26, 0xFF	; 255
    1d40:	b1 e0       	ldi	r27, 0x01	; 1
    1d42:	3e d0       	rcall	.+124    	; 0x1dc0 <__ultoa_invert+0x9c>
    1d44:	b4 e0       	ldi	r27, 0x04	; 4
    1d46:	3c d0       	rcall	.+120    	; 0x1dc0 <__ultoa_invert+0x9c>
    1d48:	67 0f       	add	r22, r23
    1d4a:	78 1f       	adc	r23, r24
    1d4c:	89 1f       	adc	r24, r25
    1d4e:	9a 1f       	adc	r25, r26
    1d50:	a1 1d       	adc	r26, r1
    1d52:	68 0f       	add	r22, r24
    1d54:	79 1f       	adc	r23, r25
    1d56:	8a 1f       	adc	r24, r26
    1d58:	91 1d       	adc	r25, r1
    1d5a:	a1 1d       	adc	r26, r1
    1d5c:	6a 0f       	add	r22, r26
    1d5e:	71 1d       	adc	r23, r1
    1d60:	81 1d       	adc	r24, r1
    1d62:	91 1d       	adc	r25, r1
    1d64:	a1 1d       	adc	r26, r1
    1d66:	20 d0       	rcall	.+64     	; 0x1da8 <__ultoa_invert+0x84>
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <__ultoa_invert+0x48>
    1d6a:	68 94       	set
    1d6c:	3f 91       	pop	r19
    1d6e:	2a e0       	ldi	r18, 0x0A	; 10
    1d70:	26 9f       	mul	r18, r22
    1d72:	11 24       	eor	r1, r1
    1d74:	30 19       	sub	r19, r0
    1d76:	30 5d       	subi	r19, 0xD0	; 208
    1d78:	31 93       	st	Z+, r19
    1d7a:	de f6       	brtc	.-74     	; 0x1d32 <__ultoa_invert+0xe>
    1d7c:	cf 01       	movw	r24, r30
    1d7e:	08 95       	ret
    1d80:	46 2f       	mov	r20, r22
    1d82:	47 70       	andi	r20, 0x07	; 7
    1d84:	40 5d       	subi	r20, 0xD0	; 208
    1d86:	41 93       	st	Z+, r20
    1d88:	b3 e0       	ldi	r27, 0x03	; 3
    1d8a:	0f d0       	rcall	.+30     	; 0x1daa <__ultoa_invert+0x86>
    1d8c:	c9 f7       	brne	.-14     	; 0x1d80 <__ultoa_invert+0x5c>
    1d8e:	f6 cf       	rjmp	.-20     	; 0x1d7c <__ultoa_invert+0x58>
    1d90:	46 2f       	mov	r20, r22
    1d92:	4f 70       	andi	r20, 0x0F	; 15
    1d94:	40 5d       	subi	r20, 0xD0	; 208
    1d96:	4a 33       	cpi	r20, 0x3A	; 58
    1d98:	18 f0       	brcs	.+6      	; 0x1da0 <__ultoa_invert+0x7c>
    1d9a:	49 5d       	subi	r20, 0xD9	; 217
    1d9c:	31 fd       	sbrc	r19, 1
    1d9e:	40 52       	subi	r20, 0x20	; 32
    1da0:	41 93       	st	Z+, r20
    1da2:	02 d0       	rcall	.+4      	; 0x1da8 <__ultoa_invert+0x84>
    1da4:	a9 f7       	brne	.-22     	; 0x1d90 <__ultoa_invert+0x6c>
    1da6:	ea cf       	rjmp	.-44     	; 0x1d7c <__ultoa_invert+0x58>
    1da8:	b4 e0       	ldi	r27, 0x04	; 4
    1daa:	a6 95       	lsr	r26
    1dac:	97 95       	ror	r25
    1dae:	87 95       	ror	r24
    1db0:	77 95       	ror	r23
    1db2:	67 95       	ror	r22
    1db4:	ba 95       	dec	r27
    1db6:	c9 f7       	brne	.-14     	; 0x1daa <__ultoa_invert+0x86>
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	61 05       	cpc	r22, r1
    1dbc:	71 05       	cpc	r23, r1
    1dbe:	08 95       	ret
    1dc0:	9b 01       	movw	r18, r22
    1dc2:	ac 01       	movw	r20, r24
    1dc4:	0a 2e       	mov	r0, r26
    1dc6:	06 94       	lsr	r0
    1dc8:	57 95       	ror	r21
    1dca:	47 95       	ror	r20
    1dcc:	37 95       	ror	r19
    1dce:	27 95       	ror	r18
    1dd0:	ba 95       	dec	r27
    1dd2:	c9 f7       	brne	.-14     	; 0x1dc6 <__ultoa_invert+0xa2>
    1dd4:	62 0f       	add	r22, r18
    1dd6:	73 1f       	adc	r23, r19
    1dd8:	84 1f       	adc	r24, r20
    1dda:	95 1f       	adc	r25, r21
    1ddc:	a0 1d       	adc	r26, r0
    1dde:	08 95       	ret

00001de0 <_exit>:
    1de0:	f8 94       	cli

00001de2 <__stop_program>:
    1de2:	ff cf       	rjmp	.-2      	; 0x1de2 <__stop_program>


TEST_ATMEL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00001da6  00001e3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001da6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e4  0080020e  0080020e  00001e48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cce  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010b3  00000000  00000000  00003cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b00  00000000  00000000  00004d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  00005888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b3  00000000  00000000  00005c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b48  00000000  00000000  00006513  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000705b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c0       	rjmp	.+238    	; 0xf0 <__ctors_end>
       2:	00 00       	nop
       4:	28 c1       	rjmp	.+592    	; 0x256 <__vector_1>
       6:	00 00       	nop
       8:	61 c1       	rjmp	.+706    	; 0x2cc <__vector_2>
       a:	00 00       	nop
       c:	9a c1       	rjmp	.+820    	; 0x342 <__vector_3>
       e:	00 00       	nop
      10:	d3 c1       	rjmp	.+934    	; 0x3b8 <__vector_4>
      12:	00 00       	nop
      14:	0c c2       	rjmp	.+1048   	; 0x42e <__vector_5>
      16:	00 00       	nop
      18:	1f c2       	rjmp	.+1086   	; 0x458 <__vector_6>
      1a:	00 00       	nop
      1c:	32 c2       	rjmp	.+1124   	; 0x482 <__vector_7>
      1e:	00 00       	nop
      20:	45 c2       	rjmp	.+1162   	; 0x4ac <__vector_8>
      22:	00 00       	nop
      24:	85 c0       	rjmp	.+266    	; 0x130 <__bad_interrupt>
      26:	00 00       	nop
      28:	83 c0       	rjmp	.+262    	; 0x130 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	81 c0       	rjmp	.+258    	; 0x130 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7f c0       	rjmp	.+254    	; 0x130 <__bad_interrupt>
      32:	00 00       	nop
      34:	7d c0       	rjmp	.+250    	; 0x130 <__bad_interrupt>
      36:	00 00       	nop
      38:	7b c0       	rjmp	.+246    	; 0x130 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	79 c0       	rjmp	.+242    	; 0x130 <__bad_interrupt>
      3e:	00 00       	nop
      40:	77 c0       	rjmp	.+238    	; 0x130 <__bad_interrupt>
      42:	00 00       	nop
      44:	75 c0       	rjmp	.+234    	; 0x130 <__bad_interrupt>
      46:	00 00       	nop
      48:	73 c0       	rjmp	.+230    	; 0x130 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	71 c0       	rjmp	.+226    	; 0x130 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6f c0       	rjmp	.+222    	; 0x130 <__bad_interrupt>
      52:	00 00       	nop
      54:	6d c0       	rjmp	.+218    	; 0x130 <__bad_interrupt>
      56:	00 00       	nop
      58:	6b c0       	rjmp	.+214    	; 0x130 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	69 c0       	rjmp	.+210    	; 0x130 <__bad_interrupt>
      5e:	00 00       	nop
      60:	67 c0       	rjmp	.+206    	; 0x130 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c2       	rjmp	.+1136   	; 0x4d6 <__vector_25>
      66:	00 00       	nop
      68:	63 c0       	rjmp	.+198    	; 0x130 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	61 c0       	rjmp	.+194    	; 0x130 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5f c0       	rjmp	.+190    	; 0x130 <__bad_interrupt>
      72:	00 00       	nop
      74:	5d c0       	rjmp	.+186    	; 0x130 <__bad_interrupt>
      76:	00 00       	nop
      78:	5b c0       	rjmp	.+182    	; 0x130 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	59 c0       	rjmp	.+178    	; 0x130 <__bad_interrupt>
      7e:	00 00       	nop
      80:	57 c0       	rjmp	.+174    	; 0x130 <__bad_interrupt>
      82:	00 00       	nop
      84:	55 c0       	rjmp	.+170    	; 0x130 <__bad_interrupt>
      86:	00 00       	nop
      88:	53 c0       	rjmp	.+166    	; 0x130 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	52 c0       	rjmp	.+164    	; 0x132 <__vector_35>
      8e:	00 00       	nop
      90:	4f c0       	rjmp	.+158    	; 0x130 <__bad_interrupt>
      92:	00 00       	nop
      94:	4d c0       	rjmp	.+154    	; 0x130 <__bad_interrupt>
      96:	00 00       	nop
      98:	4b c0       	rjmp	.+150    	; 0x130 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	49 c0       	rjmp	.+146    	; 0x130 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	47 c0       	rjmp	.+142    	; 0x130 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	45 c0       	rjmp	.+138    	; 0x130 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	43 c0       	rjmp	.+134    	; 0x130 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	41 c0       	rjmp	.+130    	; 0x130 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3f c0       	rjmp	.+126    	; 0x130 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3d c0       	rjmp	.+122    	; 0x130 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3b c0       	rjmp	.+118    	; 0x130 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	39 c0       	rjmp	.+114    	; 0x130 <__bad_interrupt>
      be:	00 00       	nop
      c0:	37 c0       	rjmp	.+110    	; 0x130 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	35 c0       	rjmp	.+106    	; 0x130 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	33 c0       	rjmp	.+102    	; 0x130 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	31 c0       	rjmp	.+98     	; 0x130 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2f c0       	rjmp	.+94     	; 0x130 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	2d c0       	rjmp	.+90     	; 0x130 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	2b c0       	rjmp	.+86     	; 0x130 <__bad_interrupt>
      da:	00 00       	nop
      dc:	29 c0       	rjmp	.+82     	; 0x130 <__bad_interrupt>
      de:	00 00       	nop
      e0:	27 c0       	rjmp	.+78     	; 0x130 <__bad_interrupt>
	...

000000e4 <__trampolines_end>:
      e4:	63 64       	ori	r22, 0x43	; 67
      e6:	69 6e       	ori	r22, 0xE9	; 233
      e8:	6f 70       	andi	r22, 0x0F	; 15
      ea:	73 75       	andi	r23, 0x53	; 83
      ec:	78 58       	subi	r23, 0x88	; 136
      ee:	5b 00       	.word	0x005b	; ????

000000f0 <__ctors_end>:
      f0:	11 24       	eor	r1, r1
      f2:	1f be       	out	0x3f, r1	; 63
      f4:	cf ef       	ldi	r28, 0xFF	; 255
      f6:	d1 e2       	ldi	r29, 0x21	; 33
      f8:	de bf       	out	0x3e, r29	; 62
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0c bf       	out	0x3c, r16	; 60

00000100 <__do_copy_data>:
     100:	12 e0       	ldi	r17, 0x02	; 2
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b2 e0       	ldi	r27, 0x02	; 2
     106:	e6 ea       	ldi	r30, 0xA6	; 166
     108:	fd e1       	ldi	r31, 0x1D	; 29
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	ae 30       	cpi	r26, 0x0E	; 14
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	22 e0       	ldi	r18, 0x02	; 2
     11c:	ae e0       	ldi	r26, 0x0E	; 14
     11e:	b2 e0       	ldi	r27, 0x02	; 2
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a2 3f       	cpi	r26, 0xF2	; 242
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0b d2       	rcall	.+1046   	; 0x542 <main>
     12c:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <_exit>

00000130 <__bad_interrupt>:
     130:	67 cf       	rjmp	.-306    	; 0x0 <__vectors>

00000132 <__vector_35>:
void set_output(volatile uint8_t *ddr, uint8_t pin) {
	*ddr |= (1 << pin);
}

void set_input(volatile uint8_t *ddr, uint8_t pin) {
	*ddr &= ~(1 << pin);
     132:	1f 92       	push	r1
     134:	0f 92       	push	r0
     136:	0f b6       	in	r0, 0x3f	; 63
     138:	0f 92       	push	r0
     13a:	11 24       	eor	r1, r1
     13c:	2f 93       	push	r18
     13e:	3f 93       	push	r19
     140:	4f 93       	push	r20
     142:	5f 93       	push	r21
     144:	6f 93       	push	r22
     146:	7f 93       	push	r23
     148:	8f 93       	push	r24
     14a:	9f 93       	push	r25
     14c:	af 93       	push	r26
     14e:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <__data_end>
     152:	30 91 0f 02 	lds	r19, 0x020F	; 0x80020f <__data_end+0x1>
     156:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <__data_end+0x2>
     15a:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <__data_end+0x3>
     15e:	60 91 12 02 	lds	r22, 0x0212	; 0x800212 <__data_end+0x4>
     162:	70 91 13 02 	lds	r23, 0x0213	; 0x800213 <__data_end+0x5>
     166:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end+0x6>
     16a:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <__data_end+0x7>
     16e:	a1 e0       	ldi	r26, 0x01	; 1
     170:	c2 d7       	rcall	.+3972   	; 0x10f6 <__adddi3_s8>
     172:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <__data_end>
     176:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <__data_end+0x1>
     17a:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <__data_end+0x2>
     17e:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <__data_end+0x3>
     182:	60 93 12 02 	sts	0x0212, r22	; 0x800212 <__data_end+0x4>
     186:	70 93 13 02 	sts	0x0213, r23	; 0x800213 <__data_end+0x5>
     18a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end+0x6>
     18e:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <__data_end+0x7>
     192:	af 91       	pop	r26
     194:	9f 91       	pop	r25
     196:	8f 91       	pop	r24
     198:	7f 91       	pop	r23
     19a:	6f 91       	pop	r22
     19c:	5f 91       	pop	r21
     19e:	4f 91       	pop	r20
     1a0:	3f 91       	pop	r19
     1a2:	2f 91       	pop	r18
     1a4:	0f 90       	pop	r0
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	0f 90       	pop	r0
     1aa:	1f 90       	pop	r1
     1ac:	18 95       	reti

000001ae <set_output>:
     1ae:	fc 01       	movw	r30, r24
     1b0:	40 81       	ld	r20, Z
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <set_output+0xe>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	6a 95       	dec	r22
     1be:	e2 f7       	brpl	.-8      	; 0x1b8 <set_output+0xa>
     1c0:	24 2b       	or	r18, r20
     1c2:	20 83       	st	Z, r18
     1c4:	08 95       	ret

000001c6 <pin_high>:
}

void pin_high(volatile uint8_t *port, uint8_t pin) {
	*port |= (1 << pin);
     1c6:	fc 01       	movw	r30, r24
     1c8:	40 81       	ld	r20, Z
     1ca:	21 e0       	ldi	r18, 0x01	; 1
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <pin_high+0xe>
     1d0:	22 0f       	add	r18, r18
     1d2:	33 1f       	adc	r19, r19
     1d4:	6a 95       	dec	r22
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <pin_high+0xa>
     1d8:	24 2b       	or	r18, r20
     1da:	20 83       	st	Z, r18
     1dc:	08 95       	ret

000001de <pin_low>:
}

void pin_low(volatile uint8_t *port, uint8_t pin) {
     1de:	fc 01       	movw	r30, r24
	*port &= ~(1 << pin);
     1e0:	90 81       	ld	r25, Z
     1e2:	21 e0       	ldi	r18, 0x01	; 1
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	02 c0       	rjmp	.+4      	; 0x1ec <pin_low+0xe>
     1e8:	22 0f       	add	r18, r18
     1ea:	33 1f       	adc	r19, r19
     1ec:	6a 95       	dec	r22
     1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <pin_low+0xa>
     1f0:	20 95       	com	r18
     1f2:	29 23       	and	r18, r25
     1f4:	20 83       	st	Z, r18
     1f6:	08 95       	ret

000001f8 <micros>:
}

uint32_t micros() {
	uint32_t overflows, timer_value;

	cli(); // Disable interrupts to read consistent values
     1f8:	f8 94       	cli
	overflows = timer3_overflow_count;
     1fa:	50 91 0e 02 	lds	r21, 0x020E	; 0x80020e <__data_end>
     1fe:	40 91 0f 02 	lds	r20, 0x020F	; 0x80020f <__data_end+0x1>
     202:	30 91 10 02 	lds	r19, 0x0210	; 0x800210 <__data_end+0x2>
     206:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <__data_end+0x3>
     20a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end+0x4>
     20e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <__data_end+0x5>
     212:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end+0x6>
     216:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <__data_end+0x7>
     21a:	85 2f       	mov	r24, r21
     21c:	94 2f       	mov	r25, r20
     21e:	a3 2f       	mov	r26, r19
     220:	b2 2f       	mov	r27, r18
	timer_value = TCNT3;
     222:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
     226:	70 91 95 00 	lds	r23, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
     22a:	ab 01       	movw	r20, r22
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
	sei(); // Enable interrupts
     230:	78 94       	sei

	// Calculate total microseconds
	return ((overflows * 65536UL) + timer_value) / (F_CPU / 1000000UL);
     232:	dc 01       	movw	r26, r24
     234:	99 27       	eor	r25, r25
     236:	88 27       	eor	r24, r24
     238:	84 0f       	add	r24, r20
     23a:	95 1f       	adc	r25, r21
     23c:	a6 1f       	adc	r26, r22
     23e:	b7 1f       	adc	r27, r23
     240:	bc 01       	movw	r22, r24
     242:	cd 01       	movw	r24, r26
     244:	68 94       	set
     246:	13 f8       	bld	r1, 3
     248:	96 95       	lsr	r25
     24a:	87 95       	ror	r24
     24c:	77 95       	ror	r23
     24e:	67 95       	ror	r22
     250:	16 94       	lsr	r1
     252:	d1 f7       	brne	.-12     	; 0x248 <micros+0x50>
     254:	08 95       	ret

00000256 <__vector_1>:
char tobesent[100];
int32_t setpoint = 3500;
uint8_t connected = 0;

//-------- ENCODERS ---------
ISR(INT0_vect){ // A2 MOTOR 2 (PH3 PH4) - DIRECTION & PWM PINS
     256:	1f 92       	push	r1
     258:	0f 92       	push	r0
     25a:	0f b6       	in	r0, 0x3f	; 63
     25c:	0f 92       	push	r0
     25e:	11 24       	eor	r1, r1
     260:	8f 93       	push	r24
     262:	9f 93       	push	r25
     264:	af 93       	push	r26
     266:	bf 93       	push	r27
	if (PINB & (1 << PB4)) {
     268:	1c 9b       	sbis	0x03, 4	; 3
     26a:	14 c0       	rjmp	.+40     	; 0x294 <__vector_1+0x3e>
		motor2_currentPos++;  // If B is high while A changes, increment ticks
     26c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <motor2_currentPos>
     270:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <motor2_currentPos+0x1>
     274:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <motor2_currentPos+0x2>
     278:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <motor2_currentPos+0x3>
     27c:	01 96       	adiw	r24, 0x01	; 1
     27e:	a1 1d       	adc	r26, r1
     280:	b1 1d       	adc	r27, r1
     282:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <motor2_currentPos>
     286:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <motor2_currentPos+0x1>
     28a:	a0 93 23 02 	sts	0x0223, r26	; 0x800223 <motor2_currentPos+0x2>
     28e:	b0 93 24 02 	sts	0x0224, r27	; 0x800224 <motor2_currentPos+0x3>
     292:	13 c0       	rjmp	.+38     	; 0x2ba <__vector_1+0x64>
	} else {
		motor2_currentPos--;  // If B is low while A changes, decrement ticks
     294:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <motor2_currentPos>
     298:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <motor2_currentPos+0x1>
     29c:	a0 91 23 02 	lds	r26, 0x0223	; 0x800223 <motor2_currentPos+0x2>
     2a0:	b0 91 24 02 	lds	r27, 0x0224	; 0x800224 <motor2_currentPos+0x3>
     2a4:	01 97       	sbiw	r24, 0x01	; 1
     2a6:	a1 09       	sbc	r26, r1
     2a8:	b1 09       	sbc	r27, r1
     2aa:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <motor2_currentPos>
     2ae:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <motor2_currentPos+0x1>
     2b2:	a0 93 23 02 	sts	0x0223, r26	; 0x800223 <motor2_currentPos+0x2>
     2b6:	b0 93 24 02 	sts	0x0224, r27	; 0x800224 <motor2_currentPos+0x3>
	}
}
     2ba:	bf 91       	pop	r27
     2bc:	af 91       	pop	r26
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	0f 90       	pop	r0
     2c4:	0f be       	out	0x3f, r0	; 63
     2c6:	0f 90       	pop	r0
     2c8:	1f 90       	pop	r1
     2ca:	18 95       	reti

000002cc <__vector_2>:

ISR(INT1_vect){ // A1 MOTOR 1 (PH5 PH6) - DIRECTION & PWM PINS
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	8f 93       	push	r24
     2d8:	9f 93       	push	r25
     2da:	af 93       	push	r26
     2dc:	bf 93       	push	r27
	if (PINB & (1 << PB5)) {
     2de:	1d 9b       	sbis	0x03, 5	; 3
     2e0:	14 c0       	rjmp	.+40     	; 0x30a <__vector_2+0x3e>
		motor1_currentPos++;  // If B is high while A changes, increment ticks
     2e2:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <motor1_currentPos>
     2e6:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <motor1_currentPos+0x1>
     2ea:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <motor1_currentPos+0x2>
     2ee:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <motor1_currentPos+0x3>
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	a1 1d       	adc	r26, r1
     2f6:	b1 1d       	adc	r27, r1
     2f8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <motor1_currentPos>
     2fc:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <motor1_currentPos+0x1>
     300:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <motor1_currentPos+0x2>
     304:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <motor1_currentPos+0x3>
     308:	13 c0       	rjmp	.+38     	; 0x330 <__vector_2+0x64>
	} else {
		motor1_currentPos--;  // If B is low while A changes, decrement ticks
     30a:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <motor1_currentPos>
     30e:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <motor1_currentPos+0x1>
     312:	a0 91 27 02 	lds	r26, 0x0227	; 0x800227 <motor1_currentPos+0x2>
     316:	b0 91 28 02 	lds	r27, 0x0228	; 0x800228 <motor1_currentPos+0x3>
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	a1 09       	sbc	r26, r1
     31e:	b1 09       	sbc	r27, r1
     320:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <motor1_currentPos>
     324:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <motor1_currentPos+0x1>
     328:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <motor1_currentPos+0x2>
     32c:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <motor1_currentPos+0x3>
	}
}
     330:	bf 91       	pop	r27
     332:	af 91       	pop	r26
     334:	9f 91       	pop	r25
     336:	8f 91       	pop	r24
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <__vector_3>:

ISR(INT2_vect){ // A4 MOTOR 4 (PL0 PL1) - DIRECTION & PB6 - PWM
     342:	1f 92       	push	r1
     344:	0f 92       	push	r0
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	0f 92       	push	r0
     34a:	11 24       	eor	r1, r1
     34c:	8f 93       	push	r24
     34e:	9f 93       	push	r25
     350:	af 93       	push	r26
     352:	bf 93       	push	r27
	if (PIND & (1 << PD6)) {
     354:	4e 9b       	sbis	0x09, 6	; 9
     356:	14 c0       	rjmp	.+40     	; 0x380 <__vector_3+0x3e>
		motor4_currentPos--;  // If B is high while A changes, increment ticks
     358:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <motor4_currentPos>
     35c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <motor4_currentPos+0x1>
     360:	a0 91 1b 02 	lds	r26, 0x021B	; 0x80021b <motor4_currentPos+0x2>
     364:	b0 91 1c 02 	lds	r27, 0x021C	; 0x80021c <motor4_currentPos+0x3>
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	a1 09       	sbc	r26, r1
     36c:	b1 09       	sbc	r27, r1
     36e:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <motor4_currentPos>
     372:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <motor4_currentPos+0x1>
     376:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <motor4_currentPos+0x2>
     37a:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <motor4_currentPos+0x3>
     37e:	13 c0       	rjmp	.+38     	; 0x3a6 <__vector_3+0x64>
	} else {
		motor4_currentPos++;  // If B is low while A changes, decrement ticks
     380:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <motor4_currentPos>
     384:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <motor4_currentPos+0x1>
     388:	a0 91 1b 02 	lds	r26, 0x021B	; 0x80021b <motor4_currentPos+0x2>
     38c:	b0 91 1c 02 	lds	r27, 0x021C	; 0x80021c <motor4_currentPos+0x3>
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	a1 1d       	adc	r26, r1
     394:	b1 1d       	adc	r27, r1
     396:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <motor4_currentPos>
     39a:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <motor4_currentPos+0x1>
     39e:	a0 93 1b 02 	sts	0x021B, r26	; 0x80021b <motor4_currentPos+0x2>
     3a2:	b0 93 1c 02 	sts	0x021C, r27	; 0x80021c <motor4_currentPos+0x3>
	}
}
     3a6:	bf 91       	pop	r27
     3a8:	af 91       	pop	r26
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	0f 90       	pop	r0
     3b0:	0f be       	out	0x3f, r0	; 63
     3b2:	0f 90       	pop	r0
     3b4:	1f 90       	pop	r1
     3b6:	18 95       	reti

000003b8 <__vector_4>:

ISR(INT3_vect){ // A3 MOTOR 3 (PL2 PL3) - DIRECTION & PB7 - PWM
     3b8:	1f 92       	push	r1
     3ba:	0f 92       	push	r0
     3bc:	0f b6       	in	r0, 0x3f	; 63
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	8f 93       	push	r24
     3c4:	9f 93       	push	r25
     3c6:	af 93       	push	r26
     3c8:	bf 93       	push	r27
	if (PIND & (1 << PD7)) {
     3ca:	4f 9b       	sbis	0x09, 7	; 9
     3cc:	14 c0       	rjmp	.+40     	; 0x3f6 <__vector_4+0x3e>
		motor3_currentPos++;  // If B is high while A changes, increment ticks
     3ce:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <motor3_currentPos>
     3d2:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <motor3_currentPos+0x1>
     3d6:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <motor3_currentPos+0x2>
     3da:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <motor3_currentPos+0x3>
     3de:	01 96       	adiw	r24, 0x01	; 1
     3e0:	a1 1d       	adc	r26, r1
     3e2:	b1 1d       	adc	r27, r1
     3e4:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <motor3_currentPos>
     3e8:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <motor3_currentPos+0x1>
     3ec:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <motor3_currentPos+0x2>
     3f0:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <motor3_currentPos+0x3>
     3f4:	13 c0       	rjmp	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	} else {
		motor3_currentPos--;  // If B is low while A changes, decrement ticks
     3f6:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <motor3_currentPos>
     3fa:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <motor3_currentPos+0x1>
     3fe:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <motor3_currentPos+0x2>
     402:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <motor3_currentPos+0x3>
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	a1 09       	sbc	r26, r1
     40a:	b1 09       	sbc	r27, r1
     40c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <motor3_currentPos>
     410:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <motor3_currentPos+0x1>
     414:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <motor3_currentPos+0x2>
     418:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <motor3_currentPos+0x3>
	}
}
     41c:	bf 91       	pop	r27
     41e:	af 91       	pop	r26
     420:	9f 91       	pop	r25
     422:	8f 91       	pop	r24
     424:	0f 90       	pop	r0
     426:	0f be       	out	0x3f, r0	; 63
     428:	0f 90       	pop	r0
     42a:	1f 90       	pop	r1
     42c:	18 95       	reti

0000042e <__vector_5>:

//-------- SENSORS ---------
ISR(INT4_vect){ // SENSOR 4
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	0f 92       	push	r0
     436:	11 24       	eor	r1, r1
     438:	8f 93       	push	r24
	if (PINE & (1 << PINE4)) {
     43a:	64 9b       	sbis	0x0c, 4	; 12
     43c:	04 c0       	rjmp	.+8      	; 0x446 <__vector_5+0x18>
		PORTA |= (1 << PA1);
     43e:	82 b1       	in	r24, 0x02	; 2
     440:	82 60       	ori	r24, 0x02	; 2
     442:	82 b9       	out	0x02, r24	; 2
     444:	03 c0       	rjmp	.+6      	; 0x44c <__vector_5+0x1e>
	} else {
		PORTA &= ~(1 << PA1);
     446:	82 b1       	in	r24, 0x02	; 2
     448:	8d 7f       	andi	r24, 0xFD	; 253
     44a:	82 b9       	out	0x02, r24	; 2
	}
}
     44c:	8f 91       	pop	r24
     44e:	0f 90       	pop	r0
     450:	0f be       	out	0x3f, r0	; 63
     452:	0f 90       	pop	r0
     454:	1f 90       	pop	r1
     456:	18 95       	reti

00000458 <__vector_6>:

ISR(INT5_vect){ // SENSOR 3
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	8f 93       	push	r24
	if (PINE & (1 << PINE5)) {
     464:	65 9b       	sbis	0x0c, 5	; 12
     466:	04 c0       	rjmp	.+8      	; 0x470 <__vector_6+0x18>
		PORTA |= (1 << PA1);
     468:	82 b1       	in	r24, 0x02	; 2
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	82 b9       	out	0x02, r24	; 2
     46e:	03 c0       	rjmp	.+6      	; 0x476 <__vector_6+0x1e>
	} else {
		PORTA &= ~(1 << PA1);
     470:	82 b1       	in	r24, 0x02	; 2
     472:	8d 7f       	andi	r24, 0xFD	; 253
     474:	82 b9       	out	0x02, r24	; 2
	}
}
     476:	8f 91       	pop	r24
     478:	0f 90       	pop	r0
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	0f 90       	pop	r0
     47e:	1f 90       	pop	r1
     480:	18 95       	reti

00000482 <__vector_7>:
 
ISR(INT6_vect){ // SENSOR 2
     482:	1f 92       	push	r1
     484:	0f 92       	push	r0
     486:	0f b6       	in	r0, 0x3f	; 63
     488:	0f 92       	push	r0
     48a:	11 24       	eor	r1, r1
     48c:	8f 93       	push	r24
	if (PINE & (1 << PINE6)) {
     48e:	66 9b       	sbis	0x0c, 6	; 12
     490:	04 c0       	rjmp	.+8      	; 0x49a <__vector_7+0x18>
		PORTA |= (1 << PA1);
     492:	82 b1       	in	r24, 0x02	; 2
     494:	82 60       	ori	r24, 0x02	; 2
     496:	82 b9       	out	0x02, r24	; 2
     498:	03 c0       	rjmp	.+6      	; 0x4a0 <__vector_7+0x1e>
	} else {
		PORTA &= ~(1 << PA1);
     49a:	82 b1       	in	r24, 0x02	; 2
     49c:	8d 7f       	andi	r24, 0xFD	; 253
     49e:	82 b9       	out	0x02, r24	; 2
	}
}
     4a0:	8f 91       	pop	r24
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <__vector_8>:

ISR(INT7_vect){ // SENSOR 1
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	8f 93       	push	r24
	if (PINE & (1 << PINE7)) {
     4b8:	67 9b       	sbis	0x0c, 7	; 12
     4ba:	04 c0       	rjmp	.+8      	; 0x4c4 <__vector_8+0x18>
		PORTA |= (1 << PA1);
     4bc:	82 b1       	in	r24, 0x02	; 2
     4be:	82 60       	ori	r24, 0x02	; 2
     4c0:	82 b9       	out	0x02, r24	; 2
     4c2:	03 c0       	rjmp	.+6      	; 0x4ca <__vector_8+0x1e>
	} else {
		PORTA &= ~(1 << PA1);
     4c4:	82 b1       	in	r24, 0x02	; 2
     4c6:	8d 7f       	andi	r24, 0xFD	; 253
     4c8:	82 b9       	out	0x02, r24	; 2
	}
}
     4ca:	8f 91       	pop	r24
     4cc:	0f 90       	pop	r0
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	0f 90       	pop	r0
     4d2:	1f 90       	pop	r1
     4d4:	18 95       	reti

000004d6 <__vector_25>:

// Interrupt Service Routine (ISR) for USART Receive Complete
ISR(USART0_RX_vect) {
     4d6:	1f 92       	push	r1
     4d8:	0f 92       	push	r0
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	0f 92       	push	r0
     4de:	11 24       	eor	r1, r1
     4e0:	0b b6       	in	r0, 0x3b	; 59
     4e2:	0f 92       	push	r0
     4e4:	8f 93       	push	r24
     4e6:	9f 93       	push	r25
     4e8:	ef 93       	push	r30
     4ea:	ff 93       	push	r31
	char c = UDR0;  // Read received character
     4ec:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

	// If Enter key is received, mark the string as complete
	if (c == '\n' || c == '\r') {
     4f0:	8a 30       	cpi	r24, 0x0A	; 10
     4f2:	11 f0       	breq	.+4      	; 0x4f8 <__vector_25+0x22>
     4f4:	8d 30       	cpi	r24, 0x0D	; 13
     4f6:	61 f4       	brne	.+24     	; 0x510 <__vector_25+0x3a>
		read[rx_index] = '\0';  // Null-terminate the string
     4f8:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <rx_index>
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	e7 5d       	subi	r30, 0xD7	; 215
     500:	fd 4f       	sbci	r31, 0xFD	; 253
     502:	10 82       	st	Z, r1
		data_ready = 1;  // Set flag indicating a complete string is available
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <data_ready>
		rx_index = 0;    // Reset buffer index for the next message
     50a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <rx_index>
     50e:	0e c0       	rjmp	.+28     	; 0x52c <__vector_25+0x56>
	}
	else if (rx_index < 100 - 1) {
     510:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <rx_index>
     514:	93 36       	cpi	r25, 0x63	; 99
     516:	50 f4       	brcc	.+20     	; 0x52c <__vector_25+0x56>
		read[rx_index++] = c;  // Store character in buffer
     518:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <rx_index>
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	9e 0f       	add	r25, r30
     520:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <rx_index>
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	e7 5d       	subi	r30, 0xD7	; 215
     528:	fd 4f       	sbci	r31, 0xFD	; 253
     52a:	80 83       	st	Z, r24
	}
}
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	9f 91       	pop	r25
     532:	8f 91       	pop	r24
     534:	0f 90       	pop	r0
     536:	0b be       	out	0x3b, r0	; 59
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <main>:

int main(void)
{
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	cc 59       	subi	r28, 0x9C	; 156
     54c:	d1 09       	sbc	r29, r1
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
	//CONFIGURE ENCODER A PINS AND SENSOR IN PINS AS INPUTS
	DDRD &= ~((1 << DDD2) | (1 << DDD3) | (1 << DDD6) | (1 << DDD7));
     558:	8a b1       	in	r24, 0x0a	; 10
     55a:	83 73       	andi	r24, 0x33	; 51
     55c:	8a b9       	out	0x0a, r24	; 10
	DDRE &= ~((1 << DDE4) | (1 << DDE5) | (1 << DDE6) | (1 << DDE7));
     55e:	8d b1       	in	r24, 0x0d	; 13
     560:	8f 70       	andi	r24, 0x0F	; 15
     562:	8d b9       	out	0x0d, r24	; 13
	DDRB &= ~((1 << DDB4) | (1 << DDB5));
     564:	84 b1       	in	r24, 0x04	; 4
     566:	8f 7c       	andi	r24, 0xCF	; 207
     568:	84 b9       	out	0x04, r24	; 4

	//DISABLE PULL-UP RESISTORS
	PORTD &= ~((1 << PD2) | (1 << PD3) | (1 << PD6) | (1 << PD7));
     56a:	8b b1       	in	r24, 0x0b	; 11
     56c:	83 73       	andi	r24, 0x33	; 51
     56e:	8b b9       	out	0x0b, r24	; 11
	PORTE &= ~((1 << PE4) | (1 << PE5) | (1 << PE6) | (1 << PE7));
     570:	8e b1       	in	r24, 0x0e	; 14
     572:	8f 70       	andi	r24, 0x0F	; 15
     574:	8e b9       	out	0x0e, r24	; 14
	PORTB &= ~((1 << PB4) | (1 << PB5));
     576:	85 b1       	in	r24, 0x05	; 5
     578:	8f 7c       	andi	r24, 0xCF	; 207
     57a:	85 b9       	out	0x05, r24	; 5

	//SETUP EXTERNAL INTERRUPTS
	cli();
     57c:	f8 94       	cli

	EICRA |= (1 << ISC00) | (1 << ISC01) | (1 << ISC10) | (1 << ISC11) | (1 << ISC20) | (1 << ISC21) | (1 << ISC30) | (1 << ISC31); //rising edge detect
     57e:	e9 e6       	ldi	r30, 0x69	; 105
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	bb 24       	eor	r11, r11
     586:	ba 94       	dec	r11
     588:	b0 82       	st	Z, r11
	EICRB |= (1 << ISC40) | (1 << ISC50) | (1 << ISC60) | (1 << ISC70); // any logical change for induction sensor external interrupts
     58a:	ea e6       	ldi	r30, 0x6A	; 106
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	85 65       	ori	r24, 0x55	; 85
     592:	80 83       	st	Z, r24
	EIMSK |= (1 << INT2)  | (1 << INT3)  | (1 << INT4);  // Enable interrupts
     594:	8d b3       	in	r24, 0x1d	; 29
     596:	8c 61       	ori	r24, 0x1C	; 28
     598:	8d bb       	out	0x1d, r24	; 29

	//INITIALIZE SERIAL COMMUNICATION
	USART0_init();
     59a:	38 d3       	rcall	.+1648   	; 0xc0c <USART0_init>
	//Motor basemotor1 = init_motor(2, PORTH, OCR4C, OCR2B, DDRH, DDH5, DDH6, motor1_currentPos, &DDRH, DDH5, &OCR2B, 255);
	//init_pid(&basemotor1, 1.5, 0, 0);
	//Motor basemotor2 = init_motor(2, PORTH, OCR4A, OCR4B, DDRH, DDH3, DDH4, motor2_currentPos, &DDRH, DDH3, &OCR4B, 255);
	//init_pid(&basemotor2, 1.5, 0, 0);

	Motor micromotor3 = init_motor(1, &PORTL, PL2, PL3, &DDRL, DDL2, DDL3, motor3_currentPos, &DDRB, DDB6, &OCR1B, 255);
     59c:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <motor3_currentPos>
     5a0:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <motor3_currentPos+0x1>
     5a4:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <motor3_currentPos+0x2>
     5a8:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <motor3_currentPos+0x3>
     5ac:	bf 92       	push	r11
     5ae:	1f 92       	push	r1
     5b0:	2a e8       	ldi	r18, 0x8A	; 138
     5b2:	2f 93       	push	r18
     5b4:	26 e0       	ldi	r18, 0x06	; 6
     5b6:	2f 93       	push	r18
     5b8:	1f 92       	push	r1
     5ba:	0f 2e       	mov	r0, r31
     5bc:	f4 e2       	ldi	r31, 0x24	; 36
     5be:	9f 2e       	mov	r9, r31
     5c0:	f0 2d       	mov	r31, r0
     5c2:	9f 92       	push	r9
     5c4:	bf 93       	push	r27
     5c6:	af 93       	push	r26
     5c8:	9f 93       	push	r25
     5ca:	8f 93       	push	r24
     5cc:	0f 2e       	mov	r0, r31
     5ce:	f3 e0       	ldi	r31, 0x03	; 3
     5d0:	af 2e       	mov	r10, r31
     5d2:	f0 2d       	mov	r31, r0
     5d4:	68 94       	set
     5d6:	cc 24       	eor	r12, r12
     5d8:	c1 f8       	bld	r12, 1
     5da:	0f 2e       	mov	r0, r31
     5dc:	fa e0       	ldi	r31, 0x0A	; 10
     5de:	ef 2e       	mov	r14, r31
     5e0:	ff 24       	eor	r15, r15
     5e2:	f3 94       	inc	r15
     5e4:	f0 2d       	mov	r31, r0
     5e6:	03 e0       	ldi	r16, 0x03	; 3
     5e8:	22 e0       	ldi	r18, 0x02	; 2
     5ea:	4b e0       	ldi	r20, 0x0B	; 11
     5ec:	51 e0       	ldi	r21, 0x01	; 1
     5ee:	61 e0       	ldi	r22, 0x01	; 1
     5f0:	ce 01       	movw	r24, r28
     5f2:	01 96       	adiw	r24, 0x01	; 1
     5f4:	d8 d0       	rcall	.+432    	; 0x7a6 <init_motor>
	init_pid(&micromotor3, 1, 0.05, 0.0);
     5f6:	c1 2c       	mov	r12, r1
     5f8:	d1 2c       	mov	r13, r1
     5fa:	76 01       	movw	r14, r12
     5fc:	0d ec       	ldi	r16, 0xCD	; 205
     5fe:	1c ec       	ldi	r17, 0xCC	; 204
     600:	2c e4       	ldi	r18, 0x4C	; 76
     602:	3d e3       	ldi	r19, 0x3D	; 61
     604:	40 e0       	ldi	r20, 0x00	; 0
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	60 e8       	ldi	r22, 0x80	; 128
     60a:	7f e3       	ldi	r23, 0x3F	; 63
     60c:	ce 01       	movw	r24, r28
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	21 d1       	rcall	.+578    	; 0x854 <init_pid>
	Motor micromotor4 = init_motor(1, &PORTL, PL0, PL1, &DDRL, DDL0, DDL1, motor4_currentPos, &DDRB, DDB7, &OCR0A, 255);
     612:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <motor4_currentPos>
     616:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <motor4_currentPos+0x1>
     61a:	a0 91 1b 02 	lds	r26, 0x021B	; 0x80021b <motor4_currentPos+0x2>
     61e:	b0 91 1c 02 	lds	r27, 0x021C	; 0x80021c <motor4_currentPos+0x3>
     622:	bf 92       	push	r11
     624:	1f 92       	push	r1
     626:	27 e4       	ldi	r18, 0x47	; 71
     628:	2f 93       	push	r18
     62a:	27 e0       	ldi	r18, 0x07	; 7
     62c:	2f 93       	push	r18
     62e:	1f 92       	push	r1
     630:	9f 92       	push	r9
     632:	bf 93       	push	r27
     634:	af 93       	push	r26
     636:	9f 93       	push	r25
     638:	8f 93       	push	r24
     63a:	aa 24       	eor	r10, r10
     63c:	a3 94       	inc	r10
     63e:	c1 2c       	mov	r12, r1
     640:	0f 2e       	mov	r0, r31
     642:	fa e0       	ldi	r31, 0x0A	; 10
     644:	ef 2e       	mov	r14, r31
     646:	ff 24       	eor	r15, r15
     648:	f3 94       	inc	r15
     64a:	f0 2d       	mov	r31, r0
     64c:	01 e0       	ldi	r16, 0x01	; 1
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	4b e0       	ldi	r20, 0x0B	; 11
     652:	51 e0       	ldi	r21, 0x01	; 1
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	ce 01       	movw	r24, r28
     658:	81 5b       	subi	r24, 0xB1	; 177
     65a:	9f 4f       	sbci	r25, 0xFF	; 255
     65c:	a4 d0       	rcall	.+328    	; 0x7a6 <init_motor>
	init_pid(&micromotor4, 1.2, 0, 0);
     65e:	c1 2c       	mov	r12, r1
     660:	d1 2c       	mov	r13, r1
     662:	76 01       	movw	r14, r12
     664:	97 01       	movw	r18, r14
     666:	86 01       	movw	r16, r12
     668:	4a e9       	ldi	r20, 0x9A	; 154
     66a:	59 e9       	ldi	r21, 0x99	; 153
     66c:	69 e9       	ldi	r22, 0x99	; 153
     66e:	7f e3       	ldi	r23, 0x3F	; 63
     670:	ce 01       	movw	r24, r28
     672:	81 5b       	subi	r24, 0xB1	; 177
     674:	9f 4f       	sbci	r25, 0xFF	; 255
     676:	ee d0       	rcall	.+476    	; 0x854 <init_pid>

	//SET THE TIMER COUNTER CONTROL REGISTERS TO FAST PWM MODE WITH CLEAR ON COMPARE MATCH
	//MICRO MOTOR PWM SETUP
	TCCR0A |= (1 << COM0A1) | (1 << WGM01)  | (1 << WGM00);
     678:	84 b5       	in	r24, 0x24	; 36
     67a:	83 68       	ori	r24, 0x83	; 131
     67c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |=  (1 << CS00)  | (1 << WGM02);
     67e:	85 b5       	in	r24, 0x25	; 37
     680:	89 60       	ori	r24, 0x09	; 9
     682:	85 bd       	out	0x25, r24	; 37
	
	TCCR1A |= (1 << COM1B1) | (1 << WGM10); 
     684:	e0 e8       	ldi	r30, 0x80	; 128
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	80 81       	ld	r24, Z
     68a:	81 62       	ori	r24, 0x21	; 33
     68c:	80 83       	st	Z, r24
	TCCR1B |=  (1 << CS10)  | (1 << WGM12);
     68e:	e1 e8       	ldi	r30, 0x81	; 129
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	89 60       	ori	r24, 0x09	; 9
     696:	80 83       	st	Z, r24

	//BASE MOTOR PWM SETUP
	TCCR2A |= (1 << COM2B1) | (1 << WGM21)  | (1 << WGM20);
     698:	e0 eb       	ldi	r30, 0xB0	; 176
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	83 62       	ori	r24, 0x23	; 35
     6a0:	80 83       	st	Z, r24
	TCCR2B |=  (1 << CS20)  | (1 << WGM22);
     6a2:	e1 eb       	ldi	r30, 0xB1	; 177
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	89 60       	ori	r24, 0x09	; 9
     6aa:	80 83       	st	Z, r24

	TCCR4A |= (1 << COM4A1) | (1 << COM4B1) | (1 << COM4C1) | (1 << WGM40); 
     6ac:	e0 ea       	ldi	r30, 0xA0	; 160
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	89 6a       	ori	r24, 0xA9	; 169
     6b4:	80 83       	st	Z, r24
	TCCR4B |=  (1 << CS40)  | (1 << WGM42);
     6b6:	e1 ea       	ldi	r30, 0xA1	; 161
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	89 60       	ori	r24, 0x09	; 9
     6be:	80 83       	st	Z, r24

	//SETUP TIMER 3 FOR MICROSECOND COUNTING FROM BOOT
	TCCR3B |= (1 << CS30);
     6c0:	e1 e9       	ldi	r30, 0x91	; 145
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	80 81       	ld	r24, Z
     6c6:	81 60       	ori	r24, 0x01	; 1
     6c8:	80 83       	st	Z, r24
	TIMSK3 |= (1 << TOIE3);
     6ca:	e1 e7       	ldi	r30, 0x71	; 113
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	80 81       	ld	r24, Z
     6d0:	81 60       	ori	r24, 0x01	; 1
     6d2:	80 83       	st	Z, r24

	sei();
     6d4:	78 94       	sei
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63

		//BASE MOTOR 2
		//OCR4A = 200;
		//OCR4B = 0;

		if(strcmp(read, "ST") == 0) connected = 1;
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	64 e0       	ldi	r22, 0x04	; 4
     6e2:	72 e0       	ldi	r23, 0x02	; 2
     6e4:	89 e2       	ldi	r24, 0x29	; 41
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	21 d5       	rcall	.+2626   	; 0x112c <strcmp>
     6ea:	89 2b       	or	r24, r25
     6ec:	21 f4       	brne	.+8      	; 0x6f6 <main+0x1b4>
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <connected>
		else if(strcmp(read, "SO") == 0) connected = 0;
     6f4:	09 c0       	rjmp	.+18     	; 0x708 <main+0x1c6>
     6f6:	67 e0       	ldi	r22, 0x07	; 7
     6f8:	72 e0       	ldi	r23, 0x02	; 2
     6fa:	89 e2       	ldi	r24, 0x29	; 41
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	16 d5       	rcall	.+2604   	; 0x112c <strcmp>
     700:	89 2b       	or	r24, r25
     702:	11 f4       	brne	.+4      	; 0x708 <main+0x1c6>
     704:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <connected>

		if(connected){ // IMPLEMENT DATA READY CHECKING
     708:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <connected>
     70c:	88 23       	and	r24, r24
     70e:	09 f4       	brne	.+2      	; 0x712 <main+0x1d0>
     710:	43 c0       	rjmp	.+134    	; 0x798 <main+0x256>
			sscanf(read, "%ld", &setpoint);
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0f 2e       	mov	r0, r31
     71c:	fa e0       	ldi	r31, 0x0A	; 10
     71e:	ef 2e       	mov	r14, r31
     720:	f2 e0       	ldi	r31, 0x02	; 2
     722:	ff 2e       	mov	r15, r31
     724:	f0 2d       	mov	r31, r0
     726:	ff 92       	push	r15
     728:	ef 92       	push	r14
     72a:	89 e2       	ldi	r24, 0x29	; 41
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	9f 93       	push	r25
     730:	8f 93       	push	r24
     732:	33 d5       	rcall	.+2662   	; 0x119a <sscanf>
			//setpoint = atoi(read);
			move_abs(&micromotor3, setpoint, motor3_currentPos);
     734:	00 91 1d 02 	lds	r16, 0x021D	; 0x80021d <motor3_currentPos>
     738:	10 91 1e 02 	lds	r17, 0x021E	; 0x80021e <motor3_currentPos+0x1>
     73c:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <motor3_currentPos+0x2>
     740:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <motor3_currentPos+0x3>
     744:	40 91 00 02 	lds	r20, 0x0200	; 0x800200 <__data_start>
     748:	50 91 01 02 	lds	r21, 0x0201	; 0x800201 <__data_start+0x1>
     74c:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <__data_start+0x2>
     750:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <__data_start+0x3>
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	c7 d0       	rcall	.+398    	; 0x8e8 <move_abs>

			sprintf(tobesent,"%ld", micromotor3.pid.us_time);
     75a:	8a a9       	ldd	r24, Y+50	; 0x32
     75c:	8f 93       	push	r24
     75e:	89 a9       	ldd	r24, Y+49	; 0x31
     760:	8f 93       	push	r24
     762:	88 a9       	ldd	r24, Y+48	; 0x30
     764:	8f 93       	push	r24
     766:	8f a5       	ldd	r24, Y+47	; 0x2f
     768:	8f 93       	push	r24
     76a:	ff 92       	push	r15
     76c:	ef 92       	push	r14
     76e:	0e e8       	ldi	r16, 0x8E	; 142
     770:	12 e0       	ldi	r17, 0x02	; 2
     772:	1f 93       	push	r17
     774:	0f 93       	push	r16
     776:	e3 d4       	rcall	.+2502   	; 0x113e <sprintf>
			strcat(tobesent, "\n");
     778:	f8 01       	movw	r30, r16
     77a:	01 90       	ld	r0, Z+
     77c:	00 20       	and	r0, r0
     77e:	e9 f7       	brne	.-6      	; 0x77a <main+0x238>
     780:	31 97       	sbiw	r30, 0x01	; 1
     782:	8a e0       	ldi	r24, 0x0A	; 10
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	91 83       	std	Z+1, r25	; 0x01
			USART0_send_string(tobesent);
     788:	80 83       	st	Z, r24
     78a:	c8 01       	movw	r24, r16
     78c:	52 d2       	rcall	.+1188   	; 0xc32 <USART0_send_string>
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     798:	8f e3       	ldi	r24, 0x3F	; 63
     79a:	9c e9       	ldi	r25, 0x9C	; 156
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	f1 f7       	brne	.-4      	; 0x79c <main+0x25a>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <main+0x260>
     7a2:	00 00       	nop
     7a4:	9d cf       	rjmp	.-198    	; 0x6e0 <main+0x19e>

000007a6 <init_motor>:

#include "motor.h"

Motor init_motor(uint8_t motortype, volatile uint8_t *portdirpin, uint8_t dirpin1, uint8_t dirpin2,
				volatile uint8_t *ddreg, uint8_t ddrpin1, uint8_t ddrpin2, volatile int32_t encoder, 
				volatile uint8_t *ddrpwm, uint8_t pwmpin, volatile uint16_t *ocr, uint8_t max_speed){
     7a6:	6f 92       	push	r6
     7a8:	7f 92       	push	r7
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	4c 01       	movw	r8, r24
     7c6:	16 2f       	mov	r17, r22
     7c8:	6c 2d       	mov	r22, r12
     7ca:	6d 88       	ldd	r6, Y+21	; 0x15
     7cc:	7e 88       	ldd	r7, Y+22	; 0x16
     7ce:	df 88       	ldd	r13, Y+23	; 0x17
     7d0:	3a 8d       	ldd	r19, Y+26	; 0x1a
	Motor motor;
	motor.encoder = encoder;
     7d2:	89 89       	ldd	r24, Y+17	; 0x11
     7d4:	9a 89       	ldd	r25, Y+18	; 0x12
     7d6:	ab 89       	ldd	r26, Y+19	; 0x13
     7d8:	bc 89       	ldd	r27, Y+20	; 0x14
     7da:	f4 01       	movw	r30, r8
     7dc:	80 8b       	std	Z+16, r24	; 0x10
     7de:	91 8b       	std	Z+17, r25	; 0x11
     7e0:	a2 8b       	std	Z+18, r26	; 0x12
     7e2:	b3 8b       	std	Z+19, r27	; 0x13
	motor.motortype = motortype;
     7e4:	10 83       	st	Z, r17
	motor.portdirpin = portdirpin;
     7e6:	56 83       	std	Z+6, r21	; 0x06
     7e8:	45 83       	std	Z+5, r20	; 0x05
	motor.dirpin1 = dirpin1;
     7ea:	27 83       	std	Z+7, r18	; 0x07
	motor.dirpin2 = dirpin2;
     7ec:	00 87       	std	Z+8, r16	; 0x08
	motor.ddreg = ddreg;
     7ee:	f2 82       	std	Z+2, r15	; 0x02
     7f0:	e1 82       	std	Z+1, r14	; 0x01
	motor.ddrpin1 = ddrpin1;
     7f2:	c3 82       	std	Z+3, r12	; 0x03
	motor.ddrpin2 = ddrpin2;
     7f4:	a4 82       	std	Z+4, r10	; 0x04
	motor.ddrpwm = ddrpwm;
     7f6:	72 86       	std	Z+10, r7	; 0x0a
     7f8:	61 86       	std	Z+9, r6	; 0x09
	motor.pwmpin = pwmpin;
     7fa:	d3 86       	std	Z+11, r13	; 0x0b
	motor.ocr = ocr;
     7fc:	88 8d       	ldd	r24, Y+24	; 0x18
     7fe:	99 8d       	ldd	r25, Y+25	; 0x19
     800:	95 87       	std	Z+13, r25	; 0x0d
     802:	84 87       	std	Z+12, r24	; 0x0c
	motor.max_speed = max_speed;
     804:	37 87       	std	Z+15, r19	; 0x0f
	motor.pwm_value = max_speed;
     806:	36 87       	std	Z+14, r19	; 0x0e

	//SET DIR PIN OUTPUTS
	set_output(motor.ddreg, motor.ddrpin1);
     808:	c7 01       	movw	r24, r14
     80a:	d1 dc       	rcall	.-1630   	; 0x1ae <set_output>
	set_output(motor.ddreg, motor.ddrpin2);
     80c:	6a 2d       	mov	r22, r10
     80e:	c7 01       	movw	r24, r14
     810:	ce dc       	rcall	.-1636   	; 0x1ae <set_output>

	if(motortype == 1){			
     812:	11 30       	cpi	r17, 0x01	; 1
     814:	49 f4       	brne	.+18     	; 0x828 <init_motor+0x82>
		motor.ticks_per_rev = 12; //MICROMOTOR
     816:	8c e0       	ldi	r24, 0x0C	; 12
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	f4 01       	movw	r30, r8
     81c:	95 8b       	std	Z+21, r25	; 0x15
     81e:	84 8b       	std	Z+20, r24	; 0x14
		//SET PWM PIN OUTPUTS
		set_output(motor.ddrpwm, motor.pwmpin);
     820:	6d 2d       	mov	r22, r13
     822:	c3 01       	movw	r24, r6
     824:	c4 dc       	rcall	.-1656   	; 0x1ae <set_output>
     826:	07 c0       	rjmp	.+14     	; 0x836 <init_motor+0x90>
	}		
	else if(motortype == 2) motor.ticks_per_rev = 700; //BASE MOTOR
     828:	12 30       	cpi	r17, 0x02	; 2
     82a:	29 f4       	brne	.+10     	; 0x836 <init_motor+0x90>
     82c:	8c eb       	ldi	r24, 0xBC	; 188
     82e:	92 e0       	ldi	r25, 0x02	; 2
     830:	f4 01       	movw	r30, r8
     832:	95 8b       	std	Z+21, r25	; 0x15
     834:	84 8b       	std	Z+20, r24	; 0x14

	return motor;
}
     836:	c4 01       	movw	r24, r8
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	af 90       	pop	r10
     84a:	9f 90       	pop	r9
     84c:	8f 90       	pop	r8
     84e:	7f 90       	pop	r7
     850:	6f 90       	pop	r6
     852:	08 95       	ret

00000854 <init_pid>:

void init_pid(Motor *motor, float kp, float kd, float ki){
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ef 92       	push	r14
     85a:	ff 92       	push	r15
     85c:	0f 93       	push	r16
     85e:	1f 93       	push	r17
     860:	fc 01       	movw	r30, r24
	motor->pid.Kp = kp;
     862:	dc 01       	movw	r26, r24
     864:	ae 5b       	subi	r26, 0xBE	; 190
     866:	bf 4f       	sbci	r27, 0xFF	; 255
     868:	4d 93       	st	X+, r20
     86a:	5d 93       	st	X+, r21
     86c:	6d 93       	st	X+, r22
     86e:	7c 93       	st	X, r23
     870:	13 97       	sbiw	r26, 0x03	; 3
	motor->pid.Kd = kd;
     872:	14 96       	adiw	r26, 0x04	; 4
     874:	0d 93       	st	X+, r16
     876:	1d 93       	st	X+, r17
     878:	2d 93       	st	X+, r18
     87a:	3c 93       	st	X, r19
     87c:	13 97       	sbiw	r26, 0x03	; 3
	motor->pid.Ki = ki;
     87e:	14 96       	adiw	r26, 0x04	; 4
     880:	cd 92       	st	X+, r12
     882:	dd 92       	st	X+, r13
     884:	ed 92       	st	X+, r14
     886:	fc 92       	st	X, r15
     888:	13 97       	sbiw	r26, 0x03	; 3
	motor->pid.prev_error = 0;
     88a:	16 8a       	std	Z+22, r1	; 0x16
     88c:	17 8a       	std	Z+23, r1	; 0x17
     88e:	10 8e       	std	Z+24, r1	; 0x18
     890:	11 8e       	std	Z+25, r1	; 0x19
	motor->pid.setpoint = 0;
     892:	16 8e       	std	Z+30, r1	; 0x1e
     894:	17 8e       	std	Z+31, r1	; 0x1f
     896:	10 a2       	std	Z+32, r1	; 0x20
     898:	11 a2       	std	Z+33, r1	; 0x21
	motor->pid.critical_delta = 200.0;
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a8 e4       	ldi	r26, 0x48	; 72
     8a0:	b3 e4       	ldi	r27, 0x43	; 67
     8a2:	82 af       	std	Z+58, r24	; 0x3a
     8a4:	93 af       	std	Z+59, r25	; 0x3b
     8a6:	a4 af       	std	Z+60, r26	; 0x3c
     8a8:	b5 af       	std	Z+61, r27	; 0x3d
	motor->pid.e_prop = 0;
     8aa:	12 a2       	std	Z+34, r1	; 0x22
     8ac:	13 a2       	std	Z+35, r1	; 0x23
     8ae:	14 a2       	std	Z+36, r1	; 0x24
     8b0:	15 a2       	std	Z+37, r1	; 0x25
	motor->pid.e_dot = 0;
     8b2:	16 a2       	std	Z+38, r1	; 0x26
     8b4:	17 a2       	std	Z+39, r1	; 0x27
     8b6:	10 a6       	std	Z+40, r1	; 0x28
     8b8:	11 a6       	std	Z+41, r1	; 0x29
	motor->pid.e_int = 0;
     8ba:	12 a6       	std	Z+42, r1	; 0x2a
     8bc:	13 a6       	std	Z+43, r1	; 0x2b
     8be:	14 a6       	std	Z+44, r1	; 0x2c
     8c0:	15 a6       	std	Z+45, r1	; 0x2d
	motor->pid.us_time = 0;
     8c2:	16 a6       	std	Z+46, r1	; 0x2e
     8c4:	17 a6       	std	Z+47, r1	; 0x2f
     8c6:	10 aa       	std	Z+48, r1	; 0x30
     8c8:	11 aa       	std	Z+49, r1	; 0x31
	motor->pid.d_time = 0;
     8ca:	12 aa       	std	Z+50, r1	; 0x32
     8cc:	13 aa       	std	Z+51, r1	; 0x33
     8ce:	14 aa       	std	Z+52, r1	; 0x34
     8d0:	15 aa       	std	Z+53, r1	; 0x35
	motor->pid.prev_time = 0;
     8d2:	16 aa       	std	Z+54, r1	; 0x36
     8d4:	17 aa       	std	Z+55, r1	; 0x37
     8d6:	10 ae       	std	Z+56, r1	; 0x38
     8d8:	11 ae       	std	Z+57, r1	; 0x39
}
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	ef 90       	pop	r14
     8e2:	df 90       	pop	r13
     8e4:	cf 90       	pop	r12
     8e6:	08 95       	ret

000008e8 <move_abs>:
							 (motor->pid.Ki * motor->pid.e_int);
	
	motor->pid.prev_error = motor->pid.e_prop;
}

void move_abs(Motor *motor, int32_t setpoint, volatile int32_t currentpos){
     8e8:	4f 92       	push	r4
     8ea:	5f 92       	push	r5
     8ec:	6f 92       	push	r6
     8ee:	7f 92       	push	r7
     8f0:	8f 92       	push	r8
     8f2:	9f 92       	push	r9
     8f4:	af 92       	push	r10
     8f6:	bf 92       	push	r11
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	cd b7       	in	r28, 0x3d	; 61
     906:	de b7       	in	r29, 0x3e	; 62
     908:	60 97       	sbiw	r28, 0x10	; 16
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	de bf       	out	0x3e, r29	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	cd bf       	out	0x3d, r28	; 61
     914:	7c 01       	movw	r14, r24
     916:	09 83       	std	Y+1, r16	; 0x01
     918:	1a 83       	std	Y+2, r17	; 0x02
     91a:	2b 83       	std	Y+3, r18	; 0x03
     91c:	3c 83       	std	Y+4, r19	; 0x04
	motor->pid.current_pos = currentpos;
     91e:	89 81       	ldd	r24, Y+1	; 0x01
     920:	9a 81       	ldd	r25, Y+2	; 0x02
     922:	ab 81       	ldd	r26, Y+3	; 0x03
     924:	bc 81       	ldd	r27, Y+4	; 0x04
     926:	f7 01       	movw	r30, r14
     928:	82 8f       	std	Z+26, r24	; 0x1a
     92a:	93 8f       	std	Z+27, r25	; 0x1b
     92c:	a4 8f       	std	Z+28, r26	; 0x1c
     92e:	b5 8f       	std	Z+29, r27	; 0x1d
	motor->pid.setpoint = setpoint;
     930:	46 8f       	std	Z+30, r20	; 0x1e
     932:	57 8f       	std	Z+31, r21	; 0x1f
     934:	60 a3       	std	Z+32, r22	; 0x20
     936:	71 a3       	std	Z+33, r23	; 0x21
		motor->dirpin2 = 0;
	}
}

inline void calculatePID(Motor *motor){ 
	motor->pid.us_time = micros();
     938:	5f dc       	rcall	.-1858   	; 0x1f8 <micros>
     93a:	f7 01       	movw	r30, r14
     93c:	66 a7       	std	Z+46, r22	; 0x2e
     93e:	77 a7       	std	Z+47, r23	; 0x2f
     940:	80 ab       	std	Z+48, r24	; 0x30
     942:	91 ab       	std	Z+49, r25	; 0x31
	motor->pid.d_time = motor->pid.us_time - motor->pid.prev_time;
     944:	86 a8       	ldd	r8, Z+54	; 0x36
     946:	97 a8       	ldd	r9, Z+55	; 0x37
     948:	a0 ac       	ldd	r10, Z+56	; 0x38
     94a:	b1 ac       	ldd	r11, Z+57	; 0x39
     94c:	8b 01       	movw	r16, r22
     94e:	9c 01       	movw	r18, r24
     950:	08 19       	sub	r16, r8
     952:	19 09       	sbc	r17, r9
     954:	2a 09       	sbc	r18, r10
     956:	3b 09       	sbc	r19, r11
     958:	48 01       	movw	r8, r16
     95a:	59 01       	movw	r10, r18
     95c:	d7 01       	movw	r26, r14
     95e:	d2 96       	adiw	r26, 0x32	; 50
     960:	0d 93       	st	X+, r16
     962:	1d 93       	st	X+, r17
     964:	2d 93       	st	X+, r18
     966:	3c 93       	st	X, r19
     968:	d5 97       	sbiw	r26, 0x35	; 53
	motor->pid.prev_time = motor->pid.us_time;
     96a:	66 ab       	std	Z+54, r22	; 0x36
     96c:	77 ab       	std	Z+55, r23	; 0x37
     96e:	80 af       	std	Z+56, r24	; 0x38
     970:	91 af       	std	Z+57, r25	; 0x39
	// FIX VARIABLE ISSUES
	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
     972:	46 8d       	ldd	r20, Z+30	; 0x1e
     974:	57 8d       	ldd	r21, Z+31	; 0x1f
     976:	60 a1       	ldd	r22, Z+32	; 0x20
     978:	71 a1       	ldd	r23, Z+33	; 0x21
     97a:	82 8d       	ldd	r24, Z+26	; 0x1a
     97c:	93 8d       	ldd	r25, Z+27	; 0x1b
     97e:	a4 8d       	ldd	r26, Z+28	; 0x1c
     980:	b5 8d       	ldd	r27, Z+29	; 0x1d
     982:	8a 01       	movw	r16, r20
     984:	9b 01       	movw	r18, r22
     986:	08 1b       	sub	r16, r24
     988:	19 0b       	sbc	r17, r25
     98a:	2a 0b       	sbc	r18, r26
     98c:	3b 0b       	sbc	r19, r27
     98e:	0d 83       	std	Y+5, r16	; 0x05
     990:	1e 83       	std	Y+6, r17	; 0x06
     992:	2f 83       	std	Y+7, r18	; 0x07
     994:	38 87       	std	Y+8, r19	; 0x08
     996:	02 a3       	std	Z+34, r16	; 0x22
     998:	13 a3       	std	Z+35, r17	; 0x23
     99a:	24 a3       	std	Z+36, r18	; 0x24
     99c:	35 a3       	std	Z+37, r19	; 0x25
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
     99e:	86 89       	ldd	r24, Z+22	; 0x16
     9a0:	97 89       	ldd	r25, Z+23	; 0x17
     9a2:	a0 8d       	ldd	r26, Z+24	; 0x18
     9a4:	b1 8d       	ldd	r27, Z+25	; 0x19
     9a6:	08 1b       	sub	r16, r24
     9a8:	19 0b       	sbc	r17, r25
     9aa:	2a 0b       	sbc	r18, r26
     9ac:	3b 0b       	sbc	r19, r27
     9ae:	c9 01       	movw	r24, r18
     9b0:	b8 01       	movw	r22, r16
     9b2:	a5 01       	movw	r20, r10
     9b4:	94 01       	movw	r18, r8
     9b6:	73 d3       	rcall	.+1766   	; 0x109e <__udivmodsi4>
     9b8:	29 87       	std	Y+9, r18	; 0x09
     9ba:	3a 87       	std	Y+10, r19	; 0x0a
     9bc:	4b 87       	std	Y+11, r20	; 0x0b
     9be:	5c 87       	std	Y+12, r21	; 0x0c
     9c0:	f7 01       	movw	r30, r14
     9c2:	26 a3       	std	Z+38, r18	; 0x26
     9c4:	37 a3       	std	Z+39, r19	; 0x27
     9c6:	40 a7       	std	Z+40, r20	; 0x28
     9c8:	51 a7       	std	Z+41, r21	; 0x29
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);
     9ca:	42 a4       	ldd	r4, Z+42	; 0x2a
     9cc:	53 a4       	ldd	r5, Z+43	; 0x2b
     9ce:	64 a4       	ldd	r6, Z+44	; 0x2c
     9d0:	75 a4       	ldd	r7, Z+45	; 0x2d
     9d2:	2d 81       	ldd	r18, Y+5	; 0x05
     9d4:	3e 81       	ldd	r19, Y+6	; 0x06
     9d6:	4f 81       	ldd	r20, Y+7	; 0x07
     9d8:	58 85       	ldd	r21, Y+8	; 0x08
     9da:	c5 01       	movw	r24, r10
     9dc:	b4 01       	movw	r22, r8
     9de:	50 d3       	rcall	.+1696   	; 0x1080 <__mulsi3>
     9e0:	53 01       	movw	r10, r6
     9e2:	42 01       	movw	r8, r4
     9e4:	86 0e       	add	r8, r22
     9e6:	97 1e       	adc	r9, r23
     9e8:	a8 1e       	adc	r10, r24
     9ea:	b9 1e       	adc	r11, r25
     9ec:	82 a6       	std	Z+42, r8	; 0x2a
     9ee:	93 a6       	std	Z+43, r9	; 0x2b
     9f0:	a4 a6       	std	Z+44, r10	; 0x2c
     9f2:	b5 a6       	std	Z+45, r11	; 0x2d

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
     9f4:	ee 5b       	subi	r30, 0xBE	; 190
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	40 80       	ld	r4, Z
     9fa:	51 80       	ldd	r5, Z+1	; 0x01
     9fc:	62 80       	ldd	r6, Z+2	; 0x02
     9fe:	73 80       	ldd	r7, Z+3	; 0x03
     a00:	ca 01       	movw	r24, r20
     a02:	b9 01       	movw	r22, r18
     a04:	26 d2       	rcall	.+1100   	; 0xe52 <__floatsisf>
     a06:	a3 01       	movw	r20, r6
     a08:	92 01       	movw	r18, r4
     a0a:	d7 d2       	rcall	.+1454   	; 0xfba <__mulsf3>
     a0c:	6d 87       	std	Y+13, r22	; 0x0d
     a0e:	7e 87       	std	Y+14, r23	; 0x0e
     a10:	8f 87       	std	Y+15, r24	; 0x0f
     a12:	98 8b       	std	Y+16, r25	; 0x10
							 (motor->pid.Kd * motor->pid.e_dot) + 
     a14:	f7 01       	movw	r30, r14
     a16:	ea 5b       	subi	r30, 0xBA	; 186
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	40 80       	ld	r4, Z
     a1c:	51 80       	ldd	r5, Z+1	; 0x01
     a1e:	62 80       	ldd	r6, Z+2	; 0x02
     a20:	73 80       	ldd	r7, Z+3	; 0x03
     a22:	69 85       	ldd	r22, Y+9	; 0x09
     a24:	7a 85       	ldd	r23, Y+10	; 0x0a
     a26:	8b 85       	ldd	r24, Y+11	; 0x0b
     a28:	9c 85       	ldd	r25, Y+12	; 0x0c
     a2a:	13 d2       	rcall	.+1062   	; 0xe52 <__floatsisf>
     a2c:	a3 01       	movw	r20, r6
     a2e:	92 01       	movw	r18, r4
     a30:	c4 d2       	rcall	.+1416   	; 0xfba <__mulsf3>
     a32:	9b 01       	movw	r18, r22
	// FIX VARIABLE ISSUES
	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
     a34:	ac 01       	movw	r20, r24
     a36:	6d 85       	ldd	r22, Y+13	; 0x0d
     a38:	7e 85       	ldd	r23, Y+14	; 0x0e
     a3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     a3c:	98 89       	ldd	r25, Y+16	; 0x10
     a3e:	06 d1       	rcall	.+524    	; 0xc4c <__addsf3>
     a40:	69 87       	std	Y+9, r22	; 0x09
     a42:	7a 87       	std	Y+10, r23	; 0x0a
     a44:	8b 87       	std	Y+11, r24	; 0x0b
     a46:	9c 87       	std	Y+12, r25	; 0x0c
							 (motor->pid.Kd * motor->pid.e_dot) + 
							 (motor->pid.Ki * motor->pid.e_int);
     a48:	f7 01       	movw	r30, r14
     a4a:	e6 5b       	subi	r30, 0xB6	; 182
     a4c:	ff 4f       	sbci	r31, 0xFF	; 255
     a4e:	40 80       	ld	r4, Z
     a50:	51 80       	ldd	r5, Z+1	; 0x01
     a52:	62 80       	ldd	r6, Z+2	; 0x02
     a54:	73 80       	ldd	r7, Z+3	; 0x03
     a56:	c5 01       	movw	r24, r10
     a58:	b4 01       	movw	r22, r8
     a5a:	fb d1       	rcall	.+1014   	; 0xe52 <__floatsisf>
     a5c:	a3 01       	movw	r20, r6
     a5e:	92 01       	movw	r18, r4
     a60:	ac d2       	rcall	.+1368   	; 0xfba <__mulsf3>
     a62:	9b 01       	movw	r18, r22
	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
							 (motor->pid.Kd * motor->pid.e_dot) + 
     a64:	ac 01       	movw	r20, r24
     a66:	69 85       	ldd	r22, Y+9	; 0x09
     a68:	7a 85       	ldd	r23, Y+10	; 0x0a
     a6a:	8b 85       	ldd	r24, Y+11	; 0x0b
     a6c:	9c 85       	ldd	r25, Y+12	; 0x0c
     a6e:	ee d0       	rcall	.+476    	; 0xc4c <__addsf3>
     a70:	4b 01       	movw	r8, r22
     a72:	5c 01       	movw	r10, r24
	// FIX VARIABLE ISSUES
	motor->pid.e_prop	= motor->pid.setpoint - motor->pid.current_pos;
	motor->pid.e_dot	= (motor->pid.e_prop - motor->pid.prev_error)/motor->pid.d_time;
	motor->pid.e_int	= motor->pid.e_int + (motor->pid.e_prop * motor->pid.d_time);

	motor->pid.ctrl_signal = (motor->pid.Kp * motor->pid.e_prop) + 
     a74:	f7 01       	movw	r30, r14
     a76:	fe 96       	adiw	r30, 0x3e	; 62
     a78:	60 83       	st	Z, r22
     a7a:	71 83       	std	Z+1, r23	; 0x01
     a7c:	82 83       	std	Z+2, r24	; 0x02
     a7e:	93 83       	std	Z+3, r25	; 0x03
							 (motor->pid.Kd * motor->pid.e_dot) + 
							 (motor->pid.Ki * motor->pid.e_int);
	
	motor->pid.prev_error = motor->pid.e_prop;
     a80:	0d 81       	ldd	r16, Y+5	; 0x05
     a82:	1e 81       	ldd	r17, Y+6	; 0x06
     a84:	2f 81       	ldd	r18, Y+7	; 0x07
     a86:	38 85       	ldd	r19, Y+8	; 0x08
     a88:	d7 01       	movw	r26, r14
     a8a:	56 96       	adiw	r26, 0x16	; 22
     a8c:	0d 93       	st	X+, r16
     a8e:	1d 93       	st	X+, r17
     a90:	2d 93       	st	X+, r18
     a92:	3c 93       	st	X, r19
	motor->pid.current_pos = currentpos;
	motor->pid.setpoint = setpoint;
	
	calculatePID(motor);

	if(motor->pid.ctrl_signal > motor->pid.critical_delta)
     a94:	59 97       	sbiw	r26, 0x19	; 25
     a96:	da 96       	adiw	r26, 0x3a	; 58
     a98:	4d 90       	ld	r4, X+
     a9a:	5d 90       	ld	r5, X+
     a9c:	6d 90       	ld	r6, X+
     a9e:	7c 90       	ld	r7, X
     aa0:	dd 97       	sbiw	r26, 0x3d	; 61
     aa2:	9b 01       	movw	r18, r22
     aa4:	ac 01       	movw	r20, r24
     aa6:	c3 01       	movw	r24, r6
     aa8:	b2 01       	movw	r22, r4
     aaa:	34 d1       	rcall	.+616    	; 0xd14 <__cmpsf2>
     aac:	88 23       	and	r24, r24
		motor->pwm_value = motor->max_speed;
     aae:	24 f4       	brge	.+8      	; 0xab8 <move_abs+0x1d0>
     ab0:	f7 01       	movw	r30, r14
     ab2:	87 85       	ldd	r24, Z+15	; 0x0f
     ab4:	86 87       	std	Z+14, r24	; 0x0e
	else
		motor->pwm_value = ((abs(motor->pid.ctrl_signal)/motor->pid.critical_delta)*motor->max_speed);
     ab6:	21 c0       	rjmp	.+66     	; 0xafa <move_abs+0x212>
     ab8:	c5 01       	movw	r24, r10
     aba:	b4 01       	movw	r22, r8
     abc:	97 d1       	rcall	.+814    	; 0xdec <__fixsfsi>
     abe:	9b 01       	movw	r18, r22
     ac0:	77 23       	and	r23, r23
     ac2:	24 f4       	brge	.+8      	; 0xacc <move_abs+0x1e4>
     ac4:	22 27       	eor	r18, r18
     ac6:	33 27       	eor	r19, r19
     ac8:	26 1b       	sub	r18, r22
     aca:	37 0b       	sbc	r19, r23
     acc:	b9 01       	movw	r22, r18
     ace:	33 0f       	add	r19, r19
     ad0:	88 0b       	sbc	r24, r24
     ad2:	99 0b       	sbc	r25, r25
     ad4:	be d1       	rcall	.+892    	; 0xe52 <__floatsisf>
     ad6:	a3 01       	movw	r20, r6
     ad8:	92 01       	movw	r18, r4
     ada:	20 d1       	rcall	.+576    	; 0xd1c <__divsf3>
     adc:	4b 01       	movw	r8, r22
     ade:	5c 01       	movw	r10, r24
     ae0:	d7 01       	movw	r26, r14
     ae2:	1f 96       	adiw	r26, 0x0f	; 15
     ae4:	6c 91       	ld	r22, X
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	b2 d1       	rcall	.+868    	; 0xe52 <__floatsisf>
     aee:	a5 01       	movw	r20, r10
     af0:	94 01       	movw	r18, r8
     af2:	63 d2       	rcall	.+1222   	; 0xfba <__mulsf3>
     af4:	80 d1       	rcall	.+768    	; 0xdf6 <__fixunssfsi>
     af6:	f7 01       	movw	r30, r14
     af8:	66 87       	std	Z+14, r22	; 0x0e

	if(motor->motortype == 1) *motor->ocr = motor->pwm_value;
     afa:	d7 01       	movw	r26, r14
     afc:	8c 91       	ld	r24, X
     afe:	81 30       	cpi	r24, 0x01	; 1
     b00:	49 f4       	brne	.+18     	; 0xb14 <move_abs+0x22c>
     b02:	1c 96       	adiw	r26, 0x0c	; 12
     b04:	ed 91       	ld	r30, X+
     b06:	fc 91       	ld	r31, X
     b08:	1d 97       	sbiw	r26, 0x0d	; 13
     b0a:	1e 96       	adiw	r26, 0x0e	; 14
     b0c:	8c 91       	ld	r24, X
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	91 83       	std	Z+1, r25	; 0x01

	if(motor->pid.ctrl_signal > MIN_POS_DELTA) fwd(motor, motor->portdirpin, motor->dirpin1, motor->dirpin2);
     b12:	80 83       	st	Z, r24
     b14:	f7 01       	movw	r30, r14
     b16:	fe 96       	adiw	r30, 0x3e	; 62
     b18:	80 80       	ld	r8, Z
     b1a:	91 80       	ldd	r9, Z+1	; 0x01
     b1c:	a2 80       	ldd	r10, Z+2	; 0x02
     b1e:	b3 80       	ldd	r11, Z+3	; 0x03
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	40 e2       	ldi	r20, 0x20	; 32
     b26:	51 e4       	ldi	r21, 0x41	; 65
     b28:	c5 01       	movw	r24, r10
     b2a:	b4 01       	movw	r22, r8
     b2c:	42 d2       	rcall	.+1156   	; 0xfb2 <__gesf2>
	motor->pid.d_time = 0;
	motor->pid.prev_time = 0;
}

inline void fwd(Motor *motor, volatile uint8_t *portdirpin, uint8_t dirpin1, uint8_t dirpin2){
	if(motor->motortype == 1){			//MICROMOTOR
     b2e:	18 16       	cp	r1, r24
     b30:	d4 f4       	brge	.+52     	; 0xb66 <move_abs+0x27e>
     b32:	f7 01       	movw	r30, r14
     b34:	80 81       	ld	r24, Z
		pin_high(motor->portdirpin, motor->dirpin1);
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	71 f4       	brne	.+28     	; 0xb56 <move_abs+0x26e>
     b3a:	67 81       	ldd	r22, Z+7	; 0x07
     b3c:	85 81       	ldd	r24, Z+5	; 0x05
     b3e:	96 81       	ldd	r25, Z+6	; 0x06
		pin_low(motor->portdirpin, motor->dirpin2);
     b40:	42 db       	rcall	.-2428   	; 0x1c6 <pin_high>
     b42:	d7 01       	movw	r26, r14
     b44:	18 96       	adiw	r26, 0x08	; 8
     b46:	6c 91       	ld	r22, X
     b48:	18 97       	sbiw	r26, 0x08	; 8
     b4a:	15 96       	adiw	r26, 0x05	; 5
     b4c:	8d 91       	ld	r24, X+
     b4e:	9c 91       	ld	r25, X
     b50:	16 97       	sbiw	r26, 0x06	; 6
     b52:	45 db       	rcall	.-2422   	; 0x1de <pin_low>
	}else if(motor->motortype == 2){	//BASE MOTOR
     b54:	46 c0       	rjmp	.+140    	; 0xbe2 <move_abs+0x2fa>
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	09 f0       	breq	.+2      	; 0xb5c <move_abs+0x274>
		motor->dirpin1 = motor->pwm_value;
     b5a:	43 c0       	rjmp	.+134    	; 0xbe2 <move_abs+0x2fa>
     b5c:	f7 01       	movw	r30, r14
     b5e:	86 85       	ldd	r24, Z+14	; 0x0e
		motor->dirpin2 = 0;
     b60:	87 83       	std	Z+7, r24	; 0x07
		motor->pwm_value = ((abs(motor->pid.ctrl_signal)/motor->pid.critical_delta)*motor->max_speed);

	if(motor->motortype == 1) *motor->ocr = motor->pwm_value;

	if(motor->pid.ctrl_signal > MIN_POS_DELTA) fwd(motor, motor->portdirpin, motor->dirpin1, motor->dirpin2);
	else if(motor->pid.ctrl_signal < -MIN_POS_DELTA) bwd(motor, motor->portdirpin, motor->dirpin1, motor->dirpin2);
     b62:	10 86       	std	Z+8, r1	; 0x08
     b64:	3e c0       	rjmp	.+124    	; 0xbe2 <move_abs+0x2fa>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	40 e2       	ldi	r20, 0x20	; 32
     b6c:	51 ec       	ldi	r21, 0xC1	; 193
     b6e:	c5 01       	movw	r24, r10
     b70:	b4 01       	movw	r22, r8
     b72:	d0 d0       	rcall	.+416    	; 0xd14 <__cmpsf2>
		motor->dirpin2 = 0;
	}
}

inline void bwd(Motor *motor, volatile uint8_t *portdirpin, uint8_t dirpin1, uint8_t dirpin2){
	if(motor->motortype == 1){			//MICROMOTOR
     b74:	88 23       	and	r24, r24
     b76:	f4 f4       	brge	.+60     	; 0xbb4 <move_abs+0x2cc>
     b78:	d7 01       	movw	r26, r14
     b7a:	8c 91       	ld	r24, X
		pin_low(motor->portdirpin, motor->dirpin1);
     b7c:	81 30       	cpi	r24, 0x01	; 1
     b7e:	71 f4       	brne	.+28     	; 0xb9c <move_abs+0x2b4>
     b80:	17 96       	adiw	r26, 0x07	; 7
     b82:	6c 91       	ld	r22, X
     b84:	17 97       	sbiw	r26, 0x07	; 7
     b86:	15 96       	adiw	r26, 0x05	; 5
     b88:	8d 91       	ld	r24, X+
     b8a:	9c 91       	ld	r25, X
     b8c:	16 97       	sbiw	r26, 0x06	; 6
		pin_high(motor->portdirpin, motor->dirpin2);
     b8e:	27 db       	rcall	.-2482   	; 0x1de <pin_low>
     b90:	f7 01       	movw	r30, r14
     b92:	60 85       	ldd	r22, Z+8	; 0x08
     b94:	85 81       	ldd	r24, Z+5	; 0x05
     b96:	96 81       	ldd	r25, Z+6	; 0x06
     b98:	16 db       	rcall	.-2516   	; 0x1c6 <pin_high>
	}else if(motor->motortype == 2){	//BASE MOTOR
     b9a:	23 c0       	rjmp	.+70     	; 0xbe2 <move_abs+0x2fa>
     b9c:	82 30       	cpi	r24, 0x02	; 2
		motor->dirpin1 = 0;
     b9e:	09 f5       	brne	.+66     	; 0xbe2 <move_abs+0x2fa>
     ba0:	d7 01       	movw	r26, r14
     ba2:	17 96       	adiw	r26, 0x07	; 7
		motor->dirpin2 = motor->pwm_value;
     ba4:	1c 92       	st	X, r1
     ba6:	17 97       	sbiw	r26, 0x07	; 7
     ba8:	1e 96       	adiw	r26, 0x0e	; 14
     baa:	8c 91       	ld	r24, X
     bac:	1e 97       	sbiw	r26, 0x0e	; 14
     bae:	18 96       	adiw	r26, 0x08	; 8
	}
}

inline void stop(Motor *motor, volatile uint8_t *portdirpin, uint8_t dirpin1, uint8_t dirpin2){
	if(motor->motortype == 1){			//MICROMOTOR
     bb0:	8c 93       	st	X, r24
     bb2:	17 c0       	rjmp	.+46     	; 0xbe2 <move_abs+0x2fa>
     bb4:	f7 01       	movw	r30, r14
     bb6:	80 81       	ld	r24, Z
		pin_low(motor->portdirpin, motor->dirpin1);
     bb8:	81 30       	cpi	r24, 0x01	; 1
     bba:	71 f4       	brne	.+28     	; 0xbd8 <move_abs+0x2f0>
     bbc:	67 81       	ldd	r22, Z+7	; 0x07
     bbe:	85 81       	ldd	r24, Z+5	; 0x05
     bc0:	96 81       	ldd	r25, Z+6	; 0x06
		pin_low(motor->portdirpin, motor->dirpin2);
     bc2:	0d db       	rcall	.-2534   	; 0x1de <pin_low>
     bc4:	d7 01       	movw	r26, r14
     bc6:	18 96       	adiw	r26, 0x08	; 8
     bc8:	6c 91       	ld	r22, X
     bca:	18 97       	sbiw	r26, 0x08	; 8
     bcc:	15 96       	adiw	r26, 0x05	; 5
     bce:	8d 91       	ld	r24, X+
     bd0:	9c 91       	ld	r25, X
     bd2:	16 97       	sbiw	r26, 0x06	; 6
     bd4:	04 db       	rcall	.-2552   	; 0x1de <pin_low>
     bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <move_abs+0x2fa>
	}else if(motor->motortype == 2){	//BASE MOTOR
     bd8:	82 30       	cpi	r24, 0x02	; 2
     bda:	19 f4       	brne	.+6      	; 0xbe2 <move_abs+0x2fa>
		motor->dirpin1 = 0;
     bdc:	f7 01       	movw	r30, r14
     bde:	17 82       	std	Z+7, r1	; 0x07
		motor->dirpin2 = 0;
     be0:	10 86       	std	Z+8, r1	; 0x08
	if(motor->motortype == 1) *motor->ocr = motor->pwm_value;

	if(motor->pid.ctrl_signal > MIN_POS_DELTA) fwd(motor, motor->portdirpin, motor->dirpin1, motor->dirpin2);
	else if(motor->pid.ctrl_signal < -MIN_POS_DELTA) bwd(motor, motor->portdirpin, motor->dirpin1, motor->dirpin2);
	else stop(motor, motor->portdirpin, motor->dirpin1, motor->dirpin2);
     be2:	60 96       	adiw	r28, 0x10	; 16
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	bf 90       	pop	r11
     bfc:	af 90       	pop	r10
     bfe:	9f 90       	pop	r9
     c00:	8f 90       	pop	r8
     c02:	7f 90       	pop	r7
     c04:	6f 90       	pop	r6
     c06:	5f 90       	pop	r5
     c08:	4f 90       	pop	r4
     c0a:	08 95       	ret

00000c0c <USART0_init>:

#include "uart.h"

void USART0_init(void){
	//USART BAUD RATE SETUP
	UBRR0H = (unsigned char) (BRC >> 8);
     c0c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char) BRC;
     c10:	87 e6       	ldi	r24, 0x67	; 103
     c12:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	//RX TX ENABLE
	//UCSR0A = (1 << U2X0);
	UCSR0B = (1 << RXEN0)  | (1 << TXEN0) | (1 << RXCIE0);
     c16:	88 e9       	ldi	r24, 0x98	; 152
     c18:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     c1c:	86 e0       	ldi	r24, 0x06	; 6
     c1e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
     c22:	08 95       	ret

00000c24 <USART0_send>:
}

void USART0_send(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
     c24:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     c28:	95 ff       	sbrs	r25, 5
     c2a:	fc cf       	rjmp	.-8      	; 0xc24 <USART0_send>
	UDR0 = data;
     c2c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     c30:	08 95       	ret

00000c32 <USART0_send_string>:
}

void USART0_send_string(char *ptr){
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	ec 01       	movw	r28, r24
	while (*ptr) {
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <USART0_send_string+0xc>
		USART0_send(*ptr++);
     c3a:	21 96       	adiw	r28, 0x01	; 1
     c3c:	f3 df       	rcall	.-26     	; 0xc24 <USART0_send>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void USART0_send_string(char *ptr){
	while (*ptr) {
     c3e:	88 81       	ld	r24, Y
     c40:	81 11       	cpse	r24, r1
     c42:	fb cf       	rjmp	.-10     	; 0xc3a <USART0_send_string+0x8>
		USART0_send(*ptr++);
	}
}
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <__subsf3>:
     c4a:	50 58       	subi	r21, 0x80	; 128

00000c4c <__addsf3>:
     c4c:	bb 27       	eor	r27, r27
     c4e:	aa 27       	eor	r26, r26
     c50:	0e d0       	rcall	.+28     	; 0xc6e <__addsf3x>
     c52:	75 c1       	rjmp	.+746    	; 0xf3e <__fp_round>
     c54:	66 d1       	rcall	.+716    	; 0xf22 <__fp_pscA>
     c56:	30 f0       	brcs	.+12     	; 0xc64 <__addsf3+0x18>
     c58:	6b d1       	rcall	.+726    	; 0xf30 <__fp_pscB>
     c5a:	20 f0       	brcs	.+8      	; 0xc64 <__addsf3+0x18>
     c5c:	31 f4       	brne	.+12     	; 0xc6a <__addsf3+0x1e>
     c5e:	9f 3f       	cpi	r25, 0xFF	; 255
     c60:	11 f4       	brne	.+4      	; 0xc66 <__addsf3+0x1a>
     c62:	1e f4       	brtc	.+6      	; 0xc6a <__addsf3+0x1e>
     c64:	5b c1       	rjmp	.+694    	; 0xf1c <__fp_nan>
     c66:	0e f4       	brtc	.+2      	; 0xc6a <__addsf3+0x1e>
     c68:	e0 95       	com	r30
     c6a:	e7 fb       	bst	r30, 7
     c6c:	51 c1       	rjmp	.+674    	; 0xf10 <__fp_inf>

00000c6e <__addsf3x>:
     c6e:	e9 2f       	mov	r30, r25
     c70:	77 d1       	rcall	.+750    	; 0xf60 <__fp_split3>
     c72:	80 f3       	brcs	.-32     	; 0xc54 <__addsf3+0x8>
     c74:	ba 17       	cp	r27, r26
     c76:	62 07       	cpc	r22, r18
     c78:	73 07       	cpc	r23, r19
     c7a:	84 07       	cpc	r24, r20
     c7c:	95 07       	cpc	r25, r21
     c7e:	18 f0       	brcs	.+6      	; 0xc86 <__addsf3x+0x18>
     c80:	71 f4       	brne	.+28     	; 0xc9e <__addsf3x+0x30>
     c82:	9e f5       	brtc	.+102    	; 0xcea <__addsf3x+0x7c>
     c84:	8f c1       	rjmp	.+798    	; 0xfa4 <__fp_zero>
     c86:	0e f4       	brtc	.+2      	; 0xc8a <__addsf3x+0x1c>
     c88:	e0 95       	com	r30
     c8a:	0b 2e       	mov	r0, r27
     c8c:	ba 2f       	mov	r27, r26
     c8e:	a0 2d       	mov	r26, r0
     c90:	0b 01       	movw	r0, r22
     c92:	b9 01       	movw	r22, r18
     c94:	90 01       	movw	r18, r0
     c96:	0c 01       	movw	r0, r24
     c98:	ca 01       	movw	r24, r20
     c9a:	a0 01       	movw	r20, r0
     c9c:	11 24       	eor	r1, r1
     c9e:	ff 27       	eor	r31, r31
     ca0:	59 1b       	sub	r21, r25
     ca2:	99 f0       	breq	.+38     	; 0xcca <__addsf3x+0x5c>
     ca4:	59 3f       	cpi	r21, 0xF9	; 249
     ca6:	50 f4       	brcc	.+20     	; 0xcbc <__addsf3x+0x4e>
     ca8:	50 3e       	cpi	r21, 0xE0	; 224
     caa:	68 f1       	brcs	.+90     	; 0xd06 <__addsf3x+0x98>
     cac:	1a 16       	cp	r1, r26
     cae:	f0 40       	sbci	r31, 0x00	; 0
     cb0:	a2 2f       	mov	r26, r18
     cb2:	23 2f       	mov	r18, r19
     cb4:	34 2f       	mov	r19, r20
     cb6:	44 27       	eor	r20, r20
     cb8:	58 5f       	subi	r21, 0xF8	; 248
     cba:	f3 cf       	rjmp	.-26     	; 0xca2 <__addsf3x+0x34>
     cbc:	46 95       	lsr	r20
     cbe:	37 95       	ror	r19
     cc0:	27 95       	ror	r18
     cc2:	a7 95       	ror	r26
     cc4:	f0 40       	sbci	r31, 0x00	; 0
     cc6:	53 95       	inc	r21
     cc8:	c9 f7       	brne	.-14     	; 0xcbc <__addsf3x+0x4e>
     cca:	7e f4       	brtc	.+30     	; 0xcea <__addsf3x+0x7c>
     ccc:	1f 16       	cp	r1, r31
     cce:	ba 0b       	sbc	r27, r26
     cd0:	62 0b       	sbc	r22, r18
     cd2:	73 0b       	sbc	r23, r19
     cd4:	84 0b       	sbc	r24, r20
     cd6:	ba f0       	brmi	.+46     	; 0xd06 <__addsf3x+0x98>
     cd8:	91 50       	subi	r25, 0x01	; 1
     cda:	a1 f0       	breq	.+40     	; 0xd04 <__addsf3x+0x96>
     cdc:	ff 0f       	add	r31, r31
     cde:	bb 1f       	adc	r27, r27
     ce0:	66 1f       	adc	r22, r22
     ce2:	77 1f       	adc	r23, r23
     ce4:	88 1f       	adc	r24, r24
     ce6:	c2 f7       	brpl	.-16     	; 0xcd8 <__addsf3x+0x6a>
     ce8:	0e c0       	rjmp	.+28     	; 0xd06 <__addsf3x+0x98>
     cea:	ba 0f       	add	r27, r26
     cec:	62 1f       	adc	r22, r18
     cee:	73 1f       	adc	r23, r19
     cf0:	84 1f       	adc	r24, r20
     cf2:	48 f4       	brcc	.+18     	; 0xd06 <__addsf3x+0x98>
     cf4:	87 95       	ror	r24
     cf6:	77 95       	ror	r23
     cf8:	67 95       	ror	r22
     cfa:	b7 95       	ror	r27
     cfc:	f7 95       	ror	r31
     cfe:	9e 3f       	cpi	r25, 0xFE	; 254
     d00:	08 f0       	brcs	.+2      	; 0xd04 <__addsf3x+0x96>
     d02:	b3 cf       	rjmp	.-154    	; 0xc6a <__addsf3+0x1e>
     d04:	93 95       	inc	r25
     d06:	88 0f       	add	r24, r24
     d08:	08 f0       	brcs	.+2      	; 0xd0c <__addsf3x+0x9e>
     d0a:	99 27       	eor	r25, r25
     d0c:	ee 0f       	add	r30, r30
     d0e:	97 95       	ror	r25
     d10:	87 95       	ror	r24
     d12:	08 95       	ret

00000d14 <__cmpsf2>:
     d14:	d9 d0       	rcall	.+434    	; 0xec8 <__fp_cmp>
     d16:	08 f4       	brcc	.+2      	; 0xd1a <__cmpsf2+0x6>
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	08 95       	ret

00000d1c <__divsf3>:
     d1c:	0c d0       	rcall	.+24     	; 0xd36 <__divsf3x>
     d1e:	0f c1       	rjmp	.+542    	; 0xf3e <__fp_round>
     d20:	07 d1       	rcall	.+526    	; 0xf30 <__fp_pscB>
     d22:	40 f0       	brcs	.+16     	; 0xd34 <__divsf3+0x18>
     d24:	fe d0       	rcall	.+508    	; 0xf22 <__fp_pscA>
     d26:	30 f0       	brcs	.+12     	; 0xd34 <__divsf3+0x18>
     d28:	21 f4       	brne	.+8      	; 0xd32 <__divsf3+0x16>
     d2a:	5f 3f       	cpi	r21, 0xFF	; 255
     d2c:	19 f0       	breq	.+6      	; 0xd34 <__divsf3+0x18>
     d2e:	f0 c0       	rjmp	.+480    	; 0xf10 <__fp_inf>
     d30:	51 11       	cpse	r21, r1
     d32:	39 c1       	rjmp	.+626    	; 0xfa6 <__fp_szero>
     d34:	f3 c0       	rjmp	.+486    	; 0xf1c <__fp_nan>

00000d36 <__divsf3x>:
     d36:	14 d1       	rcall	.+552    	; 0xf60 <__fp_split3>
     d38:	98 f3       	brcs	.-26     	; 0xd20 <__divsf3+0x4>

00000d3a <__divsf3_pse>:
     d3a:	99 23       	and	r25, r25
     d3c:	c9 f3       	breq	.-14     	; 0xd30 <__divsf3+0x14>
     d3e:	55 23       	and	r21, r21
     d40:	b1 f3       	breq	.-20     	; 0xd2e <__divsf3+0x12>
     d42:	95 1b       	sub	r25, r21
     d44:	55 0b       	sbc	r21, r21
     d46:	bb 27       	eor	r27, r27
     d48:	aa 27       	eor	r26, r26
     d4a:	62 17       	cp	r22, r18
     d4c:	73 07       	cpc	r23, r19
     d4e:	84 07       	cpc	r24, r20
     d50:	38 f0       	brcs	.+14     	; 0xd60 <__divsf3_pse+0x26>
     d52:	9f 5f       	subi	r25, 0xFF	; 255
     d54:	5f 4f       	sbci	r21, 0xFF	; 255
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	44 1f       	adc	r20, r20
     d5c:	aa 1f       	adc	r26, r26
     d5e:	a9 f3       	breq	.-22     	; 0xd4a <__divsf3_pse+0x10>
     d60:	33 d0       	rcall	.+102    	; 0xdc8 <__divsf3_pse+0x8e>
     d62:	0e 2e       	mov	r0, r30
     d64:	3a f0       	brmi	.+14     	; 0xd74 <__divsf3_pse+0x3a>
     d66:	e0 e8       	ldi	r30, 0x80	; 128
     d68:	30 d0       	rcall	.+96     	; 0xdca <__divsf3_pse+0x90>
     d6a:	91 50       	subi	r25, 0x01	; 1
     d6c:	50 40       	sbci	r21, 0x00	; 0
     d6e:	e6 95       	lsr	r30
     d70:	00 1c       	adc	r0, r0
     d72:	ca f7       	brpl	.-14     	; 0xd66 <__divsf3_pse+0x2c>
     d74:	29 d0       	rcall	.+82     	; 0xdc8 <__divsf3_pse+0x8e>
     d76:	fe 2f       	mov	r31, r30
     d78:	27 d0       	rcall	.+78     	; 0xdc8 <__divsf3_pse+0x8e>
     d7a:	66 0f       	add	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 1f       	adc	r24, r24
     d80:	bb 1f       	adc	r27, r27
     d82:	26 17       	cp	r18, r22
     d84:	37 07       	cpc	r19, r23
     d86:	48 07       	cpc	r20, r24
     d88:	ab 07       	cpc	r26, r27
     d8a:	b0 e8       	ldi	r27, 0x80	; 128
     d8c:	09 f0       	breq	.+2      	; 0xd90 <__divsf3_pse+0x56>
     d8e:	bb 0b       	sbc	r27, r27
     d90:	80 2d       	mov	r24, r0
     d92:	bf 01       	movw	r22, r30
     d94:	ff 27       	eor	r31, r31
     d96:	93 58       	subi	r25, 0x83	; 131
     d98:	5f 4f       	sbci	r21, 0xFF	; 255
     d9a:	2a f0       	brmi	.+10     	; 0xda6 <__divsf3_pse+0x6c>
     d9c:	9e 3f       	cpi	r25, 0xFE	; 254
     d9e:	51 05       	cpc	r21, r1
     da0:	68 f0       	brcs	.+26     	; 0xdbc <__divsf3_pse+0x82>
     da2:	b6 c0       	rjmp	.+364    	; 0xf10 <__fp_inf>
     da4:	00 c1       	rjmp	.+512    	; 0xfa6 <__fp_szero>
     da6:	5f 3f       	cpi	r21, 0xFF	; 255
     da8:	ec f3       	brlt	.-6      	; 0xda4 <__divsf3_pse+0x6a>
     daa:	98 3e       	cpi	r25, 0xE8	; 232
     dac:	dc f3       	brlt	.-10     	; 0xda4 <__divsf3_pse+0x6a>
     dae:	86 95       	lsr	r24
     db0:	77 95       	ror	r23
     db2:	67 95       	ror	r22
     db4:	b7 95       	ror	r27
     db6:	f7 95       	ror	r31
     db8:	9f 5f       	subi	r25, 0xFF	; 255
     dba:	c9 f7       	brne	.-14     	; 0xdae <__divsf3_pse+0x74>
     dbc:	88 0f       	add	r24, r24
     dbe:	91 1d       	adc	r25, r1
     dc0:	96 95       	lsr	r25
     dc2:	87 95       	ror	r24
     dc4:	97 f9       	bld	r25, 7
     dc6:	08 95       	ret
     dc8:	e1 e0       	ldi	r30, 0x01	; 1
     dca:	66 0f       	add	r22, r22
     dcc:	77 1f       	adc	r23, r23
     dce:	88 1f       	adc	r24, r24
     dd0:	bb 1f       	adc	r27, r27
     dd2:	62 17       	cp	r22, r18
     dd4:	73 07       	cpc	r23, r19
     dd6:	84 07       	cpc	r24, r20
     dd8:	ba 07       	cpc	r27, r26
     dda:	20 f0       	brcs	.+8      	; 0xde4 <__divsf3_pse+0xaa>
     ddc:	62 1b       	sub	r22, r18
     dde:	73 0b       	sbc	r23, r19
     de0:	84 0b       	sbc	r24, r20
     de2:	ba 0b       	sbc	r27, r26
     de4:	ee 1f       	adc	r30, r30
     de6:	88 f7       	brcc	.-30     	; 0xdca <__divsf3_pse+0x90>
     de8:	e0 95       	com	r30
     dea:	08 95       	ret

00000dec <__fixsfsi>:
     dec:	04 d0       	rcall	.+8      	; 0xdf6 <__fixunssfsi>
     dee:	68 94       	set
     df0:	b1 11       	cpse	r27, r1
     df2:	d9 c0       	rjmp	.+434    	; 0xfa6 <__fp_szero>
     df4:	08 95       	ret

00000df6 <__fixunssfsi>:
     df6:	bc d0       	rcall	.+376    	; 0xf70 <__fp_splitA>
     df8:	88 f0       	brcs	.+34     	; 0xe1c <__fixunssfsi+0x26>
     dfa:	9f 57       	subi	r25, 0x7F	; 127
     dfc:	90 f0       	brcs	.+36     	; 0xe22 <__fixunssfsi+0x2c>
     dfe:	b9 2f       	mov	r27, r25
     e00:	99 27       	eor	r25, r25
     e02:	b7 51       	subi	r27, 0x17	; 23
     e04:	a0 f0       	brcs	.+40     	; 0xe2e <__fixunssfsi+0x38>
     e06:	d1 f0       	breq	.+52     	; 0xe3c <__fixunssfsi+0x46>
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	1a f0       	brmi	.+6      	; 0xe18 <__fixunssfsi+0x22>
     e12:	ba 95       	dec	r27
     e14:	c9 f7       	brne	.-14     	; 0xe08 <__fixunssfsi+0x12>
     e16:	12 c0       	rjmp	.+36     	; 0xe3c <__fixunssfsi+0x46>
     e18:	b1 30       	cpi	r27, 0x01	; 1
     e1a:	81 f0       	breq	.+32     	; 0xe3c <__fixunssfsi+0x46>
     e1c:	c3 d0       	rcall	.+390    	; 0xfa4 <__fp_zero>
     e1e:	b1 e0       	ldi	r27, 0x01	; 1
     e20:	08 95       	ret
     e22:	c0 c0       	rjmp	.+384    	; 0xfa4 <__fp_zero>
     e24:	67 2f       	mov	r22, r23
     e26:	78 2f       	mov	r23, r24
     e28:	88 27       	eor	r24, r24
     e2a:	b8 5f       	subi	r27, 0xF8	; 248
     e2c:	39 f0       	breq	.+14     	; 0xe3c <__fixunssfsi+0x46>
     e2e:	b9 3f       	cpi	r27, 0xF9	; 249
     e30:	cc f3       	brlt	.-14     	; 0xe24 <__fixunssfsi+0x2e>
     e32:	86 95       	lsr	r24
     e34:	77 95       	ror	r23
     e36:	67 95       	ror	r22
     e38:	b3 95       	inc	r27
     e3a:	d9 f7       	brne	.-10     	; 0xe32 <__fixunssfsi+0x3c>
     e3c:	3e f4       	brtc	.+14     	; 0xe4c <__fixunssfsi+0x56>
     e3e:	90 95       	com	r25
     e40:	80 95       	com	r24
     e42:	70 95       	com	r23
     e44:	61 95       	neg	r22
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	8f 4f       	sbci	r24, 0xFF	; 255
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	08 95       	ret

00000e4e <__floatunsisf>:
     e4e:	e8 94       	clt
     e50:	09 c0       	rjmp	.+18     	; 0xe64 <__floatsisf+0x12>

00000e52 <__floatsisf>:
     e52:	97 fb       	bst	r25, 7
     e54:	3e f4       	brtc	.+14     	; 0xe64 <__floatsisf+0x12>
     e56:	90 95       	com	r25
     e58:	80 95       	com	r24
     e5a:	70 95       	com	r23
     e5c:	61 95       	neg	r22
     e5e:	7f 4f       	sbci	r23, 0xFF	; 255
     e60:	8f 4f       	sbci	r24, 0xFF	; 255
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	99 23       	and	r25, r25
     e66:	a9 f0       	breq	.+42     	; 0xe92 <__floatsisf+0x40>
     e68:	f9 2f       	mov	r31, r25
     e6a:	96 e9       	ldi	r25, 0x96	; 150
     e6c:	bb 27       	eor	r27, r27
     e6e:	93 95       	inc	r25
     e70:	f6 95       	lsr	r31
     e72:	87 95       	ror	r24
     e74:	77 95       	ror	r23
     e76:	67 95       	ror	r22
     e78:	b7 95       	ror	r27
     e7a:	f1 11       	cpse	r31, r1
     e7c:	f8 cf       	rjmp	.-16     	; 0xe6e <__floatsisf+0x1c>
     e7e:	fa f4       	brpl	.+62     	; 0xebe <__floatsisf+0x6c>
     e80:	bb 0f       	add	r27, r27
     e82:	11 f4       	brne	.+4      	; 0xe88 <__floatsisf+0x36>
     e84:	60 ff       	sbrs	r22, 0
     e86:	1b c0       	rjmp	.+54     	; 0xebe <__floatsisf+0x6c>
     e88:	6f 5f       	subi	r22, 0xFF	; 255
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	16 c0       	rjmp	.+44     	; 0xebe <__floatsisf+0x6c>
     e92:	88 23       	and	r24, r24
     e94:	11 f0       	breq	.+4      	; 0xe9a <__floatsisf+0x48>
     e96:	96 e9       	ldi	r25, 0x96	; 150
     e98:	11 c0       	rjmp	.+34     	; 0xebc <__floatsisf+0x6a>
     e9a:	77 23       	and	r23, r23
     e9c:	21 f0       	breq	.+8      	; 0xea6 <__floatsisf+0x54>
     e9e:	9e e8       	ldi	r25, 0x8E	; 142
     ea0:	87 2f       	mov	r24, r23
     ea2:	76 2f       	mov	r23, r22
     ea4:	05 c0       	rjmp	.+10     	; 0xeb0 <__floatsisf+0x5e>
     ea6:	66 23       	and	r22, r22
     ea8:	71 f0       	breq	.+28     	; 0xec6 <__floatsisf+0x74>
     eaa:	96 e8       	ldi	r25, 0x86	; 134
     eac:	86 2f       	mov	r24, r22
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	2a f0       	brmi	.+10     	; 0xebe <__floatsisf+0x6c>
     eb4:	9a 95       	dec	r25
     eb6:	66 0f       	add	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	88 1f       	adc	r24, r24
     ebc:	da f7       	brpl	.-10     	; 0xeb4 <__floatsisf+0x62>
     ebe:	88 0f       	add	r24, r24
     ec0:	96 95       	lsr	r25
     ec2:	87 95       	ror	r24
     ec4:	97 f9       	bld	r25, 7
     ec6:	08 95       	ret

00000ec8 <__fp_cmp>:
     ec8:	99 0f       	add	r25, r25
     eca:	00 08       	sbc	r0, r0
     ecc:	55 0f       	add	r21, r21
     ece:	aa 0b       	sbc	r26, r26
     ed0:	e0 e8       	ldi	r30, 0x80	; 128
     ed2:	fe ef       	ldi	r31, 0xFE	; 254
     ed4:	16 16       	cp	r1, r22
     ed6:	17 06       	cpc	r1, r23
     ed8:	e8 07       	cpc	r30, r24
     eda:	f9 07       	cpc	r31, r25
     edc:	c0 f0       	brcs	.+48     	; 0xf0e <__fp_cmp+0x46>
     ede:	12 16       	cp	r1, r18
     ee0:	13 06       	cpc	r1, r19
     ee2:	e4 07       	cpc	r30, r20
     ee4:	f5 07       	cpc	r31, r21
     ee6:	98 f0       	brcs	.+38     	; 0xf0e <__fp_cmp+0x46>
     ee8:	62 1b       	sub	r22, r18
     eea:	73 0b       	sbc	r23, r19
     eec:	84 0b       	sbc	r24, r20
     eee:	95 0b       	sbc	r25, r21
     ef0:	39 f4       	brne	.+14     	; 0xf00 <__fp_cmp+0x38>
     ef2:	0a 26       	eor	r0, r26
     ef4:	61 f0       	breq	.+24     	; 0xf0e <__fp_cmp+0x46>
     ef6:	23 2b       	or	r18, r19
     ef8:	24 2b       	or	r18, r20
     efa:	25 2b       	or	r18, r21
     efc:	21 f4       	brne	.+8      	; 0xf06 <__fp_cmp+0x3e>
     efe:	08 95       	ret
     f00:	0a 26       	eor	r0, r26
     f02:	09 f4       	brne	.+2      	; 0xf06 <__fp_cmp+0x3e>
     f04:	a1 40       	sbci	r26, 0x01	; 1
     f06:	a6 95       	lsr	r26
     f08:	8f ef       	ldi	r24, 0xFF	; 255
     f0a:	81 1d       	adc	r24, r1
     f0c:	81 1d       	adc	r24, r1
     f0e:	08 95       	ret

00000f10 <__fp_inf>:
     f10:	97 f9       	bld	r25, 7
     f12:	9f 67       	ori	r25, 0x7F	; 127
     f14:	80 e8       	ldi	r24, 0x80	; 128
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	08 95       	ret

00000f1c <__fp_nan>:
     f1c:	9f ef       	ldi	r25, 0xFF	; 255
     f1e:	80 ec       	ldi	r24, 0xC0	; 192
     f20:	08 95       	ret

00000f22 <__fp_pscA>:
     f22:	00 24       	eor	r0, r0
     f24:	0a 94       	dec	r0
     f26:	16 16       	cp	r1, r22
     f28:	17 06       	cpc	r1, r23
     f2a:	18 06       	cpc	r1, r24
     f2c:	09 06       	cpc	r0, r25
     f2e:	08 95       	ret

00000f30 <__fp_pscB>:
     f30:	00 24       	eor	r0, r0
     f32:	0a 94       	dec	r0
     f34:	12 16       	cp	r1, r18
     f36:	13 06       	cpc	r1, r19
     f38:	14 06       	cpc	r1, r20
     f3a:	05 06       	cpc	r0, r21
     f3c:	08 95       	ret

00000f3e <__fp_round>:
     f3e:	09 2e       	mov	r0, r25
     f40:	03 94       	inc	r0
     f42:	00 0c       	add	r0, r0
     f44:	11 f4       	brne	.+4      	; 0xf4a <__fp_round+0xc>
     f46:	88 23       	and	r24, r24
     f48:	52 f0       	brmi	.+20     	; 0xf5e <__fp_round+0x20>
     f4a:	bb 0f       	add	r27, r27
     f4c:	40 f4       	brcc	.+16     	; 0xf5e <__fp_round+0x20>
     f4e:	bf 2b       	or	r27, r31
     f50:	11 f4       	brne	.+4      	; 0xf56 <__fp_round+0x18>
     f52:	60 ff       	sbrs	r22, 0
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <__fp_round+0x20>
     f56:	6f 5f       	subi	r22, 0xFF	; 255
     f58:	7f 4f       	sbci	r23, 0xFF	; 255
     f5a:	8f 4f       	sbci	r24, 0xFF	; 255
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	08 95       	ret

00000f60 <__fp_split3>:
     f60:	57 fd       	sbrc	r21, 7
     f62:	90 58       	subi	r25, 0x80	; 128
     f64:	44 0f       	add	r20, r20
     f66:	55 1f       	adc	r21, r21
     f68:	59 f0       	breq	.+22     	; 0xf80 <__fp_splitA+0x10>
     f6a:	5f 3f       	cpi	r21, 0xFF	; 255
     f6c:	71 f0       	breq	.+28     	; 0xf8a <__fp_splitA+0x1a>
     f6e:	47 95       	ror	r20

00000f70 <__fp_splitA>:
     f70:	88 0f       	add	r24, r24
     f72:	97 fb       	bst	r25, 7
     f74:	99 1f       	adc	r25, r25
     f76:	61 f0       	breq	.+24     	; 0xf90 <__fp_splitA+0x20>
     f78:	9f 3f       	cpi	r25, 0xFF	; 255
     f7a:	79 f0       	breq	.+30     	; 0xf9a <__fp_splitA+0x2a>
     f7c:	87 95       	ror	r24
     f7e:	08 95       	ret
     f80:	12 16       	cp	r1, r18
     f82:	13 06       	cpc	r1, r19
     f84:	14 06       	cpc	r1, r20
     f86:	55 1f       	adc	r21, r21
     f88:	f2 cf       	rjmp	.-28     	; 0xf6e <__fp_split3+0xe>
     f8a:	46 95       	lsr	r20
     f8c:	f1 df       	rcall	.-30     	; 0xf70 <__fp_splitA>
     f8e:	08 c0       	rjmp	.+16     	; 0xfa0 <__fp_splitA+0x30>
     f90:	16 16       	cp	r1, r22
     f92:	17 06       	cpc	r1, r23
     f94:	18 06       	cpc	r1, r24
     f96:	99 1f       	adc	r25, r25
     f98:	f1 cf       	rjmp	.-30     	; 0xf7c <__fp_splitA+0xc>
     f9a:	86 95       	lsr	r24
     f9c:	71 05       	cpc	r23, r1
     f9e:	61 05       	cpc	r22, r1
     fa0:	08 94       	sec
     fa2:	08 95       	ret

00000fa4 <__fp_zero>:
     fa4:	e8 94       	clt

00000fa6 <__fp_szero>:
     fa6:	bb 27       	eor	r27, r27
     fa8:	66 27       	eor	r22, r22
     faa:	77 27       	eor	r23, r23
     fac:	cb 01       	movw	r24, r22
     fae:	97 f9       	bld	r25, 7
     fb0:	08 95       	ret

00000fb2 <__gesf2>:
     fb2:	8a df       	rcall	.-236    	; 0xec8 <__fp_cmp>
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <__gesf2+0x6>
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	08 95       	ret

00000fba <__mulsf3>:
     fba:	0b d0       	rcall	.+22     	; 0xfd2 <__mulsf3x>
     fbc:	c0 cf       	rjmp	.-128    	; 0xf3e <__fp_round>
     fbe:	b1 df       	rcall	.-158    	; 0xf22 <__fp_pscA>
     fc0:	28 f0       	brcs	.+10     	; 0xfcc <__mulsf3+0x12>
     fc2:	b6 df       	rcall	.-148    	; 0xf30 <__fp_pscB>
     fc4:	18 f0       	brcs	.+6      	; 0xfcc <__mulsf3+0x12>
     fc6:	95 23       	and	r25, r21
     fc8:	09 f0       	breq	.+2      	; 0xfcc <__mulsf3+0x12>
     fca:	a2 cf       	rjmp	.-188    	; 0xf10 <__fp_inf>
     fcc:	a7 cf       	rjmp	.-178    	; 0xf1c <__fp_nan>
     fce:	11 24       	eor	r1, r1
     fd0:	ea cf       	rjmp	.-44     	; 0xfa6 <__fp_szero>

00000fd2 <__mulsf3x>:
     fd2:	c6 df       	rcall	.-116    	; 0xf60 <__fp_split3>
     fd4:	a0 f3       	brcs	.-24     	; 0xfbe <__mulsf3+0x4>

00000fd6 <__mulsf3_pse>:
     fd6:	95 9f       	mul	r25, r21
     fd8:	d1 f3       	breq	.-12     	; 0xfce <__mulsf3+0x14>
     fda:	95 0f       	add	r25, r21
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	55 1f       	adc	r21, r21
     fe0:	62 9f       	mul	r22, r18
     fe2:	f0 01       	movw	r30, r0
     fe4:	72 9f       	mul	r23, r18
     fe6:	bb 27       	eor	r27, r27
     fe8:	f0 0d       	add	r31, r0
     fea:	b1 1d       	adc	r27, r1
     fec:	63 9f       	mul	r22, r19
     fee:	aa 27       	eor	r26, r26
     ff0:	f0 0d       	add	r31, r0
     ff2:	b1 1d       	adc	r27, r1
     ff4:	aa 1f       	adc	r26, r26
     ff6:	64 9f       	mul	r22, r20
     ff8:	66 27       	eor	r22, r22
     ffa:	b0 0d       	add	r27, r0
     ffc:	a1 1d       	adc	r26, r1
     ffe:	66 1f       	adc	r22, r22
    1000:	82 9f       	mul	r24, r18
    1002:	22 27       	eor	r18, r18
    1004:	b0 0d       	add	r27, r0
    1006:	a1 1d       	adc	r26, r1
    1008:	62 1f       	adc	r22, r18
    100a:	73 9f       	mul	r23, r19
    100c:	b0 0d       	add	r27, r0
    100e:	a1 1d       	adc	r26, r1
    1010:	62 1f       	adc	r22, r18
    1012:	83 9f       	mul	r24, r19
    1014:	a0 0d       	add	r26, r0
    1016:	61 1d       	adc	r22, r1
    1018:	22 1f       	adc	r18, r18
    101a:	74 9f       	mul	r23, r20
    101c:	33 27       	eor	r19, r19
    101e:	a0 0d       	add	r26, r0
    1020:	61 1d       	adc	r22, r1
    1022:	23 1f       	adc	r18, r19
    1024:	84 9f       	mul	r24, r20
    1026:	60 0d       	add	r22, r0
    1028:	21 1d       	adc	r18, r1
    102a:	82 2f       	mov	r24, r18
    102c:	76 2f       	mov	r23, r22
    102e:	6a 2f       	mov	r22, r26
    1030:	11 24       	eor	r1, r1
    1032:	9f 57       	subi	r25, 0x7F	; 127
    1034:	50 40       	sbci	r21, 0x00	; 0
    1036:	8a f0       	brmi	.+34     	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    1038:	e1 f0       	breq	.+56     	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
    103a:	88 23       	and	r24, r24
    103c:	4a f0       	brmi	.+18     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    103e:	ee 0f       	add	r30, r30
    1040:	ff 1f       	adc	r31, r31
    1042:	bb 1f       	adc	r27, r27
    1044:	66 1f       	adc	r22, r22
    1046:	77 1f       	adc	r23, r23
    1048:	88 1f       	adc	r24, r24
    104a:	91 50       	subi	r25, 0x01	; 1
    104c:	50 40       	sbci	r21, 0x00	; 0
    104e:	a9 f7       	brne	.-22     	; 0x103a <__EEPROM_REGION_LENGTH__+0x3a>
    1050:	9e 3f       	cpi	r25, 0xFE	; 254
    1052:	51 05       	cpc	r21, r1
    1054:	70 f0       	brcs	.+28     	; 0x1072 <__EEPROM_REGION_LENGTH__+0x72>
    1056:	5c cf       	rjmp	.-328    	; 0xf10 <__fp_inf>
    1058:	a6 cf       	rjmp	.-180    	; 0xfa6 <__fp_szero>
    105a:	5f 3f       	cpi	r21, 0xFF	; 255
    105c:	ec f3       	brlt	.-6      	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    105e:	98 3e       	cpi	r25, 0xE8	; 232
    1060:	dc f3       	brlt	.-10     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    1062:	86 95       	lsr	r24
    1064:	77 95       	ror	r23
    1066:	67 95       	ror	r22
    1068:	b7 95       	ror	r27
    106a:	f7 95       	ror	r31
    106c:	e7 95       	ror	r30
    106e:	9f 5f       	subi	r25, 0xFF	; 255
    1070:	c1 f7       	brne	.-16     	; 0x1062 <__EEPROM_REGION_LENGTH__+0x62>
    1072:	fe 2b       	or	r31, r30
    1074:	88 0f       	add	r24, r24
    1076:	91 1d       	adc	r25, r1
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	97 f9       	bld	r25, 7
    107e:	08 95       	ret

00001080 <__mulsi3>:
    1080:	db 01       	movw	r26, r22
    1082:	8f 93       	push	r24
    1084:	9f 93       	push	r25
    1086:	2d d0       	rcall	.+90     	; 0x10e2 <__muluhisi3>
    1088:	bf 91       	pop	r27
    108a:	af 91       	pop	r26
    108c:	a2 9f       	mul	r26, r18
    108e:	80 0d       	add	r24, r0
    1090:	91 1d       	adc	r25, r1
    1092:	a3 9f       	mul	r26, r19
    1094:	90 0d       	add	r25, r0
    1096:	b2 9f       	mul	r27, r18
    1098:	90 0d       	add	r25, r0
    109a:	11 24       	eor	r1, r1
    109c:	08 95       	ret

0000109e <__udivmodsi4>:
    109e:	a1 e2       	ldi	r26, 0x21	; 33
    10a0:	1a 2e       	mov	r1, r26
    10a2:	aa 1b       	sub	r26, r26
    10a4:	bb 1b       	sub	r27, r27
    10a6:	fd 01       	movw	r30, r26
    10a8:	0d c0       	rjmp	.+26     	; 0x10c4 <__udivmodsi4_ep>

000010aa <__udivmodsi4_loop>:
    10aa:	aa 1f       	adc	r26, r26
    10ac:	bb 1f       	adc	r27, r27
    10ae:	ee 1f       	adc	r30, r30
    10b0:	ff 1f       	adc	r31, r31
    10b2:	a2 17       	cp	r26, r18
    10b4:	b3 07       	cpc	r27, r19
    10b6:	e4 07       	cpc	r30, r20
    10b8:	f5 07       	cpc	r31, r21
    10ba:	20 f0       	brcs	.+8      	; 0x10c4 <__udivmodsi4_ep>
    10bc:	a2 1b       	sub	r26, r18
    10be:	b3 0b       	sbc	r27, r19
    10c0:	e4 0b       	sbc	r30, r20
    10c2:	f5 0b       	sbc	r31, r21

000010c4 <__udivmodsi4_ep>:
    10c4:	66 1f       	adc	r22, r22
    10c6:	77 1f       	adc	r23, r23
    10c8:	88 1f       	adc	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	1a 94       	dec	r1
    10ce:	69 f7       	brne	.-38     	; 0x10aa <__udivmodsi4_loop>
    10d0:	60 95       	com	r22
    10d2:	70 95       	com	r23
    10d4:	80 95       	com	r24
    10d6:	90 95       	com	r25
    10d8:	9b 01       	movw	r18, r22
    10da:	ac 01       	movw	r20, r24
    10dc:	bd 01       	movw	r22, r26
    10de:	cf 01       	movw	r24, r30
    10e0:	08 95       	ret

000010e2 <__muluhisi3>:
    10e2:	15 d0       	rcall	.+42     	; 0x110e <__umulhisi3>
    10e4:	a5 9f       	mul	r26, r21
    10e6:	90 0d       	add	r25, r0
    10e8:	b4 9f       	mul	r27, r20
    10ea:	90 0d       	add	r25, r0
    10ec:	a4 9f       	mul	r26, r20
    10ee:	80 0d       	add	r24, r0
    10f0:	91 1d       	adc	r25, r1
    10f2:	11 24       	eor	r1, r1
    10f4:	08 95       	ret

000010f6 <__adddi3_s8>:
    10f6:	00 24       	eor	r0, r0
    10f8:	a7 fd       	sbrc	r26, 7
    10fa:	00 94       	com	r0
    10fc:	2a 0f       	add	r18, r26
    10fe:	30 1d       	adc	r19, r0
    1100:	40 1d       	adc	r20, r0
    1102:	50 1d       	adc	r21, r0
    1104:	60 1d       	adc	r22, r0
    1106:	70 1d       	adc	r23, r0
    1108:	80 1d       	adc	r24, r0
    110a:	90 1d       	adc	r25, r0
    110c:	08 95       	ret

0000110e <__umulhisi3>:
    110e:	a2 9f       	mul	r26, r18
    1110:	b0 01       	movw	r22, r0
    1112:	b3 9f       	mul	r27, r19
    1114:	c0 01       	movw	r24, r0
    1116:	a3 9f       	mul	r26, r19
    1118:	70 0d       	add	r23, r0
    111a:	81 1d       	adc	r24, r1
    111c:	11 24       	eor	r1, r1
    111e:	91 1d       	adc	r25, r1
    1120:	b2 9f       	mul	r27, r18
    1122:	70 0d       	add	r23, r0
    1124:	81 1d       	adc	r24, r1
    1126:	11 24       	eor	r1, r1
    1128:	91 1d       	adc	r25, r1
    112a:	08 95       	ret

0000112c <strcmp>:
    112c:	fb 01       	movw	r30, r22
    112e:	dc 01       	movw	r26, r24
    1130:	8d 91       	ld	r24, X+
    1132:	01 90       	ld	r0, Z+
    1134:	80 19       	sub	r24, r0
    1136:	01 10       	cpse	r0, r1
    1138:	d9 f3       	breq	.-10     	; 0x1130 <strcmp+0x4>
    113a:	99 0b       	sbc	r25, r25
    113c:	08 95       	ret

0000113e <sprintf>:
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	2e 97       	sbiw	r28, 0x0e	; 14
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	0e 89       	ldd	r16, Y+22	; 0x16
    1158:	1f 89       	ldd	r17, Y+23	; 0x17
    115a:	86 e0       	ldi	r24, 0x06	; 6
    115c:	8c 83       	std	Y+4, r24	; 0x04
    115e:	1a 83       	std	Y+2, r17	; 0x02
    1160:	09 83       	std	Y+1, r16	; 0x01
    1162:	8f ef       	ldi	r24, 0xFF	; 255
    1164:	9f e7       	ldi	r25, 0x7F	; 127
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
    116a:	ae 01       	movw	r20, r28
    116c:	46 5e       	subi	r20, 0xE6	; 230
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	68 8d       	ldd	r22, Y+24	; 0x18
    1172:	79 8d       	ldd	r23, Y+25	; 0x19
    1174:	ce 01       	movw	r24, r28
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	31 d0       	rcall	.+98     	; 0x11dc <vfprintf>
    117a:	ef 81       	ldd	r30, Y+7	; 0x07
    117c:	f8 85       	ldd	r31, Y+8	; 0x08
    117e:	e0 0f       	add	r30, r16
    1180:	f1 1f       	adc	r31, r17
    1182:	10 82       	st	Z, r1
    1184:	2e 96       	adiw	r28, 0x0e	; 14
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	cd bf       	out	0x3d, r28	; 61
    1190:	df 91       	pop	r29
    1192:	cf 91       	pop	r28
    1194:	1f 91       	pop	r17
    1196:	0f 91       	pop	r16
    1198:	08 95       	ret

0000119a <sscanf>:
    119a:	cf 93       	push	r28
    119c:	df 93       	push	r29
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	2e 97       	sbiw	r28, 0x0e	; 14
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	85 e0       	ldi	r24, 0x05	; 5
    11b0:	8c 83       	std	Y+4, r24	; 0x04
    11b2:	8c 89       	ldd	r24, Y+20	; 0x14
    11b4:	9d 89       	ldd	r25, Y+21	; 0x15
    11b6:	9a 83       	std	Y+2, r25	; 0x02
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	ae 01       	movw	r20, r28
    11bc:	48 5e       	subi	r20, 0xE8	; 232
    11be:	5f 4f       	sbci	r21, 0xFF	; 255
    11c0:	6e 89       	ldd	r22, Y+22	; 0x16
    11c2:	7f 89       	ldd	r23, Y+23	; 0x17
    11c4:	ce 01       	movw	r24, r28
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	b8 d3       	rcall	.+1904   	; 0x193a <vfscanf>
    11ca:	2e 96       	adiw	r28, 0x0e	; 14
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	08 95       	ret

000011dc <vfprintf>:
    11dc:	2f 92       	push	r2
    11de:	3f 92       	push	r3
    11e0:	4f 92       	push	r4
    11e2:	5f 92       	push	r5
    11e4:	6f 92       	push	r6
    11e6:	7f 92       	push	r7
    11e8:	8f 92       	push	r8
    11ea:	9f 92       	push	r9
    11ec:	af 92       	push	r10
    11ee:	bf 92       	push	r11
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	2b 97       	sbiw	r28, 0x0b	; 11
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	6c 01       	movw	r12, r24
    1212:	7b 01       	movw	r14, r22
    1214:	8a 01       	movw	r16, r20
    1216:	fc 01       	movw	r30, r24
    1218:	17 82       	std	Z+7, r1	; 0x07
    121a:	16 82       	std	Z+6, r1	; 0x06
    121c:	83 81       	ldd	r24, Z+3	; 0x03
    121e:	81 ff       	sbrs	r24, 1
    1220:	bf c1       	rjmp	.+894    	; 0x15a0 <vfprintf+0x3c4>
    1222:	ce 01       	movw	r24, r28
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	3c 01       	movw	r6, r24
    1228:	f6 01       	movw	r30, r12
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	f7 01       	movw	r30, r14
    122e:	93 fd       	sbrc	r25, 3
    1230:	85 91       	lpm	r24, Z+
    1232:	93 ff       	sbrs	r25, 3
    1234:	81 91       	ld	r24, Z+
    1236:	7f 01       	movw	r14, r30
    1238:	88 23       	and	r24, r24
    123a:	09 f4       	brne	.+2      	; 0x123e <vfprintf+0x62>
    123c:	ad c1       	rjmp	.+858    	; 0x1598 <vfprintf+0x3bc>
    123e:	85 32       	cpi	r24, 0x25	; 37
    1240:	39 f4       	brne	.+14     	; 0x1250 <vfprintf+0x74>
    1242:	93 fd       	sbrc	r25, 3
    1244:	85 91       	lpm	r24, Z+
    1246:	93 ff       	sbrs	r25, 3
    1248:	81 91       	ld	r24, Z+
    124a:	7f 01       	movw	r14, r30
    124c:	85 32       	cpi	r24, 0x25	; 37
    124e:	21 f4       	brne	.+8      	; 0x1258 <vfprintf+0x7c>
    1250:	b6 01       	movw	r22, r12
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	f0 d4       	rcall	.+2528   	; 0x1c36 <fputc>
    1256:	e8 cf       	rjmp	.-48     	; 0x1228 <vfprintf+0x4c>
    1258:	91 2c       	mov	r9, r1
    125a:	21 2c       	mov	r2, r1
    125c:	31 2c       	mov	r3, r1
    125e:	ff e1       	ldi	r31, 0x1F	; 31
    1260:	f3 15       	cp	r31, r3
    1262:	d8 f0       	brcs	.+54     	; 0x129a <vfprintf+0xbe>
    1264:	8b 32       	cpi	r24, 0x2B	; 43
    1266:	79 f0       	breq	.+30     	; 0x1286 <vfprintf+0xaa>
    1268:	38 f4       	brcc	.+14     	; 0x1278 <vfprintf+0x9c>
    126a:	80 32       	cpi	r24, 0x20	; 32
    126c:	79 f0       	breq	.+30     	; 0x128c <vfprintf+0xb0>
    126e:	83 32       	cpi	r24, 0x23	; 35
    1270:	a1 f4       	brne	.+40     	; 0x129a <vfprintf+0xbe>
    1272:	23 2d       	mov	r18, r3
    1274:	20 61       	ori	r18, 0x10	; 16
    1276:	1d c0       	rjmp	.+58     	; 0x12b2 <vfprintf+0xd6>
    1278:	8d 32       	cpi	r24, 0x2D	; 45
    127a:	61 f0       	breq	.+24     	; 0x1294 <vfprintf+0xb8>
    127c:	80 33       	cpi	r24, 0x30	; 48
    127e:	69 f4       	brne	.+26     	; 0x129a <vfprintf+0xbe>
    1280:	23 2d       	mov	r18, r3
    1282:	21 60       	ori	r18, 0x01	; 1
    1284:	16 c0       	rjmp	.+44     	; 0x12b2 <vfprintf+0xd6>
    1286:	83 2d       	mov	r24, r3
    1288:	82 60       	ori	r24, 0x02	; 2
    128a:	38 2e       	mov	r3, r24
    128c:	e3 2d       	mov	r30, r3
    128e:	e4 60       	ori	r30, 0x04	; 4
    1290:	3e 2e       	mov	r3, r30
    1292:	2a c0       	rjmp	.+84     	; 0x12e8 <vfprintf+0x10c>
    1294:	f3 2d       	mov	r31, r3
    1296:	f8 60       	ori	r31, 0x08	; 8
    1298:	1d c0       	rjmp	.+58     	; 0x12d4 <vfprintf+0xf8>
    129a:	37 fc       	sbrc	r3, 7
    129c:	2d c0       	rjmp	.+90     	; 0x12f8 <vfprintf+0x11c>
    129e:	20 ed       	ldi	r18, 0xD0	; 208
    12a0:	28 0f       	add	r18, r24
    12a2:	2a 30       	cpi	r18, 0x0A	; 10
    12a4:	40 f0       	brcs	.+16     	; 0x12b6 <vfprintf+0xda>
    12a6:	8e 32       	cpi	r24, 0x2E	; 46
    12a8:	b9 f4       	brne	.+46     	; 0x12d8 <vfprintf+0xfc>
    12aa:	36 fc       	sbrc	r3, 6
    12ac:	75 c1       	rjmp	.+746    	; 0x1598 <vfprintf+0x3bc>
    12ae:	23 2d       	mov	r18, r3
    12b0:	20 64       	ori	r18, 0x40	; 64
    12b2:	32 2e       	mov	r3, r18
    12b4:	19 c0       	rjmp	.+50     	; 0x12e8 <vfprintf+0x10c>
    12b6:	36 fe       	sbrs	r3, 6
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <vfprintf+0xea>
    12ba:	8a e0       	ldi	r24, 0x0A	; 10
    12bc:	98 9e       	mul	r9, r24
    12be:	20 0d       	add	r18, r0
    12c0:	11 24       	eor	r1, r1
    12c2:	92 2e       	mov	r9, r18
    12c4:	11 c0       	rjmp	.+34     	; 0x12e8 <vfprintf+0x10c>
    12c6:	ea e0       	ldi	r30, 0x0A	; 10
    12c8:	2e 9e       	mul	r2, r30
    12ca:	20 0d       	add	r18, r0
    12cc:	11 24       	eor	r1, r1
    12ce:	22 2e       	mov	r2, r18
    12d0:	f3 2d       	mov	r31, r3
    12d2:	f0 62       	ori	r31, 0x20	; 32
    12d4:	3f 2e       	mov	r3, r31
    12d6:	08 c0       	rjmp	.+16     	; 0x12e8 <vfprintf+0x10c>
    12d8:	8c 36       	cpi	r24, 0x6C	; 108
    12da:	21 f4       	brne	.+8      	; 0x12e4 <vfprintf+0x108>
    12dc:	83 2d       	mov	r24, r3
    12de:	80 68       	ori	r24, 0x80	; 128
    12e0:	38 2e       	mov	r3, r24
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <vfprintf+0x10c>
    12e4:	88 36       	cpi	r24, 0x68	; 104
    12e6:	41 f4       	brne	.+16     	; 0x12f8 <vfprintf+0x11c>
    12e8:	f7 01       	movw	r30, r14
    12ea:	93 fd       	sbrc	r25, 3
    12ec:	85 91       	lpm	r24, Z+
    12ee:	93 ff       	sbrs	r25, 3
    12f0:	81 91       	ld	r24, Z+
    12f2:	7f 01       	movw	r14, r30
    12f4:	81 11       	cpse	r24, r1
    12f6:	b3 cf       	rjmp	.-154    	; 0x125e <vfprintf+0x82>
    12f8:	98 2f       	mov	r25, r24
    12fa:	9f 7d       	andi	r25, 0xDF	; 223
    12fc:	95 54       	subi	r25, 0x45	; 69
    12fe:	93 30       	cpi	r25, 0x03	; 3
    1300:	28 f4       	brcc	.+10     	; 0x130c <vfprintf+0x130>
    1302:	0c 5f       	subi	r16, 0xFC	; 252
    1304:	1f 4f       	sbci	r17, 0xFF	; 255
    1306:	9f e3       	ldi	r25, 0x3F	; 63
    1308:	99 83       	std	Y+1, r25	; 0x01
    130a:	0d c0       	rjmp	.+26     	; 0x1326 <vfprintf+0x14a>
    130c:	83 36       	cpi	r24, 0x63	; 99
    130e:	31 f0       	breq	.+12     	; 0x131c <vfprintf+0x140>
    1310:	83 37       	cpi	r24, 0x73	; 115
    1312:	71 f0       	breq	.+28     	; 0x1330 <vfprintf+0x154>
    1314:	83 35       	cpi	r24, 0x53	; 83
    1316:	09 f0       	breq	.+2      	; 0x131a <vfprintf+0x13e>
    1318:	55 c0       	rjmp	.+170    	; 0x13c4 <vfprintf+0x1e8>
    131a:	20 c0       	rjmp	.+64     	; 0x135c <vfprintf+0x180>
    131c:	f8 01       	movw	r30, r16
    131e:	80 81       	ld	r24, Z
    1320:	89 83       	std	Y+1, r24	; 0x01
    1322:	0e 5f       	subi	r16, 0xFE	; 254
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	88 24       	eor	r8, r8
    1328:	83 94       	inc	r8
    132a:	91 2c       	mov	r9, r1
    132c:	53 01       	movw	r10, r6
    132e:	12 c0       	rjmp	.+36     	; 0x1354 <vfprintf+0x178>
    1330:	28 01       	movw	r4, r16
    1332:	f2 e0       	ldi	r31, 0x02	; 2
    1334:	4f 0e       	add	r4, r31
    1336:	51 1c       	adc	r5, r1
    1338:	f8 01       	movw	r30, r16
    133a:	a0 80       	ld	r10, Z
    133c:	b1 80       	ldd	r11, Z+1	; 0x01
    133e:	36 fe       	sbrs	r3, 6
    1340:	03 c0       	rjmp	.+6      	; 0x1348 <vfprintf+0x16c>
    1342:	69 2d       	mov	r22, r9
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	02 c0       	rjmp	.+4      	; 0x134c <vfprintf+0x170>
    1348:	6f ef       	ldi	r22, 0xFF	; 255
    134a:	7f ef       	ldi	r23, 0xFF	; 255
    134c:	c5 01       	movw	r24, r10
    134e:	2a d4       	rcall	.+2132   	; 0x1ba4 <strnlen>
    1350:	4c 01       	movw	r8, r24
    1352:	82 01       	movw	r16, r4
    1354:	f3 2d       	mov	r31, r3
    1356:	ff 77       	andi	r31, 0x7F	; 127
    1358:	3f 2e       	mov	r3, r31
    135a:	15 c0       	rjmp	.+42     	; 0x1386 <vfprintf+0x1aa>
    135c:	28 01       	movw	r4, r16
    135e:	22 e0       	ldi	r18, 0x02	; 2
    1360:	42 0e       	add	r4, r18
    1362:	51 1c       	adc	r5, r1
    1364:	f8 01       	movw	r30, r16
    1366:	a0 80       	ld	r10, Z
    1368:	b1 80       	ldd	r11, Z+1	; 0x01
    136a:	36 fe       	sbrs	r3, 6
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <vfprintf+0x198>
    136e:	69 2d       	mov	r22, r9
    1370:	70 e0       	ldi	r23, 0x00	; 0
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <vfprintf+0x19c>
    1374:	6f ef       	ldi	r22, 0xFF	; 255
    1376:	7f ef       	ldi	r23, 0xFF	; 255
    1378:	c5 01       	movw	r24, r10
    137a:	09 d4       	rcall	.+2066   	; 0x1b8e <strnlen_P>
    137c:	4c 01       	movw	r8, r24
    137e:	f3 2d       	mov	r31, r3
    1380:	f0 68       	ori	r31, 0x80	; 128
    1382:	3f 2e       	mov	r3, r31
    1384:	82 01       	movw	r16, r4
    1386:	33 fc       	sbrc	r3, 3
    1388:	19 c0       	rjmp	.+50     	; 0x13bc <vfprintf+0x1e0>
    138a:	82 2d       	mov	r24, r2
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	88 16       	cp	r8, r24
    1390:	99 06       	cpc	r9, r25
    1392:	a0 f4       	brcc	.+40     	; 0x13bc <vfprintf+0x1e0>
    1394:	b6 01       	movw	r22, r12
    1396:	80 e2       	ldi	r24, 0x20	; 32
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	4d d4       	rcall	.+2202   	; 0x1c36 <fputc>
    139c:	2a 94       	dec	r2
    139e:	f5 cf       	rjmp	.-22     	; 0x138a <vfprintf+0x1ae>
    13a0:	f5 01       	movw	r30, r10
    13a2:	37 fc       	sbrc	r3, 7
    13a4:	85 91       	lpm	r24, Z+
    13a6:	37 fe       	sbrs	r3, 7
    13a8:	81 91       	ld	r24, Z+
    13aa:	5f 01       	movw	r10, r30
    13ac:	b6 01       	movw	r22, r12
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	42 d4       	rcall	.+2180   	; 0x1c36 <fputc>
    13b2:	21 10       	cpse	r2, r1
    13b4:	2a 94       	dec	r2
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	82 1a       	sub	r8, r18
    13ba:	91 08       	sbc	r9, r1
    13bc:	81 14       	cp	r8, r1
    13be:	91 04       	cpc	r9, r1
    13c0:	79 f7       	brne	.-34     	; 0x13a0 <vfprintf+0x1c4>
    13c2:	e1 c0       	rjmp	.+450    	; 0x1586 <vfprintf+0x3aa>
    13c4:	84 36       	cpi	r24, 0x64	; 100
    13c6:	11 f0       	breq	.+4      	; 0x13cc <vfprintf+0x1f0>
    13c8:	89 36       	cpi	r24, 0x69	; 105
    13ca:	39 f5       	brne	.+78     	; 0x141a <vfprintf+0x23e>
    13cc:	f8 01       	movw	r30, r16
    13ce:	37 fe       	sbrs	r3, 7
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <vfprintf+0x204>
    13d2:	60 81       	ld	r22, Z
    13d4:	71 81       	ldd	r23, Z+1	; 0x01
    13d6:	82 81       	ldd	r24, Z+2	; 0x02
    13d8:	93 81       	ldd	r25, Z+3	; 0x03
    13da:	0c 5f       	subi	r16, 0xFC	; 252
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <vfprintf+0x214>
    13e0:	60 81       	ld	r22, Z
    13e2:	71 81       	ldd	r23, Z+1	; 0x01
    13e4:	07 2e       	mov	r0, r23
    13e6:	00 0c       	add	r0, r0
    13e8:	88 0b       	sbc	r24, r24
    13ea:	99 0b       	sbc	r25, r25
    13ec:	0e 5f       	subi	r16, 0xFE	; 254
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	f3 2d       	mov	r31, r3
    13f2:	ff 76       	andi	r31, 0x6F	; 111
    13f4:	3f 2e       	mov	r3, r31
    13f6:	97 ff       	sbrs	r25, 7
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <vfprintf+0x230>
    13fa:	90 95       	com	r25
    13fc:	80 95       	com	r24
    13fe:	70 95       	com	r23
    1400:	61 95       	neg	r22
    1402:	7f 4f       	sbci	r23, 0xFF	; 255
    1404:	8f 4f       	sbci	r24, 0xFF	; 255
    1406:	9f 4f       	sbci	r25, 0xFF	; 255
    1408:	f0 68       	ori	r31, 0x80	; 128
    140a:	3f 2e       	mov	r3, r31
    140c:	2a e0       	ldi	r18, 0x0A	; 10
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	a3 01       	movw	r20, r6
    1412:	66 d4       	rcall	.+2252   	; 0x1ce0 <__ultoa_invert>
    1414:	88 2e       	mov	r8, r24
    1416:	86 18       	sub	r8, r6
    1418:	44 c0       	rjmp	.+136    	; 0x14a2 <vfprintf+0x2c6>
    141a:	85 37       	cpi	r24, 0x75	; 117
    141c:	31 f4       	brne	.+12     	; 0x142a <vfprintf+0x24e>
    141e:	23 2d       	mov	r18, r3
    1420:	2f 7e       	andi	r18, 0xEF	; 239
    1422:	b2 2e       	mov	r11, r18
    1424:	2a e0       	ldi	r18, 0x0A	; 10
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	25 c0       	rjmp	.+74     	; 0x1474 <vfprintf+0x298>
    142a:	93 2d       	mov	r25, r3
    142c:	99 7f       	andi	r25, 0xF9	; 249
    142e:	b9 2e       	mov	r11, r25
    1430:	8f 36       	cpi	r24, 0x6F	; 111
    1432:	c1 f0       	breq	.+48     	; 0x1464 <vfprintf+0x288>
    1434:	18 f4       	brcc	.+6      	; 0x143c <vfprintf+0x260>
    1436:	88 35       	cpi	r24, 0x58	; 88
    1438:	79 f0       	breq	.+30     	; 0x1458 <vfprintf+0x27c>
    143a:	ae c0       	rjmp	.+348    	; 0x1598 <vfprintf+0x3bc>
    143c:	80 37       	cpi	r24, 0x70	; 112
    143e:	19 f0       	breq	.+6      	; 0x1446 <vfprintf+0x26a>
    1440:	88 37       	cpi	r24, 0x78	; 120
    1442:	21 f0       	breq	.+8      	; 0x144c <vfprintf+0x270>
    1444:	a9 c0       	rjmp	.+338    	; 0x1598 <vfprintf+0x3bc>
    1446:	e9 2f       	mov	r30, r25
    1448:	e0 61       	ori	r30, 0x10	; 16
    144a:	be 2e       	mov	r11, r30
    144c:	b4 fe       	sbrs	r11, 4
    144e:	0d c0       	rjmp	.+26     	; 0x146a <vfprintf+0x28e>
    1450:	fb 2d       	mov	r31, r11
    1452:	f4 60       	ori	r31, 0x04	; 4
    1454:	bf 2e       	mov	r11, r31
    1456:	09 c0       	rjmp	.+18     	; 0x146a <vfprintf+0x28e>
    1458:	34 fe       	sbrs	r3, 4
    145a:	0a c0       	rjmp	.+20     	; 0x1470 <vfprintf+0x294>
    145c:	29 2f       	mov	r18, r25
    145e:	26 60       	ori	r18, 0x06	; 6
    1460:	b2 2e       	mov	r11, r18
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <vfprintf+0x294>
    1464:	28 e0       	ldi	r18, 0x08	; 8
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	05 c0       	rjmp	.+10     	; 0x1474 <vfprintf+0x298>
    146a:	20 e1       	ldi	r18, 0x10	; 16
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <vfprintf+0x298>
    1470:	20 e1       	ldi	r18, 0x10	; 16
    1472:	32 e0       	ldi	r19, 0x02	; 2
    1474:	f8 01       	movw	r30, r16
    1476:	b7 fe       	sbrs	r11, 7
    1478:	07 c0       	rjmp	.+14     	; 0x1488 <vfprintf+0x2ac>
    147a:	60 81       	ld	r22, Z
    147c:	71 81       	ldd	r23, Z+1	; 0x01
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	0c 5f       	subi	r16, 0xFC	; 252
    1484:	1f 4f       	sbci	r17, 0xFF	; 255
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <vfprintf+0x2b8>
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 5f       	subi	r16, 0xFE	; 254
    1492:	1f 4f       	sbci	r17, 0xFF	; 255
    1494:	a3 01       	movw	r20, r6
    1496:	24 d4       	rcall	.+2120   	; 0x1ce0 <__ultoa_invert>
    1498:	88 2e       	mov	r8, r24
    149a:	86 18       	sub	r8, r6
    149c:	fb 2d       	mov	r31, r11
    149e:	ff 77       	andi	r31, 0x7F	; 127
    14a0:	3f 2e       	mov	r3, r31
    14a2:	36 fe       	sbrs	r3, 6
    14a4:	0d c0       	rjmp	.+26     	; 0x14c0 <vfprintf+0x2e4>
    14a6:	23 2d       	mov	r18, r3
    14a8:	2e 7f       	andi	r18, 0xFE	; 254
    14aa:	a2 2e       	mov	r10, r18
    14ac:	89 14       	cp	r8, r9
    14ae:	58 f4       	brcc	.+22     	; 0x14c6 <vfprintf+0x2ea>
    14b0:	34 fe       	sbrs	r3, 4
    14b2:	0b c0       	rjmp	.+22     	; 0x14ca <vfprintf+0x2ee>
    14b4:	32 fc       	sbrc	r3, 2
    14b6:	09 c0       	rjmp	.+18     	; 0x14ca <vfprintf+0x2ee>
    14b8:	83 2d       	mov	r24, r3
    14ba:	8e 7e       	andi	r24, 0xEE	; 238
    14bc:	a8 2e       	mov	r10, r24
    14be:	05 c0       	rjmp	.+10     	; 0x14ca <vfprintf+0x2ee>
    14c0:	b8 2c       	mov	r11, r8
    14c2:	a3 2c       	mov	r10, r3
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <vfprintf+0x2f0>
    14c6:	b8 2c       	mov	r11, r8
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <vfprintf+0x2f0>
    14ca:	b9 2c       	mov	r11, r9
    14cc:	a4 fe       	sbrs	r10, 4
    14ce:	0f c0       	rjmp	.+30     	; 0x14ee <vfprintf+0x312>
    14d0:	fe 01       	movw	r30, r28
    14d2:	e8 0d       	add	r30, r8
    14d4:	f1 1d       	adc	r31, r1
    14d6:	80 81       	ld	r24, Z
    14d8:	80 33       	cpi	r24, 0x30	; 48
    14da:	21 f4       	brne	.+8      	; 0x14e4 <vfprintf+0x308>
    14dc:	9a 2d       	mov	r25, r10
    14de:	99 7e       	andi	r25, 0xE9	; 233
    14e0:	a9 2e       	mov	r10, r25
    14e2:	09 c0       	rjmp	.+18     	; 0x14f6 <vfprintf+0x31a>
    14e4:	a2 fe       	sbrs	r10, 2
    14e6:	06 c0       	rjmp	.+12     	; 0x14f4 <vfprintf+0x318>
    14e8:	b3 94       	inc	r11
    14ea:	b3 94       	inc	r11
    14ec:	04 c0       	rjmp	.+8      	; 0x14f6 <vfprintf+0x31a>
    14ee:	8a 2d       	mov	r24, r10
    14f0:	86 78       	andi	r24, 0x86	; 134
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <vfprintf+0x31a>
    14f4:	b3 94       	inc	r11
    14f6:	a3 fc       	sbrc	r10, 3
    14f8:	10 c0       	rjmp	.+32     	; 0x151a <vfprintf+0x33e>
    14fa:	a0 fe       	sbrs	r10, 0
    14fc:	06 c0       	rjmp	.+12     	; 0x150a <vfprintf+0x32e>
    14fe:	b2 14       	cp	r11, r2
    1500:	80 f4       	brcc	.+32     	; 0x1522 <vfprintf+0x346>
    1502:	28 0c       	add	r2, r8
    1504:	92 2c       	mov	r9, r2
    1506:	9b 18       	sub	r9, r11
    1508:	0d c0       	rjmp	.+26     	; 0x1524 <vfprintf+0x348>
    150a:	b2 14       	cp	r11, r2
    150c:	58 f4       	brcc	.+22     	; 0x1524 <vfprintf+0x348>
    150e:	b6 01       	movw	r22, r12
    1510:	80 e2       	ldi	r24, 0x20	; 32
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	90 d3       	rcall	.+1824   	; 0x1c36 <fputc>
    1516:	b3 94       	inc	r11
    1518:	f8 cf       	rjmp	.-16     	; 0x150a <vfprintf+0x32e>
    151a:	b2 14       	cp	r11, r2
    151c:	18 f4       	brcc	.+6      	; 0x1524 <vfprintf+0x348>
    151e:	2b 18       	sub	r2, r11
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <vfprintf+0x34a>
    1522:	98 2c       	mov	r9, r8
    1524:	21 2c       	mov	r2, r1
    1526:	a4 fe       	sbrs	r10, 4
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <vfprintf+0x36c>
    152a:	b6 01       	movw	r22, r12
    152c:	80 e3       	ldi	r24, 0x30	; 48
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	82 d3       	rcall	.+1796   	; 0x1c36 <fputc>
    1532:	a2 fe       	sbrs	r10, 2
    1534:	16 c0       	rjmp	.+44     	; 0x1562 <vfprintf+0x386>
    1536:	a1 fc       	sbrc	r10, 1
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <vfprintf+0x364>
    153a:	88 e7       	ldi	r24, 0x78	; 120
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <vfprintf+0x368>
    1540:	88 e5       	ldi	r24, 0x58	; 88
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	b6 01       	movw	r22, r12
    1546:	0c c0       	rjmp	.+24     	; 0x1560 <vfprintf+0x384>
    1548:	8a 2d       	mov	r24, r10
    154a:	86 78       	andi	r24, 0x86	; 134
    154c:	51 f0       	breq	.+20     	; 0x1562 <vfprintf+0x386>
    154e:	a1 fe       	sbrs	r10, 1
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <vfprintf+0x37a>
    1552:	8b e2       	ldi	r24, 0x2B	; 43
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <vfprintf+0x37c>
    1556:	80 e2       	ldi	r24, 0x20	; 32
    1558:	a7 fc       	sbrc	r10, 7
    155a:	8d e2       	ldi	r24, 0x2D	; 45
    155c:	b6 01       	movw	r22, r12
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	6a d3       	rcall	.+1748   	; 0x1c36 <fputc>
    1562:	89 14       	cp	r8, r9
    1564:	30 f4       	brcc	.+12     	; 0x1572 <vfprintf+0x396>
    1566:	b6 01       	movw	r22, r12
    1568:	80 e3       	ldi	r24, 0x30	; 48
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	64 d3       	rcall	.+1736   	; 0x1c36 <fputc>
    156e:	9a 94       	dec	r9
    1570:	f8 cf       	rjmp	.-16     	; 0x1562 <vfprintf+0x386>
    1572:	8a 94       	dec	r8
    1574:	f3 01       	movw	r30, r6
    1576:	e8 0d       	add	r30, r8
    1578:	f1 1d       	adc	r31, r1
    157a:	80 81       	ld	r24, Z
    157c:	b6 01       	movw	r22, r12
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	5a d3       	rcall	.+1716   	; 0x1c36 <fputc>
    1582:	81 10       	cpse	r8, r1
    1584:	f6 cf       	rjmp	.-20     	; 0x1572 <vfprintf+0x396>
    1586:	22 20       	and	r2, r2
    1588:	09 f4       	brne	.+2      	; 0x158c <vfprintf+0x3b0>
    158a:	4e ce       	rjmp	.-868    	; 0x1228 <vfprintf+0x4c>
    158c:	b6 01       	movw	r22, r12
    158e:	80 e2       	ldi	r24, 0x20	; 32
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	51 d3       	rcall	.+1698   	; 0x1c36 <fputc>
    1594:	2a 94       	dec	r2
    1596:	f7 cf       	rjmp	.-18     	; 0x1586 <vfprintf+0x3aa>
    1598:	f6 01       	movw	r30, r12
    159a:	86 81       	ldd	r24, Z+6	; 0x06
    159c:	97 81       	ldd	r25, Z+7	; 0x07
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <vfprintf+0x3c8>
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	9f ef       	ldi	r25, 0xFF	; 255
    15a4:	2b 96       	adiw	r28, 0x0b	; 11
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	bf 90       	pop	r11
    15c2:	af 90       	pop	r10
    15c4:	9f 90       	pop	r9
    15c6:	8f 90       	pop	r8
    15c8:	7f 90       	pop	r7
    15ca:	6f 90       	pop	r6
    15cc:	5f 90       	pop	r5
    15ce:	4f 90       	pop	r4
    15d0:	3f 90       	pop	r3
    15d2:	2f 90       	pop	r2
    15d4:	08 95       	ret

000015d6 <putval>:
    15d6:	20 fd       	sbrc	r18, 0
    15d8:	09 c0       	rjmp	.+18     	; 0x15ec <putval+0x16>
    15da:	fc 01       	movw	r30, r24
    15dc:	23 fd       	sbrc	r18, 3
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <putval+0x14>
    15e0:	22 ff       	sbrs	r18, 2
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <putval+0x12>
    15e4:	73 83       	std	Z+3, r23	; 0x03
    15e6:	62 83       	std	Z+2, r22	; 0x02
    15e8:	51 83       	std	Z+1, r21	; 0x01
    15ea:	40 83       	st	Z, r20
    15ec:	08 95       	ret

000015ee <mulacc>:
    15ee:	44 fd       	sbrc	r20, 4
    15f0:	17 c0       	rjmp	.+46     	; 0x1620 <mulacc+0x32>
    15f2:	46 fd       	sbrc	r20, 6
    15f4:	17 c0       	rjmp	.+46     	; 0x1624 <mulacc+0x36>
    15f6:	ab 01       	movw	r20, r22
    15f8:	bc 01       	movw	r22, r24
    15fa:	da 01       	movw	r26, r20
    15fc:	fb 01       	movw	r30, r22
    15fe:	aa 0f       	add	r26, r26
    1600:	bb 1f       	adc	r27, r27
    1602:	ee 1f       	adc	r30, r30
    1604:	ff 1f       	adc	r31, r31
    1606:	10 94       	com	r1
    1608:	d1 f7       	brne	.-12     	; 0x15fe <mulacc+0x10>
    160a:	4a 0f       	add	r20, r26
    160c:	5b 1f       	adc	r21, r27
    160e:	6e 1f       	adc	r22, r30
    1610:	7f 1f       	adc	r23, r31
    1612:	cb 01       	movw	r24, r22
    1614:	ba 01       	movw	r22, r20
    1616:	66 0f       	add	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	09 c0       	rjmp	.+18     	; 0x1632 <mulacc+0x44>
    1620:	33 e0       	ldi	r19, 0x03	; 3
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <mulacc+0x38>
    1624:	34 e0       	ldi	r19, 0x04	; 4
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	88 1f       	adc	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	31 50       	subi	r19, 0x01	; 1
    1630:	d1 f7       	brne	.-12     	; 0x1626 <mulacc+0x38>
    1632:	62 0f       	add	r22, r18
    1634:	71 1d       	adc	r23, r1
    1636:	81 1d       	adc	r24, r1
    1638:	91 1d       	adc	r25, r1
    163a:	08 95       	ret

0000163c <skip_spaces>:
    163c:	0f 93       	push	r16
    163e:	1f 93       	push	r17
    1640:	cf 93       	push	r28
    1642:	df 93       	push	r29
    1644:	8c 01       	movw	r16, r24
    1646:	c8 01       	movw	r24, r16
    1648:	b8 d2       	rcall	.+1392   	; 0x1bba <fgetc>
    164a:	ec 01       	movw	r28, r24
    164c:	97 fd       	sbrc	r25, 7
    164e:	06 c0       	rjmp	.+12     	; 0x165c <skip_spaces+0x20>
    1650:	8b d2       	rcall	.+1302   	; 0x1b68 <isspace>
    1652:	89 2b       	or	r24, r25
    1654:	c1 f7       	brne	.-16     	; 0x1646 <skip_spaces+0xa>
    1656:	b8 01       	movw	r22, r16
    1658:	ce 01       	movw	r24, r28
    165a:	29 d3       	rcall	.+1618   	; 0x1cae <ungetc>
    165c:	ce 01       	movw	r24, r28
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	08 95       	ret

00001668 <conv_int>:
    1668:	8f 92       	push	r8
    166a:	9f 92       	push	r9
    166c:	af 92       	push	r10
    166e:	bf 92       	push	r11
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	8c 01       	movw	r16, r24
    167e:	d6 2f       	mov	r29, r22
    1680:	7a 01       	movw	r14, r20
    1682:	b2 2e       	mov	r11, r18
    1684:	9a d2       	rcall	.+1332   	; 0x1bba <fgetc>
    1686:	9c 01       	movw	r18, r24
    1688:	33 27       	eor	r19, r19
    168a:	2b 32       	cpi	r18, 0x2B	; 43
    168c:	31 05       	cpc	r19, r1
    168e:	31 f0       	breq	.+12     	; 0x169c <conv_int+0x34>
    1690:	2d 32       	cpi	r18, 0x2D	; 45
    1692:	31 05       	cpc	r19, r1
    1694:	59 f4       	brne	.+22     	; 0x16ac <conv_int+0x44>
    1696:	8b 2d       	mov	r24, r11
    1698:	80 68       	ori	r24, 0x80	; 128
    169a:	b8 2e       	mov	r11, r24
    169c:	d1 50       	subi	r29, 0x01	; 1
    169e:	11 f4       	brne	.+4      	; 0x16a4 <conv_int+0x3c>
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	61 c0       	rjmp	.+194    	; 0x1766 <conv_int+0xfe>
    16a4:	c8 01       	movw	r24, r16
    16a6:	89 d2       	rcall	.+1298   	; 0x1bba <fgetc>
    16a8:	97 fd       	sbrc	r25, 7
    16aa:	fa cf       	rjmp	.-12     	; 0x16a0 <conv_int+0x38>
    16ac:	cb 2d       	mov	r28, r11
    16ae:	cd 7f       	andi	r28, 0xFD	; 253
    16b0:	2b 2d       	mov	r18, r11
    16b2:	20 73       	andi	r18, 0x30	; 48
    16b4:	f9 f4       	brne	.+62     	; 0x16f4 <conv_int+0x8c>
    16b6:	80 33       	cpi	r24, 0x30	; 48
    16b8:	e9 f4       	brne	.+58     	; 0x16f4 <conv_int+0x8c>
    16ba:	aa 24       	eor	r10, r10
    16bc:	aa 94       	dec	r10
    16be:	ad 0e       	add	r10, r29
    16c0:	09 f4       	brne	.+2      	; 0x16c4 <conv_int+0x5c>
    16c2:	3e c0       	rjmp	.+124    	; 0x1740 <conv_int+0xd8>
    16c4:	c8 01       	movw	r24, r16
    16c6:	79 d2       	rcall	.+1266   	; 0x1bba <fgetc>
    16c8:	97 fd       	sbrc	r25, 7
    16ca:	3a c0       	rjmp	.+116    	; 0x1740 <conv_int+0xd8>
    16cc:	9c 01       	movw	r18, r24
    16ce:	2f 7d       	andi	r18, 0xDF	; 223
    16d0:	33 27       	eor	r19, r19
    16d2:	28 35       	cpi	r18, 0x58	; 88
    16d4:	31 05       	cpc	r19, r1
    16d6:	41 f4       	brne	.+16     	; 0x16e8 <conv_int+0x80>
    16d8:	c2 64       	ori	r28, 0x42	; 66
    16da:	d2 50       	subi	r29, 0x02	; 2
    16dc:	89 f1       	breq	.+98     	; 0x1740 <conv_int+0xd8>
    16de:	c8 01       	movw	r24, r16
    16e0:	6c d2       	rcall	.+1240   	; 0x1bba <fgetc>
    16e2:	97 ff       	sbrs	r25, 7
    16e4:	07 c0       	rjmp	.+14     	; 0x16f4 <conv_int+0x8c>
    16e6:	2c c0       	rjmp	.+88     	; 0x1740 <conv_int+0xd8>
    16e8:	b6 fe       	sbrs	r11, 6
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <conv_int+0x88>
    16ec:	c2 60       	ori	r28, 0x02	; 2
    16ee:	01 c0       	rjmp	.+2      	; 0x16f2 <conv_int+0x8a>
    16f0:	c2 61       	ori	r28, 0x12	; 18
    16f2:	da 2d       	mov	r29, r10
    16f4:	81 2c       	mov	r8, r1
    16f6:	91 2c       	mov	r9, r1
    16f8:	54 01       	movw	r10, r8
    16fa:	20 ed       	ldi	r18, 0xD0	; 208
    16fc:	28 0f       	add	r18, r24
    16fe:	28 30       	cpi	r18, 0x08	; 8
    1700:	78 f0       	brcs	.+30     	; 0x1720 <conv_int+0xb8>
    1702:	c4 ff       	sbrs	r28, 4
    1704:	03 c0       	rjmp	.+6      	; 0x170c <conv_int+0xa4>
    1706:	b8 01       	movw	r22, r16
    1708:	d2 d2       	rcall	.+1444   	; 0x1cae <ungetc>
    170a:	17 c0       	rjmp	.+46     	; 0x173a <conv_int+0xd2>
    170c:	2a 30       	cpi	r18, 0x0A	; 10
    170e:	40 f0       	brcs	.+16     	; 0x1720 <conv_int+0xb8>
    1710:	c6 ff       	sbrs	r28, 6
    1712:	f9 cf       	rjmp	.-14     	; 0x1706 <conv_int+0x9e>
    1714:	2f 7d       	andi	r18, 0xDF	; 223
    1716:	3f ee       	ldi	r19, 0xEF	; 239
    1718:	32 0f       	add	r19, r18
    171a:	36 30       	cpi	r19, 0x06	; 6
    171c:	a0 f7       	brcc	.-24     	; 0x1706 <conv_int+0x9e>
    171e:	27 50       	subi	r18, 0x07	; 7
    1720:	4c 2f       	mov	r20, r28
    1722:	c5 01       	movw	r24, r10
    1724:	b4 01       	movw	r22, r8
    1726:	63 df       	rcall	.-314    	; 0x15ee <mulacc>
    1728:	4b 01       	movw	r8, r22
    172a:	5c 01       	movw	r10, r24
    172c:	c2 60       	ori	r28, 0x02	; 2
    172e:	d1 50       	subi	r29, 0x01	; 1
    1730:	51 f0       	breq	.+20     	; 0x1746 <conv_int+0xde>
    1732:	c8 01       	movw	r24, r16
    1734:	42 d2       	rcall	.+1156   	; 0x1bba <fgetc>
    1736:	97 ff       	sbrs	r25, 7
    1738:	e0 cf       	rjmp	.-64     	; 0x16fa <conv_int+0x92>
    173a:	c1 fd       	sbrc	r28, 1
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <conv_int+0xde>
    173e:	b0 cf       	rjmp	.-160    	; 0x16a0 <conv_int+0x38>
    1740:	81 2c       	mov	r8, r1
    1742:	91 2c       	mov	r9, r1
    1744:	54 01       	movw	r10, r8
    1746:	c7 ff       	sbrs	r28, 7
    1748:	08 c0       	rjmp	.+16     	; 0x175a <conv_int+0xf2>
    174a:	b0 94       	com	r11
    174c:	a0 94       	com	r10
    174e:	90 94       	com	r9
    1750:	80 94       	com	r8
    1752:	81 1c       	adc	r8, r1
    1754:	91 1c       	adc	r9, r1
    1756:	a1 1c       	adc	r10, r1
    1758:	b1 1c       	adc	r11, r1
    175a:	2c 2f       	mov	r18, r28
    175c:	b5 01       	movw	r22, r10
    175e:	a4 01       	movw	r20, r8
    1760:	c7 01       	movw	r24, r14
    1762:	39 df       	rcall	.-398    	; 0x15d6 <putval>
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	9f 90       	pop	r9
    1778:	8f 90       	pop	r8
    177a:	08 95       	ret

0000177c <conv_brk>:
    177c:	5f 92       	push	r5
    177e:	6f 92       	push	r6
    1780:	7f 92       	push	r7
    1782:	8f 92       	push	r8
    1784:	9f 92       	push	r9
    1786:	af 92       	push	r10
    1788:	bf 92       	push	r11
    178a:	cf 92       	push	r12
    178c:	df 92       	push	r13
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	a0 97       	sbiw	r28, 0x20	; 32
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	5c 01       	movw	r10, r24
    17ac:	96 2e       	mov	r9, r22
    17ae:	7a 01       	movw	r14, r20
    17b0:	f9 01       	movw	r30, r18
    17b2:	8e 01       	movw	r16, r28
    17b4:	0f 5f       	subi	r16, 0xFF	; 255
    17b6:	1f 4f       	sbci	r17, 0xFF	; 255
    17b8:	68 01       	movw	r12, r16
    17ba:	80 e2       	ldi	r24, 0x20	; 32
    17bc:	d8 01       	movw	r26, r16
    17be:	1d 92       	st	X+, r1
    17c0:	8a 95       	dec	r24
    17c2:	e9 f7       	brne	.-6      	; 0x17be <conv_brk+0x42>
    17c4:	d5 01       	movw	r26, r10
    17c6:	13 96       	adiw	r26, 0x03	; 3
    17c8:	8c 90       	ld	r8, X
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	61 2c       	mov	r6, r1
    17d0:	71 2c       	mov	r7, r1
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	61 e0       	ldi	r22, 0x01	; 1
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	83 fc       	sbrc	r8, 3
    17da:	25 91       	lpm	r18, Z+
    17dc:	83 fe       	sbrs	r8, 3
    17de:	21 91       	ld	r18, Z+
    17e0:	8f 01       	movw	r16, r30
    17e2:	52 2e       	mov	r5, r18
    17e4:	21 11       	cpse	r18, r1
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <conv_brk+0x72>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	90 c0       	rjmp	.+288    	; 0x190e <conv_brk+0x192>
    17ee:	2e 35       	cpi	r18, 0x5E	; 94
    17f0:	11 f4       	brne	.+4      	; 0x17f6 <conv_brk+0x7a>
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	51 f1       	breq	.+84     	; 0x184a <conv_brk+0xce>
    17f6:	43 2f       	mov	r20, r19
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	48 17       	cp	r20, r24
    17fc:	59 07       	cpc	r21, r25
    17fe:	3c f4       	brge	.+14     	; 0x180e <conv_brk+0x92>
    1800:	2d 35       	cpi	r18, 0x5D	; 93
    1802:	59 f1       	breq	.+86     	; 0x185a <conv_brk+0xde>
    1804:	2d 32       	cpi	r18, 0x2D	; 45
    1806:	19 f4       	brne	.+6      	; 0x180e <conv_brk+0x92>
    1808:	77 20       	and	r7, r7
    180a:	09 f1       	breq	.+66     	; 0x184e <conv_brk+0xd2>
    180c:	03 c0       	rjmp	.+6      	; 0x1814 <conv_brk+0x98>
    180e:	77 20       	and	r7, r7
    1810:	09 f4       	brne	.+2      	; 0x1814 <conv_brk+0x98>
    1812:	68 c0       	rjmp	.+208    	; 0x18e4 <conv_brk+0x168>
    1814:	45 2d       	mov	r20, r5
    1816:	46 95       	lsr	r20
    1818:	46 95       	lsr	r20
    181a:	46 95       	lsr	r20
    181c:	d6 01       	movw	r26, r12
    181e:	a4 0f       	add	r26, r20
    1820:	b1 1d       	adc	r27, r1
    1822:	45 2d       	mov	r20, r5
    1824:	47 70       	andi	r20, 0x07	; 7
    1826:	8b 01       	movw	r16, r22
    1828:	02 c0       	rjmp	.+4      	; 0x182e <conv_brk+0xb2>
    182a:	00 0f       	add	r16, r16
    182c:	11 1f       	adc	r17, r17
    182e:	4a 95       	dec	r20
    1830:	e2 f7       	brpl	.-8      	; 0x182a <conv_brk+0xae>
    1832:	a8 01       	movw	r20, r16
    1834:	5c 91       	ld	r21, X
    1836:	45 2b       	or	r20, r21
    1838:	4c 93       	st	X, r20
    183a:	65 14       	cp	r6, r5
    183c:	59 f0       	breq	.+22     	; 0x1854 <conv_brk+0xd8>
    183e:	56 14       	cp	r5, r6
    1840:	10 f4       	brcc	.+4      	; 0x1846 <conv_brk+0xca>
    1842:	53 94       	inc	r5
    1844:	e7 cf       	rjmp	.-50     	; 0x1814 <conv_brk+0x98>
    1846:	5a 94       	dec	r5
    1848:	e5 cf       	rjmp	.-54     	; 0x1814 <conv_brk+0x98>
    184a:	31 e0       	ldi	r19, 0x01	; 1
    184c:	04 c0       	rjmp	.+8      	; 0x1856 <conv_brk+0xda>
    184e:	77 24       	eor	r7, r7
    1850:	73 94       	inc	r7
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <conv_brk+0xda>
    1854:	71 2c       	mov	r7, r1
    1856:	01 96       	adiw	r24, 0x01	; 1
    1858:	bf cf       	rjmp	.-130    	; 0x17d8 <conv_brk+0x5c>
    185a:	77 20       	and	r7, r7
    185c:	19 f0       	breq	.+6      	; 0x1864 <conv_brk+0xe8>
    185e:	8e 81       	ldd	r24, Y+6	; 0x06
    1860:	80 62       	ori	r24, 0x20	; 32
    1862:	8e 83       	std	Y+6, r24	; 0x06
    1864:	31 11       	cpse	r19, r1
    1866:	03 c0       	rjmp	.+6      	; 0x186e <conv_brk+0xf2>
    1868:	88 24       	eor	r8, r8
    186a:	83 94       	inc	r8
    186c:	17 c0       	rjmp	.+46     	; 0x189c <conv_brk+0x120>
    186e:	f6 01       	movw	r30, r12
    1870:	9e 01       	movw	r18, r28
    1872:	2f 5d       	subi	r18, 0xDF	; 223
    1874:	3f 4f       	sbci	r19, 0xFF	; 255
    1876:	80 81       	ld	r24, Z
    1878:	80 95       	com	r24
    187a:	81 93       	st	Z+, r24
    187c:	2e 17       	cp	r18, r30
    187e:	3f 07       	cpc	r19, r31
    1880:	d1 f7       	brne	.-12     	; 0x1876 <conv_brk+0xfa>
    1882:	f2 cf       	rjmp	.-28     	; 0x1868 <conv_brk+0xec>
    1884:	e1 14       	cp	r14, r1
    1886:	f1 04       	cpc	r15, r1
    1888:	29 f0       	breq	.+10     	; 0x1894 <conv_brk+0x118>
    188a:	d7 01       	movw	r26, r14
    188c:	8c 93       	st	X, r24
    188e:	f7 01       	movw	r30, r14
    1890:	31 96       	adiw	r30, 0x01	; 1
    1892:	7f 01       	movw	r14, r30
    1894:	9a 94       	dec	r9
    1896:	81 2c       	mov	r8, r1
    1898:	99 20       	and	r9, r9
    189a:	e9 f0       	breq	.+58     	; 0x18d6 <conv_brk+0x15a>
    189c:	c5 01       	movw	r24, r10
    189e:	8d d1       	rcall	.+794    	; 0x1bba <fgetc>
    18a0:	97 fd       	sbrc	r25, 7
    18a2:	17 c0       	rjmp	.+46     	; 0x18d2 <conv_brk+0x156>
    18a4:	fc 01       	movw	r30, r24
    18a6:	ff 27       	eor	r31, r31
    18a8:	23 e0       	ldi	r18, 0x03	; 3
    18aa:	f5 95       	asr	r31
    18ac:	e7 95       	ror	r30
    18ae:	2a 95       	dec	r18
    18b0:	e1 f7       	brne	.-8      	; 0x18aa <conv_brk+0x12e>
    18b2:	ec 0d       	add	r30, r12
    18b4:	fd 1d       	adc	r31, r13
    18b6:	20 81       	ld	r18, Z
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	ac 01       	movw	r20, r24
    18bc:	47 70       	andi	r20, 0x07	; 7
    18be:	55 27       	eor	r21, r21
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <conv_brk+0x14a>
    18c2:	35 95       	asr	r19
    18c4:	27 95       	ror	r18
    18c6:	4a 95       	dec	r20
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <conv_brk+0x146>
    18ca:	20 fd       	sbrc	r18, 0
    18cc:	db cf       	rjmp	.-74     	; 0x1884 <conv_brk+0x108>
    18ce:	b5 01       	movw	r22, r10
    18d0:	ee d1       	rcall	.+988    	; 0x1cae <ungetc>
    18d2:	81 10       	cpse	r8, r1
    18d4:	89 cf       	rjmp	.-238    	; 0x17e8 <conv_brk+0x6c>
    18d6:	e1 14       	cp	r14, r1
    18d8:	f1 04       	cpc	r15, r1
    18da:	11 f0       	breq	.+4      	; 0x18e0 <conv_brk+0x164>
    18dc:	d7 01       	movw	r26, r14
    18de:	1c 92       	st	X, r1
    18e0:	c8 01       	movw	r24, r16
    18e2:	15 c0       	rjmp	.+42     	; 0x190e <conv_brk+0x192>
    18e4:	42 2f       	mov	r20, r18
    18e6:	46 95       	lsr	r20
    18e8:	46 95       	lsr	r20
    18ea:	46 95       	lsr	r20
    18ec:	d6 01       	movw	r26, r12
    18ee:	a4 0f       	add	r26, r20
    18f0:	b1 1d       	adc	r27, r1
    18f2:	42 2f       	mov	r20, r18
    18f4:	47 70       	andi	r20, 0x07	; 7
    18f6:	8b 01       	movw	r16, r22
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <conv_brk+0x182>
    18fa:	00 0f       	add	r16, r16
    18fc:	11 1f       	adc	r17, r17
    18fe:	4a 95       	dec	r20
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <conv_brk+0x17e>
    1902:	a8 01       	movw	r20, r16
    1904:	5c 91       	ld	r21, X
    1906:	45 2b       	or	r20, r21
    1908:	4c 93       	st	X, r20
    190a:	62 2e       	mov	r6, r18
    190c:	a4 cf       	rjmp	.-184    	; 0x1856 <conv_brk+0xda>
    190e:	a0 96       	adiw	r28, 0x20	; 32
    1910:	0f b6       	in	r0, 0x3f	; 63
    1912:	f8 94       	cli
    1914:	de bf       	out	0x3e, r29	; 62
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	cd bf       	out	0x3d, r28	; 61
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	ff 90       	pop	r15
    1924:	ef 90       	pop	r14
    1926:	df 90       	pop	r13
    1928:	cf 90       	pop	r12
    192a:	bf 90       	pop	r11
    192c:	af 90       	pop	r10
    192e:	9f 90       	pop	r9
    1930:	8f 90       	pop	r8
    1932:	7f 90       	pop	r7
    1934:	6f 90       	pop	r6
    1936:	5f 90       	pop	r5
    1938:	08 95       	ret

0000193a <vfscanf>:
    193a:	5f 92       	push	r5
    193c:	6f 92       	push	r6
    193e:	7f 92       	push	r7
    1940:	8f 92       	push	r8
    1942:	9f 92       	push	r9
    1944:	af 92       	push	r10
    1946:	bf 92       	push	r11
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	6c 01       	movw	r12, r24
    195a:	eb 01       	movw	r28, r22
    195c:	5a 01       	movw	r10, r20
    195e:	fc 01       	movw	r30, r24
    1960:	17 82       	std	Z+7, r1	; 0x07
    1962:	16 82       	std	Z+6, r1	; 0x06
    1964:	51 2c       	mov	r5, r1
    1966:	f6 01       	movw	r30, r12
    1968:	e3 80       	ldd	r14, Z+3	; 0x03
    196a:	fe 01       	movw	r30, r28
    196c:	e3 fc       	sbrc	r14, 3
    196e:	85 91       	lpm	r24, Z+
    1970:	e3 fe       	sbrs	r14, 3
    1972:	81 91       	ld	r24, Z+
    1974:	18 2f       	mov	r17, r24
    1976:	ef 01       	movw	r28, r30
    1978:	88 23       	and	r24, r24
    197a:	09 f4       	brne	.+2      	; 0x197e <vfscanf+0x44>
    197c:	e0 c0       	rjmp	.+448    	; 0x1b3e <vfscanf+0x204>
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	f3 d0       	rcall	.+486    	; 0x1b68 <isspace>
    1982:	89 2b       	or	r24, r25
    1984:	19 f0       	breq	.+6      	; 0x198c <vfscanf+0x52>
    1986:	c6 01       	movw	r24, r12
    1988:	59 de       	rcall	.-846    	; 0x163c <skip_spaces>
    198a:	ed cf       	rjmp	.-38     	; 0x1966 <vfscanf+0x2c>
    198c:	15 32       	cpi	r17, 0x25	; 37
    198e:	41 f4       	brne	.+16     	; 0x19a0 <vfscanf+0x66>
    1990:	fe 01       	movw	r30, r28
    1992:	e3 fc       	sbrc	r14, 3
    1994:	15 91       	lpm	r17, Z+
    1996:	e3 fe       	sbrs	r14, 3
    1998:	11 91       	ld	r17, Z+
    199a:	ef 01       	movw	r28, r30
    199c:	15 32       	cpi	r17, 0x25	; 37
    199e:	71 f4       	brne	.+28     	; 0x19bc <vfscanf+0x82>
    19a0:	c6 01       	movw	r24, r12
    19a2:	0b d1       	rcall	.+534    	; 0x1bba <fgetc>
    19a4:	97 fd       	sbrc	r25, 7
    19a6:	c9 c0       	rjmp	.+402    	; 0x1b3a <vfscanf+0x200>
    19a8:	41 2f       	mov	r20, r17
    19aa:	50 e0       	ldi	r21, 0x00	; 0
    19ac:	9c 01       	movw	r18, r24
    19ae:	33 27       	eor	r19, r19
    19b0:	24 17       	cp	r18, r20
    19b2:	35 07       	cpc	r19, r21
    19b4:	c1 f2       	breq	.-80     	; 0x1966 <vfscanf+0x2c>
    19b6:	b6 01       	movw	r22, r12
    19b8:	7a d1       	rcall	.+756    	; 0x1cae <ungetc>
    19ba:	c1 c0       	rjmp	.+386    	; 0x1b3e <vfscanf+0x204>
    19bc:	1a 32       	cpi	r17, 0x2A	; 42
    19be:	39 f4       	brne	.+14     	; 0x19ce <vfscanf+0x94>
    19c0:	e3 fc       	sbrc	r14, 3
    19c2:	15 91       	lpm	r17, Z+
    19c4:	e3 fe       	sbrs	r14, 3
    19c6:	11 91       	ld	r17, Z+
    19c8:	ef 01       	movw	r28, r30
    19ca:	01 e0       	ldi	r16, 0x01	; 1
    19cc:	01 c0       	rjmp	.+2      	; 0x19d0 <vfscanf+0x96>
    19ce:	00 e0       	ldi	r16, 0x00	; 0
    19d0:	f1 2c       	mov	r15, r1
    19d2:	20 ed       	ldi	r18, 0xD0	; 208
    19d4:	21 0f       	add	r18, r17
    19d6:	2a 30       	cpi	r18, 0x0A	; 10
    19d8:	78 f4       	brcc	.+30     	; 0x19f8 <vfscanf+0xbe>
    19da:	02 60       	ori	r16, 0x02	; 2
    19dc:	6f 2d       	mov	r22, r15
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	40 e2       	ldi	r20, 0x20	; 32
    19e6:	03 de       	rcall	.-1018   	; 0x15ee <mulacc>
    19e8:	f6 2e       	mov	r15, r22
    19ea:	fe 01       	movw	r30, r28
    19ec:	e3 fc       	sbrc	r14, 3
    19ee:	15 91       	lpm	r17, Z+
    19f0:	e3 fe       	sbrs	r14, 3
    19f2:	11 91       	ld	r17, Z+
    19f4:	ef 01       	movw	r28, r30
    19f6:	ed cf       	rjmp	.-38     	; 0x19d2 <vfscanf+0x98>
    19f8:	01 ff       	sbrs	r16, 1
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <vfscanf+0xc8>
    19fc:	f1 10       	cpse	r15, r1
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <vfscanf+0xcc>
    1a00:	9e c0       	rjmp	.+316    	; 0x1b3e <vfscanf+0x204>
    1a02:	ff 24       	eor	r15, r15
    1a04:	fa 94       	dec	r15
    1a06:	18 36       	cpi	r17, 0x68	; 104
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <vfscanf+0xd6>
    1a0a:	1c 36       	cpi	r17, 0x6C	; 108
    1a0c:	51 f0       	breq	.+20     	; 0x1a22 <vfscanf+0xe8>
    1a0e:	10 c0       	rjmp	.+32     	; 0x1a30 <vfscanf+0xf6>
    1a10:	fe 01       	movw	r30, r28
    1a12:	e3 fc       	sbrc	r14, 3
    1a14:	15 91       	lpm	r17, Z+
    1a16:	e3 fe       	sbrs	r14, 3
    1a18:	11 91       	ld	r17, Z+
    1a1a:	ef 01       	movw	r28, r30
    1a1c:	18 36       	cpi	r17, 0x68	; 104
    1a1e:	41 f4       	brne	.+16     	; 0x1a30 <vfscanf+0xf6>
    1a20:	08 60       	ori	r16, 0x08	; 8
    1a22:	04 60       	ori	r16, 0x04	; 4
    1a24:	fe 01       	movw	r30, r28
    1a26:	e3 fc       	sbrc	r14, 3
    1a28:	15 91       	lpm	r17, Z+
    1a2a:	e3 fe       	sbrs	r14, 3
    1a2c:	11 91       	ld	r17, Z+
    1a2e:	ef 01       	movw	r28, r30
    1a30:	11 23       	and	r17, r17
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <vfscanf+0xfc>
    1a34:	84 c0       	rjmp	.+264    	; 0x1b3e <vfscanf+0x204>
    1a36:	61 2f       	mov	r22, r17
    1a38:	70 e0       	ldi	r23, 0x00	; 0
    1a3a:	84 ee       	ldi	r24, 0xE4	; 228
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9c d0       	rcall	.+312    	; 0x1b78 <strchr_P>
    1a40:	89 2b       	or	r24, r25
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <vfscanf+0x10c>
    1a44:	7c c0       	rjmp	.+248    	; 0x1b3e <vfscanf+0x204>
    1a46:	00 fd       	sbrc	r16, 0
    1a48:	07 c0       	rjmp	.+14     	; 0x1a58 <vfscanf+0x11e>
    1a4a:	f5 01       	movw	r30, r10
    1a4c:	80 80       	ld	r8, Z
    1a4e:	91 80       	ldd	r9, Z+1	; 0x01
    1a50:	c5 01       	movw	r24, r10
    1a52:	02 96       	adiw	r24, 0x02	; 2
    1a54:	5c 01       	movw	r10, r24
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <vfscanf+0x122>
    1a58:	81 2c       	mov	r8, r1
    1a5a:	91 2c       	mov	r9, r1
    1a5c:	1e 36       	cpi	r17, 0x6E	; 110
    1a5e:	49 f4       	brne	.+18     	; 0x1a72 <vfscanf+0x138>
    1a60:	f6 01       	movw	r30, r12
    1a62:	46 81       	ldd	r20, Z+6	; 0x06
    1a64:	57 81       	ldd	r21, Z+7	; 0x07
    1a66:	60 e0       	ldi	r22, 0x00	; 0
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	20 2f       	mov	r18, r16
    1a6c:	c4 01       	movw	r24, r8
    1a6e:	b3 dd       	rcall	.-1178   	; 0x15d6 <putval>
    1a70:	7a cf       	rjmp	.-268    	; 0x1966 <vfscanf+0x2c>
    1a72:	13 36       	cpi	r17, 0x63	; 99
    1a74:	a1 f4       	brne	.+40     	; 0x1a9e <vfscanf+0x164>
    1a76:	01 fd       	sbrc	r16, 1
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <vfscanf+0x144>
    1a7a:	ff 24       	eor	r15, r15
    1a7c:	f3 94       	inc	r15
    1a7e:	c6 01       	movw	r24, r12
    1a80:	9c d0       	rcall	.+312    	; 0x1bba <fgetc>
    1a82:	97 fd       	sbrc	r25, 7
    1a84:	5a c0       	rjmp	.+180    	; 0x1b3a <vfscanf+0x200>
    1a86:	81 14       	cp	r8, r1
    1a88:	91 04       	cpc	r9, r1
    1a8a:	29 f0       	breq	.+10     	; 0x1a96 <vfscanf+0x15c>
    1a8c:	f4 01       	movw	r30, r8
    1a8e:	80 83       	st	Z, r24
    1a90:	c4 01       	movw	r24, r8
    1a92:	01 96       	adiw	r24, 0x01	; 1
    1a94:	4c 01       	movw	r8, r24
    1a96:	fa 94       	dec	r15
    1a98:	f1 10       	cpse	r15, r1
    1a9a:	f1 cf       	rjmp	.-30     	; 0x1a7e <vfscanf+0x144>
    1a9c:	4a c0       	rjmp	.+148    	; 0x1b32 <vfscanf+0x1f8>
    1a9e:	1b 35       	cpi	r17, 0x5B	; 91
    1aa0:	51 f4       	brne	.+20     	; 0x1ab6 <vfscanf+0x17c>
    1aa2:	9e 01       	movw	r18, r28
    1aa4:	a4 01       	movw	r20, r8
    1aa6:	6f 2d       	mov	r22, r15
    1aa8:	c6 01       	movw	r24, r12
    1aaa:	68 de       	rcall	.-816    	; 0x177c <conv_brk>
    1aac:	ec 01       	movw	r28, r24
    1aae:	89 2b       	or	r24, r25
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <vfscanf+0x17a>
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <vfscanf+0x1f8>
    1ab4:	39 c0       	rjmp	.+114    	; 0x1b28 <vfscanf+0x1ee>
    1ab6:	c6 01       	movw	r24, r12
    1ab8:	c1 dd       	rcall	.-1150   	; 0x163c <skip_spaces>
    1aba:	97 fd       	sbrc	r25, 7
    1abc:	3e c0       	rjmp	.+124    	; 0x1b3a <vfscanf+0x200>
    1abe:	1f 36       	cpi	r17, 0x6F	; 111
    1ac0:	49 f1       	breq	.+82     	; 0x1b14 <vfscanf+0x1da>
    1ac2:	28 f4       	brcc	.+10     	; 0x1ace <vfscanf+0x194>
    1ac4:	14 36       	cpi	r17, 0x64	; 100
    1ac6:	21 f1       	breq	.+72     	; 0x1b10 <vfscanf+0x1d6>
    1ac8:	19 36       	cpi	r17, 0x69	; 105
    1aca:	39 f1       	breq	.+78     	; 0x1b1a <vfscanf+0x1e0>
    1acc:	25 c0       	rjmp	.+74     	; 0x1b18 <vfscanf+0x1de>
    1ace:	13 37       	cpi	r17, 0x73	; 115
    1ad0:	71 f0       	breq	.+28     	; 0x1aee <vfscanf+0x1b4>
    1ad2:	15 37       	cpi	r17, 0x75	; 117
    1ad4:	e9 f0       	breq	.+58     	; 0x1b10 <vfscanf+0x1d6>
    1ad6:	20 c0       	rjmp	.+64     	; 0x1b18 <vfscanf+0x1de>
    1ad8:	81 14       	cp	r8, r1
    1ada:	91 04       	cpc	r9, r1
    1adc:	29 f0       	breq	.+10     	; 0x1ae8 <vfscanf+0x1ae>
    1ade:	f4 01       	movw	r30, r8
    1ae0:	60 82       	st	Z, r6
    1ae2:	c4 01       	movw	r24, r8
    1ae4:	01 96       	adiw	r24, 0x01	; 1
    1ae6:	4c 01       	movw	r8, r24
    1ae8:	fa 94       	dec	r15
    1aea:	ff 20       	and	r15, r15
    1aec:	59 f0       	breq	.+22     	; 0x1b04 <vfscanf+0x1ca>
    1aee:	c6 01       	movw	r24, r12
    1af0:	64 d0       	rcall	.+200    	; 0x1bba <fgetc>
    1af2:	3c 01       	movw	r6, r24
    1af4:	97 fd       	sbrc	r25, 7
    1af6:	06 c0       	rjmp	.+12     	; 0x1b04 <vfscanf+0x1ca>
    1af8:	37 d0       	rcall	.+110    	; 0x1b68 <isspace>
    1afa:	89 2b       	or	r24, r25
    1afc:	69 f3       	breq	.-38     	; 0x1ad8 <vfscanf+0x19e>
    1afe:	b6 01       	movw	r22, r12
    1b00:	c3 01       	movw	r24, r6
    1b02:	d5 d0       	rcall	.+426    	; 0x1cae <ungetc>
    1b04:	81 14       	cp	r8, r1
    1b06:	91 04       	cpc	r9, r1
    1b08:	a1 f0       	breq	.+40     	; 0x1b32 <vfscanf+0x1f8>
    1b0a:	f4 01       	movw	r30, r8
    1b0c:	10 82       	st	Z, r1
    1b0e:	11 c0       	rjmp	.+34     	; 0x1b32 <vfscanf+0x1f8>
    1b10:	00 62       	ori	r16, 0x20	; 32
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <vfscanf+0x1e0>
    1b14:	00 61       	ori	r16, 0x10	; 16
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <vfscanf+0x1e0>
    1b18:	00 64       	ori	r16, 0x40	; 64
    1b1a:	20 2f       	mov	r18, r16
    1b1c:	a4 01       	movw	r20, r8
    1b1e:	6f 2d       	mov	r22, r15
    1b20:	c6 01       	movw	r24, r12
    1b22:	a2 dd       	rcall	.-1212   	; 0x1668 <conv_int>
    1b24:	81 11       	cpse	r24, r1
    1b26:	05 c0       	rjmp	.+10     	; 0x1b32 <vfscanf+0x1f8>
    1b28:	f6 01       	movw	r30, r12
    1b2a:	83 81       	ldd	r24, Z+3	; 0x03
    1b2c:	80 73       	andi	r24, 0x30	; 48
    1b2e:	29 f4       	brne	.+10     	; 0x1b3a <vfscanf+0x200>
    1b30:	06 c0       	rjmp	.+12     	; 0x1b3e <vfscanf+0x204>
    1b32:	00 fd       	sbrc	r16, 0
    1b34:	18 cf       	rjmp	.-464    	; 0x1966 <vfscanf+0x2c>
    1b36:	53 94       	inc	r5
    1b38:	16 cf       	rjmp	.-468    	; 0x1966 <vfscanf+0x2c>
    1b3a:	55 20       	and	r5, r5
    1b3c:	19 f0       	breq	.+6      	; 0x1b44 <vfscanf+0x20a>
    1b3e:	85 2d       	mov	r24, r5
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfscanf+0x20e>
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	9f ef       	ldi	r25, 0xFF	; 255
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	cf 90       	pop	r12
    1b58:	bf 90       	pop	r11
    1b5a:	af 90       	pop	r10
    1b5c:	9f 90       	pop	r9
    1b5e:	8f 90       	pop	r8
    1b60:	7f 90       	pop	r7
    1b62:	6f 90       	pop	r6
    1b64:	5f 90       	pop	r5
    1b66:	08 95       	ret

00001b68 <isspace>:
    1b68:	91 11       	cpse	r25, r1
    1b6a:	18 c1       	rjmp	.+560    	; 0x1d9c <__ctype_isfalse>
    1b6c:	80 32       	cpi	r24, 0x20	; 32
    1b6e:	19 f0       	breq	.+6      	; 0x1b76 <isspace+0xe>
    1b70:	89 50       	subi	r24, 0x09	; 9
    1b72:	85 50       	subi	r24, 0x05	; 5
    1b74:	d0 f7       	brcc	.-12     	; 0x1b6a <isspace+0x2>
    1b76:	08 95       	ret

00001b78 <strchr_P>:
    1b78:	fc 01       	movw	r30, r24
    1b7a:	05 90       	lpm	r0, Z+
    1b7c:	06 16       	cp	r0, r22
    1b7e:	21 f0       	breq	.+8      	; 0x1b88 <strchr_P+0x10>
    1b80:	00 20       	and	r0, r0
    1b82:	d9 f7       	brne	.-10     	; 0x1b7a <strchr_P+0x2>
    1b84:	c0 01       	movw	r24, r0
    1b86:	08 95       	ret
    1b88:	31 97       	sbiw	r30, 0x01	; 1
    1b8a:	cf 01       	movw	r24, r30
    1b8c:	08 95       	ret

00001b8e <strnlen_P>:
    1b8e:	fc 01       	movw	r30, r24
    1b90:	05 90       	lpm	r0, Z+
    1b92:	61 50       	subi	r22, 0x01	; 1
    1b94:	70 40       	sbci	r23, 0x00	; 0
    1b96:	01 10       	cpse	r0, r1
    1b98:	d8 f7       	brcc	.-10     	; 0x1b90 <strnlen_P+0x2>
    1b9a:	80 95       	com	r24
    1b9c:	90 95       	com	r25
    1b9e:	8e 0f       	add	r24, r30
    1ba0:	9f 1f       	adc	r25, r31
    1ba2:	08 95       	ret

00001ba4 <strnlen>:
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	61 50       	subi	r22, 0x01	; 1
    1ba8:	70 40       	sbci	r23, 0x00	; 0
    1baa:	01 90       	ld	r0, Z+
    1bac:	01 10       	cpse	r0, r1
    1bae:	d8 f7       	brcc	.-10     	; 0x1ba6 <strnlen+0x2>
    1bb0:	80 95       	com	r24
    1bb2:	90 95       	com	r25
    1bb4:	8e 0f       	add	r24, r30
    1bb6:	9f 1f       	adc	r25, r31
    1bb8:	08 95       	ret

00001bba <fgetc>:
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	ec 01       	movw	r28, r24
    1bc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bc2:	20 ff       	sbrs	r18, 0
    1bc4:	33 c0       	rjmp	.+102    	; 0x1c2c <fgetc+0x72>
    1bc6:	26 ff       	sbrs	r18, 6
    1bc8:	0a c0       	rjmp	.+20     	; 0x1bde <fgetc+0x24>
    1bca:	2f 7b       	andi	r18, 0xBF	; 191
    1bcc:	2b 83       	std	Y+3, r18	; 0x03
    1bce:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	9f 83       	std	Y+7, r25	; 0x07
    1bd6:	8e 83       	std	Y+6, r24	; 0x06
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	29 c0       	rjmp	.+82     	; 0x1c30 <fgetc+0x76>
    1bde:	22 ff       	sbrs	r18, 2
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <fgetc+0x46>
    1be2:	e8 81       	ld	r30, Y
    1be4:	f9 81       	ldd	r31, Y+1	; 0x01
    1be6:	80 81       	ld	r24, Z
    1be8:	08 2e       	mov	r0, r24
    1bea:	00 0c       	add	r0, r0
    1bec:	99 0b       	sbc	r25, r25
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	19 f4       	brne	.+6      	; 0x1bf8 <fgetc+0x3e>
    1bf2:	20 62       	ori	r18, 0x20	; 32
    1bf4:	2b 83       	std	Y+3, r18	; 0x03
    1bf6:	1a c0       	rjmp	.+52     	; 0x1c2c <fgetc+0x72>
    1bf8:	31 96       	adiw	r30, 0x01	; 1
    1bfa:	f9 83       	std	Y+1, r31	; 0x01
    1bfc:	e8 83       	st	Y, r30
    1bfe:	0e c0       	rjmp	.+28     	; 0x1c1c <fgetc+0x62>
    1c00:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c02:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c04:	19 95       	eicall
    1c06:	97 ff       	sbrs	r25, 7
    1c08:	09 c0       	rjmp	.+18     	; 0x1c1c <fgetc+0x62>
    1c0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0c:	01 96       	adiw	r24, 0x01	; 1
    1c0e:	11 f0       	breq	.+4      	; 0x1c14 <fgetc+0x5a>
    1c10:	80 e2       	ldi	r24, 0x20	; 32
    1c12:	01 c0       	rjmp	.+2      	; 0x1c16 <fgetc+0x5c>
    1c14:	80 e1       	ldi	r24, 0x10	; 16
    1c16:	82 2b       	or	r24, r18
    1c18:	8b 83       	std	Y+3, r24	; 0x03
    1c1a:	08 c0       	rjmp	.+16     	; 0x1c2c <fgetc+0x72>
    1c1c:	2e 81       	ldd	r18, Y+6	; 0x06
    1c1e:	3f 81       	ldd	r19, Y+7	; 0x07
    1c20:	2f 5f       	subi	r18, 0xFF	; 255
    1c22:	3f 4f       	sbci	r19, 0xFF	; 255
    1c24:	3f 83       	std	Y+7, r19	; 0x07
    1c26:	2e 83       	std	Y+6, r18	; 0x06
    1c28:	99 27       	eor	r25, r25
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <fgetc+0x76>
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	08 95       	ret

00001c36 <fputc>:
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	df 93       	push	r29
    1c3e:	fb 01       	movw	r30, r22
    1c40:	23 81       	ldd	r18, Z+3	; 0x03
    1c42:	21 fd       	sbrc	r18, 1
    1c44:	03 c0       	rjmp	.+6      	; 0x1c4c <fputc+0x16>
    1c46:	8f ef       	ldi	r24, 0xFF	; 255
    1c48:	9f ef       	ldi	r25, 0xFF	; 255
    1c4a:	2c c0       	rjmp	.+88     	; 0x1ca4 <fputc+0x6e>
    1c4c:	22 ff       	sbrs	r18, 2
    1c4e:	16 c0       	rjmp	.+44     	; 0x1c7c <fputc+0x46>
    1c50:	46 81       	ldd	r20, Z+6	; 0x06
    1c52:	57 81       	ldd	r21, Z+7	; 0x07
    1c54:	24 81       	ldd	r18, Z+4	; 0x04
    1c56:	35 81       	ldd	r19, Z+5	; 0x05
    1c58:	42 17       	cp	r20, r18
    1c5a:	53 07       	cpc	r21, r19
    1c5c:	44 f4       	brge	.+16     	; 0x1c6e <fputc+0x38>
    1c5e:	a0 81       	ld	r26, Z
    1c60:	b1 81       	ldd	r27, Z+1	; 0x01
    1c62:	9d 01       	movw	r18, r26
    1c64:	2f 5f       	subi	r18, 0xFF	; 255
    1c66:	3f 4f       	sbci	r19, 0xFF	; 255
    1c68:	31 83       	std	Z+1, r19	; 0x01
    1c6a:	20 83       	st	Z, r18
    1c6c:	8c 93       	st	X, r24
    1c6e:	26 81       	ldd	r18, Z+6	; 0x06
    1c70:	37 81       	ldd	r19, Z+7	; 0x07
    1c72:	2f 5f       	subi	r18, 0xFF	; 255
    1c74:	3f 4f       	sbci	r19, 0xFF	; 255
    1c76:	37 83       	std	Z+7, r19	; 0x07
    1c78:	26 83       	std	Z+6, r18	; 0x06
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <fputc+0x6e>
    1c7c:	8b 01       	movw	r16, r22
    1c7e:	ec 01       	movw	r28, r24
    1c80:	fb 01       	movw	r30, r22
    1c82:	00 84       	ldd	r0, Z+8	; 0x08
    1c84:	f1 85       	ldd	r31, Z+9	; 0x09
    1c86:	e0 2d       	mov	r30, r0
    1c88:	19 95       	eicall
    1c8a:	89 2b       	or	r24, r25
    1c8c:	e1 f6       	brne	.-72     	; 0x1c46 <fputc+0x10>
    1c8e:	d8 01       	movw	r26, r16
    1c90:	16 96       	adiw	r26, 0x06	; 6
    1c92:	8d 91       	ld	r24, X+
    1c94:	9c 91       	ld	r25, X
    1c96:	17 97       	sbiw	r26, 0x07	; 7
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	17 96       	adiw	r26, 0x07	; 7
    1c9c:	9c 93       	st	X, r25
    1c9e:	8e 93       	st	-X, r24
    1ca0:	16 97       	sbiw	r26, 0x06	; 6
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	08 95       	ret

00001cae <ungetc>:
    1cae:	fb 01       	movw	r30, r22
    1cb0:	23 81       	ldd	r18, Z+3	; 0x03
    1cb2:	20 ff       	sbrs	r18, 0
    1cb4:	12 c0       	rjmp	.+36     	; 0x1cda <ungetc+0x2c>
    1cb6:	26 fd       	sbrc	r18, 6
    1cb8:	10 c0       	rjmp	.+32     	; 0x1cda <ungetc+0x2c>
    1cba:	8f 3f       	cpi	r24, 0xFF	; 255
    1cbc:	3f ef       	ldi	r19, 0xFF	; 255
    1cbe:	93 07       	cpc	r25, r19
    1cc0:	61 f0       	breq	.+24     	; 0x1cda <ungetc+0x2c>
    1cc2:	82 83       	std	Z+2, r24	; 0x02
    1cc4:	2f 7d       	andi	r18, 0xDF	; 223
    1cc6:	20 64       	ori	r18, 0x40	; 64
    1cc8:	23 83       	std	Z+3, r18	; 0x03
    1cca:	26 81       	ldd	r18, Z+6	; 0x06
    1ccc:	37 81       	ldd	r19, Z+7	; 0x07
    1cce:	21 50       	subi	r18, 0x01	; 1
    1cd0:	31 09       	sbc	r19, r1
    1cd2:	37 83       	std	Z+7, r19	; 0x07
    1cd4:	26 83       	std	Z+6, r18	; 0x06
    1cd6:	99 27       	eor	r25, r25
    1cd8:	08 95       	ret
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	9f ef       	ldi	r25, 0xFF	; 255
    1cde:	08 95       	ret

00001ce0 <__ultoa_invert>:
    1ce0:	fa 01       	movw	r30, r20
    1ce2:	aa 27       	eor	r26, r26
    1ce4:	28 30       	cpi	r18, 0x08	; 8
    1ce6:	51 f1       	breq	.+84     	; 0x1d3c <__ultoa_invert+0x5c>
    1ce8:	20 31       	cpi	r18, 0x10	; 16
    1cea:	81 f1       	breq	.+96     	; 0x1d4c <__ultoa_invert+0x6c>
    1cec:	e8 94       	clt
    1cee:	6f 93       	push	r22
    1cf0:	6e 7f       	andi	r22, 0xFE	; 254
    1cf2:	6e 5f       	subi	r22, 0xFE	; 254
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfa:	af 4f       	sbci	r26, 0xFF	; 255
    1cfc:	b1 e0       	ldi	r27, 0x01	; 1
    1cfe:	3e d0       	rcall	.+124    	; 0x1d7c <__ultoa_invert+0x9c>
    1d00:	b4 e0       	ldi	r27, 0x04	; 4
    1d02:	3c d0       	rcall	.+120    	; 0x1d7c <__ultoa_invert+0x9c>
    1d04:	67 0f       	add	r22, r23
    1d06:	78 1f       	adc	r23, r24
    1d08:	89 1f       	adc	r24, r25
    1d0a:	9a 1f       	adc	r25, r26
    1d0c:	a1 1d       	adc	r26, r1
    1d0e:	68 0f       	add	r22, r24
    1d10:	79 1f       	adc	r23, r25
    1d12:	8a 1f       	adc	r24, r26
    1d14:	91 1d       	adc	r25, r1
    1d16:	a1 1d       	adc	r26, r1
    1d18:	6a 0f       	add	r22, r26
    1d1a:	71 1d       	adc	r23, r1
    1d1c:	81 1d       	adc	r24, r1
    1d1e:	91 1d       	adc	r25, r1
    1d20:	a1 1d       	adc	r26, r1
    1d22:	20 d0       	rcall	.+64     	; 0x1d64 <__ultoa_invert+0x84>
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <__ultoa_invert+0x48>
    1d26:	68 94       	set
    1d28:	3f 91       	pop	r19
    1d2a:	2a e0       	ldi	r18, 0x0A	; 10
    1d2c:	26 9f       	mul	r18, r22
    1d2e:	11 24       	eor	r1, r1
    1d30:	30 19       	sub	r19, r0
    1d32:	30 5d       	subi	r19, 0xD0	; 208
    1d34:	31 93       	st	Z+, r19
    1d36:	de f6       	brtc	.-74     	; 0x1cee <__ultoa_invert+0xe>
    1d38:	cf 01       	movw	r24, r30
    1d3a:	08 95       	ret
    1d3c:	46 2f       	mov	r20, r22
    1d3e:	47 70       	andi	r20, 0x07	; 7
    1d40:	40 5d       	subi	r20, 0xD0	; 208
    1d42:	41 93       	st	Z+, r20
    1d44:	b3 e0       	ldi	r27, 0x03	; 3
    1d46:	0f d0       	rcall	.+30     	; 0x1d66 <__ultoa_invert+0x86>
    1d48:	c9 f7       	brne	.-14     	; 0x1d3c <__ultoa_invert+0x5c>
    1d4a:	f6 cf       	rjmp	.-20     	; 0x1d38 <__ultoa_invert+0x58>
    1d4c:	46 2f       	mov	r20, r22
    1d4e:	4f 70       	andi	r20, 0x0F	; 15
    1d50:	40 5d       	subi	r20, 0xD0	; 208
    1d52:	4a 33       	cpi	r20, 0x3A	; 58
    1d54:	18 f0       	brcs	.+6      	; 0x1d5c <__ultoa_invert+0x7c>
    1d56:	49 5d       	subi	r20, 0xD9	; 217
    1d58:	31 fd       	sbrc	r19, 1
    1d5a:	40 52       	subi	r20, 0x20	; 32
    1d5c:	41 93       	st	Z+, r20
    1d5e:	02 d0       	rcall	.+4      	; 0x1d64 <__ultoa_invert+0x84>
    1d60:	a9 f7       	brne	.-22     	; 0x1d4c <__ultoa_invert+0x6c>
    1d62:	ea cf       	rjmp	.-44     	; 0x1d38 <__ultoa_invert+0x58>
    1d64:	b4 e0       	ldi	r27, 0x04	; 4
    1d66:	a6 95       	lsr	r26
    1d68:	97 95       	ror	r25
    1d6a:	87 95       	ror	r24
    1d6c:	77 95       	ror	r23
    1d6e:	67 95       	ror	r22
    1d70:	ba 95       	dec	r27
    1d72:	c9 f7       	brne	.-14     	; 0x1d66 <__ultoa_invert+0x86>
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	61 05       	cpc	r22, r1
    1d78:	71 05       	cpc	r23, r1
    1d7a:	08 95       	ret
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	ac 01       	movw	r20, r24
    1d80:	0a 2e       	mov	r0, r26
    1d82:	06 94       	lsr	r0
    1d84:	57 95       	ror	r21
    1d86:	47 95       	ror	r20
    1d88:	37 95       	ror	r19
    1d8a:	27 95       	ror	r18
    1d8c:	ba 95       	dec	r27
    1d8e:	c9 f7       	brne	.-14     	; 0x1d82 <__ultoa_invert+0xa2>
    1d90:	62 0f       	add	r22, r18
    1d92:	73 1f       	adc	r23, r19
    1d94:	84 1f       	adc	r24, r20
    1d96:	95 1f       	adc	r25, r21
    1d98:	a0 1d       	adc	r26, r0
    1d9a:	08 95       	ret

00001d9c <__ctype_isfalse>:
    1d9c:	99 27       	eor	r25, r25
    1d9e:	88 27       	eor	r24, r24

00001da0 <__ctype_istrue>:
    1da0:	08 95       	ret

00001da2 <_exit>:
    1da2:	f8 94       	cli

00001da4 <__stop_program>:
    1da4:	ff cf       	rjmp	.-2      	; 0x1da4 <__stop_program>
